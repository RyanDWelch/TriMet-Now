{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwelch/Code/PDX-NOW/trimet-now/src/App.js\";\nimport React from \"react\";\nimport GoogleMap from './components/GoogleMap';\nimport Marker from './components/Marker';\nimport Navigation from './components/Navigation';\nimport Stats from './components/Stats';\nimport { apiIsLoaded } from './Functions';\nimport \"./App.css\";\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      setInterval(async () => {\n        const res = await fetch('https://developer.trimet.org/ws/v2/vehicles/appID/CC57D2038B76DBBD253D6A587');\n        const json = await res.json();\n        const filteredVehicles = json.resultSet.vehicle.filter(vehicle => vehicle.type == 'rail');\n        const newData = filteredVehicles;\n        this.setState({\n          isLoaded: true,\n          items: newData\n        });\n      }, 2000);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    var _this$state = this.state,\n        isLoaded = _this$state.isLoaded,\n        items = _this$state.items;\n\n    if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(GoogleMap, {\n        defaultZoom: 12,\n        defaultCenter: [45.519526, -122.677040],\n        yesIWantToUseGoogleMapApiInternals: true,\n        onGoogleApiLoaded: ({\n          map,\n          maps\n        }) => apiIsLoaded(map, maps, items),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, items.map(item => React.createElement(Marker, {\n        key: item.vehicleID,\n        text: item.signMessageLong,\n        type: item.type,\n        lat: item.latitude,\n        lng: item.longitude,\n        data: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }))), React.createElement(\"button\", {\n        onClick: () => this.getData(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"UPDATE DATA!\"), React.createElement(Navigation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(Stats, {\n        data: items,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/ryanwelch/Code/PDX-NOW/trimet-now/src/App.js"],"names":["React","GoogleMap","Marker","Navigation","Stats","apiIsLoaded","App","Component","constructor","props","state","isLoaded","items","componentDidMount","setInterval","res","fetch","json","filteredVehicles","resultSet","vehicle","filter","type","newData","setState","e","console","log","render","map","maps","item","vehicleID","signMessageLong","latitude","longitude","getData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,WAAP;AAIA,OAAO,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,KADC;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAID;;AAKD,QAAMC,iBAAN,GAA0B;AACxB,QAAI;AACFC,MAAAA,WAAW,CAAC,YAAY;AACtB,cAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,6EAAD,CAAvB;AACA,cAAMC,IAAI,GAAG,MAAMF,GAAG,CAACE,IAAJ,EAAnB;AACA,cAAMC,gBAAgB,GAAGD,IAAI,CAACE,SAAL,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BD,OAAO,IAAIA,OAAO,CAACE,IAAR,IAAgB,MAAzD,CAAzB;AACA,cAAMC,OAAO,GAAGL,gBAAhB;AAEA,aAAKM,QAAL,CAAc;AACZb,UAAAA,QAAQ,EAAE,IADE;AAEZC,UAAAA,KAAK,EAAEW;AAFK,SAAd;AAID,OAVU,EAUR,IAVQ,CAAX;AAWD,KAZD,CAYE,OAAME,CAAN,EAAS;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACJ;;AAECG,EAAAA,MAAM,GAAG;AAAA,sBACmB,KAAKlB,KADxB;AAAA,QACDC,QADC,eACDA,QADC;AAAA,QACSC,KADT,eACSA,KADT;;AAGP,QAAI,CAACD,QAAL,EAAe;AACb,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAFD,MAEO;AACL,aACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AACE,QAAA,WAAW,EAAE,EADf;AAEE,QAAA,aAAa,EAAE,CAAC,SAAD,EAAW,CAAC,UAAZ,CAFjB;AAGE,QAAA,kCAAkC,MAHpC;AAIE,QAAA,iBAAiB,EAAE,CAAC;AAAEkB,UAAAA,GAAF;AAAOC,UAAAA;AAAP,SAAD,KAAmBzB,WAAW,CAACwB,GAAD,EAAMC,IAAN,EAAYlB,KAAZ,CAJnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMGA,KAAK,CAACiB,GAAN,CAAUE,IAAI,IACb,oBAAC,MAAD;AACA,QAAA,GAAG,EAAEA,IAAI,CAACC,SADV;AAEA,QAAA,IAAI,EAAED,IAAI,CAACE,eAFX;AAGA,QAAA,IAAI,EAAEF,IAAI,CAACT,IAHX;AAIA,QAAA,GAAG,EAAES,IAAI,CAACG,QAJV;AAKA,QAAA,GAAG,EAAEH,IAAI,CAACI,SALV;AAMA,QAAA,IAAI,EAAEJ,IANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CANH,CADF,EAkBE;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKK,OAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAlBF,EAmBE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnBF,EAoBE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAExB,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QApBF,CADF;AA0BD;AACF;;AA/DsC;AAkEzC,eAAeN,GAAf","sourcesContent":["import React from \"react\";\nimport GoogleMap from './components/GoogleMap';\n\nimport Marker from './components/Marker';\nimport Navigation from './components/Navigation';\nimport Stats from './components/Stats';\nimport { apiIsLoaded } from './Functions'\n\nimport \"./App.css\";\n\n\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      items: []\n    };\n  }\n\n\n\n\n  async componentDidMount() {\n    try {\n      setInterval(async () => {\n        const res = await fetch('https://developer.trimet.org/ws/v2/vehicles/appID/CC57D2038B76DBBD253D6A587');\n        const json = await res.json();\n        const filteredVehicles = json.resultSet.vehicle.filter(vehicle => vehicle.type == 'rail');\n        const newData = filteredVehicles;\n\n        this.setState({\n          isLoaded: true,\n          items: newData\n        })\n      }, 2000);\n    } catch(e) {\n      console.log(e);\n    }\n}\n\n  render() {\n    var { isLoaded, items } = this.state;\n\n    if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"container\">\n          <GoogleMap\n            defaultZoom={12}\n            defaultCenter={[45.519526,-122.677040]}\n            yesIWantToUseGoogleMapApiInternals\n            onGoogleApiLoaded={({ map, maps }) => apiIsLoaded(map, maps, items)}\n            >\n            {items.map(item => (\n              <Marker \n              key={item.vehicleID}\n              text={item.signMessageLong}\n              type={item.type}\n              lat={item.latitude}\n              lng={item.longitude}\n              data={item}\n              />\n            ))}\n          </GoogleMap>\n          <button onClick={() => this.getData()}>UPDATE DATA!</button>\n          <Navigation />\n          <Stats\n            data={items}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}