{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwelch/Code/PDX-NOW/trimet-now/src/App.js\";\nimport React from \"react\";\nimport GoogleMap from './components/GoogleMap';\nimport Marker from './components/Marker';\nimport Navigation from './components/Navigation';\nimport Stats from './components/Stats';\nimport \"./App.css\"; // Return map bounds based on list of places\n\nconst getMapBounds = (map, maps, places) => {\n  const bounds = new maps.LatLngBounds();\n  places.forEach(place => {\n    bounds.extend(new maps.LatLng(place.latitude, place.longitude));\n  });\n  return bounds;\n}; // Re-center map when resizing the window\n\n\nconst bindResizeListener = (map, maps, bounds) => {\n  maps.event.addDomListenerOnce(map, 'idle', () => {\n    maps.event.addDomListener(window, 'resize', () => {\n      map.fitBounds(bounds);\n    });\n  });\n}; // Fit map to its bounds after the api is loaded\n\n\nconst apiIsLoaded = (map, maps, places) => {\n  // Get bounds by our places\n  const bounds = getMapBounds(map, maps, places); // Fit map to bounds\n\n  map.fitBounds(bounds); // Bind the resize listener\n\n  bindResizeListener(map, maps, bounds);\n};\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  getData() {\n    fetch(\"https://developer.trimet.org/ws/v2/vehicles/appID/CC57D2038B76DBBD253D6A587\").then(res => res.json()).then(json => {\n      // filter out busses\n      //const filteredVehicles = json.resultSet.vehicle.filter(vehicle => vehicle.type == 'rail');\n      this.setState({\n        isLoaded: true,\n        items: json.resultSet.vehicle\n      });\n    });\n    console.log('got data');\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    var _this$state = this.state,\n        isLoaded = _this$state.isLoaded,\n        items = _this$state.items;\n\n    if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(GoogleMap, {\n        defaultZoom: 12,\n        defaultCenter: [45.519526, -122.677040],\n        yesIWantToUseGoogleMapApiInternals: true,\n        onGoogleApiLoaded: ({\n          map,\n          maps\n        }) => apiIsLoaded(map, maps, items),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, items.map(item => React.createElement(Marker, {\n        key: item.vehicleID,\n        text: item.signMessageLong,\n        type: item.type,\n        lat: item.latitude,\n        lng: item.longitude,\n        data: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }))), React.createElement(\"button\", {\n        onClick: () => this.getData(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"UPDATE DATA!\"), React.createElement(Navigation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(Stats, {\n        data: items,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\nexport default App;","map":{"version":3,"sources":["/Users/ryanwelch/Code/PDX-NOW/trimet-now/src/App.js"],"names":["React","GoogleMap","Marker","Navigation","Stats","getMapBounds","map","maps","places","bounds","LatLngBounds","forEach","place","extend","LatLng","latitude","longitude","bindResizeListener","event","addDomListenerOnce","addDomListener","window","fitBounds","apiIsLoaded","App","Component","constructor","props","state","isLoaded","items","getData","fetch","then","res","json","setState","resultSet","vehicle","console","log","componentDidMount","render","item","vehicleID","signMessageLong","type"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport GoogleMap from './components/GoogleMap';\n\nimport Marker from './components/Marker';\nimport Navigation from './components/Navigation';\nimport Stats from './components/Stats';\n\nimport \"./App.css\";\n\n// Return map bounds based on list of places\nconst getMapBounds = (map, maps, places) => {\n  const bounds = new maps.LatLngBounds();\n\n  places.forEach((place) => {\n    bounds.extend(new maps.LatLng(\n      place.latitude,\n      place.longitude,\n    ));\n  });\n  return bounds;\n};\n\n// Re-center map when resizing the window\nconst bindResizeListener = (map, maps, bounds) => {\n  maps.event.addDomListenerOnce(map, 'idle', () => {\n    maps.event.addDomListener(window, 'resize', () => {\n      map.fitBounds(bounds);\n    });\n  });\n};\n\n// Fit map to its bounds after the api is loaded\nconst apiIsLoaded = (map, maps, places) => {\n  // Get bounds by our places\n  const bounds = getMapBounds(map, maps, places);\n  // Fit map to bounds\n  map.fitBounds(bounds);\n  // Bind the resize listener\n  bindResizeListener(map, maps, bounds);\n};\n\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  getData() {\n    fetch(\n      \"https://developer.trimet.org/ws/v2/vehicles/appID/CC57D2038B76DBBD253D6A587\"\n    )\n      .then(res => res.json())\n      .then(json => {\n        // filter out busses\n        //const filteredVehicles = json.resultSet.vehicle.filter(vehicle => vehicle.type == 'rail');\n        this.setState({\n          isLoaded: true,\n          items: json.resultSet.vehicle\n        });\n      });\n      console.log('got data');\n  }\n    \n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    var { isLoaded, items } = this.state;\n\n    if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"container\">\n          <GoogleMap\n            defaultZoom={12}\n            defaultCenter={[45.519526,-122.677040]}\n            yesIWantToUseGoogleMapApiInternals\n            onGoogleApiLoaded={({ map, maps }) => apiIsLoaded(map, maps, items)}\n            >\n            {items.map(item => (\n              <Marker \n              key={item.vehicleID}\n              text={item.signMessageLong}\n              type={item.type}\n              lat={item.latitude}\n              lng={item.longitude}\n              data={item}\n              />\n            ))}\n          </GoogleMap>\n          <button onClick={() => this.getData()}>UPDATE DATA!</button>\n          <Navigation />\n          <Stats\n            data={items}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}