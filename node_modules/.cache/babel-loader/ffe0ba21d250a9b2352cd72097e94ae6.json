{"ast":null,"code":"var _jsxFileName = \"/Users/ryanwelch/WebDev/PDX-NOW/trimet-now/src/App.js\";\n// import React from \"react\";\n// import Vehicle from \"./Vehicle\";\n// import \"./App.css\";\n// export class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       items: [],\n//       isLoaded: false\n//     };\n//   }\n//   componentDidMount() {\n//     fetch(\n//       \"https://developer.trimet.org/ws/v2/vehicles/appID/CC57D2038B76DBBD253D6A587\"\n//     )\n//       .then(res => res.json())\n//       .then(json => {\n//         this.setState({\n//           isLoaded: true,\n//           items: json\n//         });\n//       });\n//   }\n//   render() {\n//     var { isLoaded, items } = this.state;\n//     if (!isLoaded) {\n//       return <div>Loading...</div>;\n//     } else {\n//       return (\n//         <div class=\"container\">\n//           {items.resultSet.vehicle.map(item => (\n//             <Vehicle data={item} />\n//           ))}\n//         </div>\n//       );\n//     }\n//   }\n// }\n// export default App;\nimport React, { Component } from \"react\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\nexport class MapContainer extends Component {\n  constructor(_props) {\n    super(_props);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      userLocation: {\n        lat: 32,\n        lng: 32\n      },\n      loadingLocation: true\n    };\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onMapClicked = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      items: [],\n      isLoaded: false\n    };\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(position => {\n      const _position$coords = position.coords,\n            latitude = _position$coords.latitude,\n            longitude = _position$coords.longitude;\n      this.setState({\n        userLocation: {\n          lat: latitude,\n          lng: longitude\n        },\n        loadingLocation: false\n      });\n    }, () => {\n      this.setState({\n        loadingLocation: false\n      });\n    });\n  }\n\n  render() {\n    var _this$state = this.state,\n        isLoaded = _this$state.isLoaded,\n        items = _this$state.items,\n        userLocation = _this$state.userLocation,\n        loadingLocation = _this$state.loadingLocation;\n    return (// if (!isLoaded) {\n      //   return <div > Loading... < /div>;\n      // }\n      React.createElement(Map, {\n        google: this.props.google,\n        onClick: this.onMapClicked,\n        initialCenter: userLocation,\n        zoom: 14,\n        style: mapStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      })\n    );\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyA-GZmh7jYFI9Qc_4w6sXkUnU9nirea8o0\"\n})(MapContainer);","map":{"version":3,"sources":["/Users/ryanwelch/WebDev/PDX-NOW/trimet-now/src/App.js"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","mapStyles","width","height","MapContainer","constructor","props","state","showingInfoWindow","activeMarker","selectedPlace","userLocation","lat","lng","loadingLocation","onMarkerClick","marker","e","setState","onMapClicked","items","isLoaded","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","render","google","apiKey"],"mappings":"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","sourcesContent":["// import React from \"react\";\n// import Vehicle from \"./Vehicle\";\n// import \"./App.css\";\n\n// export class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       items: [],\n//       isLoaded: false\n//     };\n//   }\n\n//   componentDidMount() {\n//     fetch(\n//       \"https://developer.trimet.org/ws/v2/vehicles/appID/CC57D2038B76DBBD253D6A587\"\n//     )\n//       .then(res => res.json())\n//       .then(json => {\n//         this.setState({\n//           isLoaded: true,\n//           items: json\n//         });\n//       });\n//   }\n\n//   render() {\n//     var { isLoaded, items } = this.state;\n\n//     if (!isLoaded) {\n//       return <div>Loading...</div>;\n//     } else {\n//       return (\n//         <div class=\"container\">\n//           {items.resultSet.vehicle.map(item => (\n//             <Vehicle data={item} />\n//           ))}\n//         </div>\n//       );\n//     }\n//   }\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, {Component} from \"react\";\nimport {Map,InfoWindow,Marker,GoogleApiWrapper} from 'google-maps-react';\n\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\n\nexport class MapContainer extends Component {\n  state = {\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {},\n    userLocation: {\n      lat: 32,\n      lng: 32\n    },\n    loadingLocation: true\n  };\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onMapClicked = (props) => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      })\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false,\n    }\n  }\n\n  componentDidMount() {\n\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n\n        this.setState({\n          userLocation: {\n            lat: latitude,\n            lng: longitude\n          },\n          loadingLocation: false\n        });\n      },\n      () => {\n        this.setState({\n          loadingLocation: false\n        });\n      }\n    );\n  }\n\n\n  render() {\n\n    var {isLoaded,items,userLocation,loadingLocation} = this.state;\n\n    return (\n\n      // if (!isLoaded) {\n      //   return <div > Loading... < /div>;\n      // }\n\n      <Map \n      google = {this.props.google}\n      onClick = {this.onMapClicked}\n      initialCenter = {userLocation}\n      zoom = {14}\n      style = {mapStyles}\n      >\n      </Map>\n    )\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (\"AIzaSyA-GZmh7jYFI9Qc_4w6sXkUnU9nirea8o0\")\n})(MapContainer)\n"]},"metadata":{},"sourceType":"module"}