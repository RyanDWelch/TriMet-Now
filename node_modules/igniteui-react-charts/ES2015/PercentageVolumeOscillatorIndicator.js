/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { StrategyBasedIndicator } from "./StrategyBasedIndicator";
import { IShortPeriodLongPeriod_$type } from "./IShortPeriodLongPeriod";
import { PercentageVolumeOscillatorIndicatorStrategy } from "./PercentageVolumeOscillatorIndicatorStrategy";
import { typeGetValue, markType } from "igniteui-react-core/ES2015/type";
/**
 * @hidden
 */
export class PercentageVolumeOscillatorIndicator extends StrategyBasedIndicator {
    get_qb() {
        return new PercentageVolumeOscillatorIndicatorStrategy();
    }
    get qb() {
        return this.get_qb();
    }
    get_qo() {
        return PercentageVolumeOscillatorIndicator.$;
    }
    get qo() {
        return this.get_qo();
    }
    get shortPeriod() {
        return typeGetValue(this.c(PercentageVolumeOscillatorIndicator.qx));
    }
    set shortPeriod(a) {
        this.h(PercentageVolumeOscillatorIndicator.qx, a);
    }
    qj() {
        return this.shortPeriod;
    }
    get longPeriod() {
        return typeGetValue(this.c(PercentageVolumeOscillatorIndicator.qw));
    }
    set longPeriod(a) {
        this.h(PercentageVolumeOscillatorIndicator.qw, a);
    }
    qg() {
        return this.longPeriod;
    }
}
PercentageVolumeOscillatorIndicator.$t = markType(PercentageVolumeOscillatorIndicator, 'PercentageVolumeOscillatorIndicator', StrategyBasedIndicator.$, [IShortPeriodLongPeriod_$type]);
PercentageVolumeOscillatorIndicator.qx = StrategyBasedIndicator.qv(10, PercentageVolumeOscillatorIndicator.$);
PercentageVolumeOscillatorIndicator.qw = StrategyBasedIndicator.qr(30, PercentageVolumeOscillatorIndicator.$);
