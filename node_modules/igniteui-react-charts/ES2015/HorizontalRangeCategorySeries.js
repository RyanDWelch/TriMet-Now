/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { RangeCategorySeries } from "./RangeCategorySeries";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { NumericYAxis } from "./NumericYAxis";
import { Axis } from "./Axis";
import { Type, Point_$type, runOn, typeCast, markType } from "igniteui-react-core/ES2015/type";
import { RangeValueList } from "./RangeValueList";
import { ScalerParams } from "./ScalerParams";
import { CategoryXAxis } from "./CategoryXAxis";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
/**
 * @hidden
 */
export class HorizontalRangeCategorySeries extends RangeCategorySeries {
    fetchXAxis() {
        return this.xAxis;
    }
    fetchYAxis() {
        return this.yAxis;
    }
    ht() {
        super.ht();
        this.xAxis = null;
        this.yAxis = null;
    }
    ah(a) {
        let b = this.aj(this.m5(), this.m6.f, this.n6(this.bi), this.n7(this.bi), this.ln(a), true);
        if (b == null) {
            return null;
        }
        let c = b[0];
        let d = b[1];
        let e = new Array(1);
        let f = new Array(2);
        f[0] = { $type: Point_$type, x: c[0], y: c[2] };
        f[1] = { $type: Point_$type, x: d[0], y: d[2] };
        e[0] = f;
        return e;
    }
    ai(a) {
        let b = this.aj(this.m5(), this.m6.f, this.n6(this.bi), this.n7(this.bi), this.ln(a), true);
        if (b == null) {
            return null;
        }
        let c = b[0];
        let d = b[1];
        let e = new Array(1);
        let f = new Array(2);
        f[0] = { $type: Point_$type, x: c[0], y: c[1] };
        f[1] = { $type: Point_$type, x: d[0], y: d[1] };
        e[0] = f;
        return e;
    }
    get_c3() {
        return true;
    }
    bd() {
        if (this.be == 0) {
            return 1;
        }
        else {
            return super.bd();
        }
    }
    getOffsetValue() {
        return this.RangeFramePreparer.r(this.xAxis, this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
    }
    getCategoryWidth() {
        return this.xAxis.getCategorySize(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
    }
    fc(a, b) {
        return this.fd(a, b, this.xAxis, runOn(this, this.n4), new RangeValueList(this.highColumn, this.lowColumn));
    }
    fe(a, b) {
        return this.ff(a, b, this.xAxis, runOn(this, this.n4), new RangeValueList(this.highColumn, this.lowColumn));
    }
    d9(a, b, c, d, e) {
        if (c == null) {
            return Number.POSITIVE_INFINITY;
        }
        let f = this.xAxis.jx;
        return this.ea(a, b, this.xAxis, d, e, f, runOn(this, this.n4));
    }
    en(a, b, c) {
        if (this.bs == null) {
            return NaN;
        }
        let d = this.getEffectiveViewport1(this.bi);
        let e = new ScalerParams(0, this.bs.mq, this.bi.br, this.xAxis.b8, d);
        let f = this.RangeFramePreparer.r(this.xAxis, this.bs.mq, this.bi.br, d);
        return this.ep(new RangeValueList(this.highColumn, this.lowColumn), a, this.xAxis, e, f, runOn(this, this.n4), b, c);
    }
    el(a, b, c) {
        if (this.bs == null) {
            return NaN;
        }
        let d = this.getEffectiveViewport1(this.bi);
        let e = new ScalerParams(0, this.bs.mq, this.bi.br, this.xAxis.b8, d);
        let f = this.RangeFramePreparer.r(this.xAxis, this.bs.mq, this.bi.br, d);
        return this.ep(this.lowColumn, a, this.xAxis, e, f, runOn(this, this.n4), b, c);
    }
    ej(a, b, c) {
        if (this.bs == null) {
            return NaN;
        }
        let d = this.getEffectiveViewport1(this.bi);
        let e = new ScalerParams(0, this.bs.mq, this.bi.br, this.xAxis.b8, d);
        let f = this.RangeFramePreparer.r(this.xAxis, this.bs.mq, this.bi.br, d);
        return this.ep(this.highColumn, a, this.xAxis, e, f, runOn(this, this.n4), b, c);
    }
    lg(a, b, c) {
        return this.lm(a, b, c, this.RangeFramePreparer.r(this.xAxis, this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi)), this.yAxis, this.xAxis, runOn(this, this.ej), (d, e) => this.ff(d, e, this.xAxis, runOn(this, this.n4), this.highColumn), (d, e) => this.fd(d, e, this.xAxis, runOn(this, this.n4), this.highColumn));
    }
    li(a, b, c) {
        return this.lm(a, b, c, this.RangeFramePreparer.r(this.xAxis, this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi)), this.yAxis, this.xAxis, runOn(this, this.el), (d, e) => this.ff(d, e, this.xAxis, runOn(this, this.n4), this.lowColumn), (d, e) => this.fd(d, e, this.xAxis, runOn(this, this.n4), this.lowColumn));
    }
    lk(a, b, c) {
        return this.lm(a, b, c, this.RangeFramePreparer.r(this.xAxis, this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi)), this.yAxis, this.xAxis, null, null, null);
    }
    n0() {
        return this.yAxis != null && this.yAxis.ck();
    }
    iy(a, b, c, d) {
        super.iy(a, b, c, d);
        switch (b) {
            case HorizontalRangeCategorySeries.$$p[0]:
                this.hz(typeCast(Axis.$, c));
                this.i3(typeCast(Axis.$, d));
                this.ne.cn.g(this.eu);
                this.jc(false);
                this.ij();
                break;
            case HorizontalRangeCategorySeries.$$p[1]:
                this.hz(typeCast(Axis.$, c));
                this.i3(typeCast(Axis.$, d));
                this.ne.cn.g(this.eu);
                this.n0();
                this.jc(false);
                this.ij();
                break;
        }
    }
    pd(a) {
        if (typeCast(NumericYAxis.$, a) !== null) {
            return true;
        }
        return false;
    }
    pc(a) {
        if (typeCast(CategoryXAxis.$, a) !== null || a.b5) {
            return true;
        }
        return false;
    }
    get useHighMarkerFidelity() {
        return this.n1;
    }
}
HorizontalRangeCategorySeries.$t = markType(HorizontalRangeCategorySeries, 'HorizontalRangeCategorySeries', RangeCategorySeries.$);
Type.dep(DependencyProperty, PropertyMetadata, HorizontalRangeCategorySeries, 'raisePropertyChanged', ['XAxis::pg', [CategoryAxisBase.$, null], 'YAxis::ph', [NumericYAxis.$, null]]);
