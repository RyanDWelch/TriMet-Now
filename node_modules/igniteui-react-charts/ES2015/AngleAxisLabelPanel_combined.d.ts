import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
import { Point, Type, IList$1 } from "igniteui-react-core/ES2015/type";
import { AxisLabelPanelBaseView } from "./AxisLabelPanelBaseView";
import { Rect } from "igniteui-react-core/ES2015/Rect";
import { Axis } from "./Axis";
import { List$1 } from "igniteui-react-core/ES2015/List$1";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { IAngleScaler } from "./IAngleScaler";
import { CategoryAxisRenderer } from "./CategoryAxisRenderer";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { AxisOrientation } from "./AxisOrientation";
import { AxisView } from "./AxisView";
import { PolarAxisRenderingManager } from "./PolarAxisRenderingManager";
import { ScalerParams } from "./ScalerParams";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { Geometry } from "igniteui-react-core/ES2015/Geometry";
import { NumericAxisBase } from "./NumericAxisBase";
import { NumericAxisRenderer } from "./NumericAxisRenderer";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { GeometryGroup } from "igniteui-react-core/ES2015/GeometryGroup";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
export declare class AngleAxisLabelPanel extends AxisLabelPanelBase {
    static $t: Type;
    ad(): AxisLabelPanelBaseView;
    b8(a: AxisLabelPanelBaseView): void;
    cs: AngleAxisLabelPanelView;
    constructor();
    ct: boolean;
    cz: (arg1: number) => Point;
    ao(a: number, b: Rect): boolean;
    cx: number;
    cu: number;
    cw: number;
    cv: number;
    ay(): List$1<Rect>;
    private cy;
    ah(): AxisLabelsLocation;
    as(a: AxisLabelsLocation): boolean;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxis extends CategoryAxisBase implements IAngleScaler {
    static $t: Type;
    a1(): AxisView;
    gr(a: AxisView): void;
    kw: CategoryAngleAxisView;
    protected get_b0(): boolean;
    private k1;
    constructor();
    as(): AxisLabelPanelBase;
    ky: CategoryAxisRenderer;
    private k2;
    private lg;
    private k6;
    private kx;
    private lv;
    private la;
    private kv;
    getMinMaxAngle(a: Rect, b: number, c: number): {
        p1: number;
        p2: number;
    };
    ac(): void;
    private kz;
    k0: NumericRadiusAxis;
    ah(): Axis;
    lh: number;
    private k7;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    jq(a: Rect, b: Rect, c: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    ld(a: number): number;
    protected g6(a: boolean): void;
    lc(a: Rect, b: Rect): number;
    lb(a: Rect, b: Rect): number;
    getScaledAngle(a: number): number;
    getUnscaledAngle(a: number): number;
    dv(a: number, b: ScalerParams): number;
    dy(a: number, b: ScalerParams): number;
    protected gt(a: any, b: string, c: any, d: any): void;
    private lp;
    lr(a: NumericRadiusAxis): void;
    static readonly ls: DependencyProperty;
    le: number;
    private k4;
    k8: number;
    d6(): number;
    static readonly lt: DependencyProperty;
    lf: number;
    private k5;
    k9: number;
    protected k3(): boolean;
    protected get_az(): AxisOrientation;
    readonly az: AxisOrientation;
    cm(): boolean;
    private li;
    lj: number;
    is(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    readonly isVertical: boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    readonly j$a: boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericAngleAxis extends NumericAxisBase implements IAngleScaler {
    static $t: Type;
    a1(): AxisView;
    gr(a: AxisView): void;
    lb: NumericAngleAxisView;
    le: PolarAxisRenderingManager;
    protected get_b0(): boolean;
    constructor();
    as(): AxisLabelPanelBase;
    private li;
    private lk;
    private lf;
    private lg;
    jc(): NumericAxisRenderer;
    private lr;
    dv(a: number, b: ScalerParams): number;
    getScaledAngle1(a: number, b: boolean, c: boolean): number;
    getScaledAngle(a: number): number;
    dy(a: number, b: ScalerParams): number;
    getUnscaledAngle(a: number): number;
    ll: number;
    private lh;
    protected gt(a: any, b: string, c: any, d: any): void;
    private ln;
    jg(): NumericAxisRenderingParameters;
    jf(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    getMinMaxAngle(a: Rect, b: number, c: number): {
        p1: number;
        p2: number;
    };
    protected g6(a: boolean): void;
    private lc;
    ld: NumericRadiusAxis;
    ah(): Axis;
    lp(a: NumericRadiusAxis): void;
    protected hg(a: Rect, b: Rect): void;
    protected get_az(): AxisOrientation;
    readonly az: AxisOrientation;
    is(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericRadiusAxis extends NumericAxisBase {
    static $t: Type;
    a1(): AxisView;
    gr(a: AxisView): void;
    ld: NumericRadiusAxisView;
    protected get_cb(): boolean;
    du(): number;
    private lm;
    private ll;
    private le;
    constructor();
    as(): AxisLabelPanelBase;
    lf: boolean;
    private lj;
    private lg;
    jc(): NumericAxisRenderer;
    dv(a: number, b: ScalerParams): number;
    lp(a: number, b: boolean, c: boolean, d: number, e: number): number;
    lo(a: number): number;
    lq(a: number): number;
    dy(a: number, b: ScalerParams): number;
    ls: number;
    li: number;
    lr: number;
    lh: number;
    protected gt(a: any, b: string, c: any, d: any): void;
    protected lk: number;
    lx(a: Axis): void;
    private lb;
    lc: Axis;
    ah(): Axis;
    jg(): NumericAxisRenderingParameters;
    jf(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    private ly;
    private lt;
    ln(): number;
    k1(a: AxisRangeChangedEventArgs): void;
    protected g6(a: boolean): void;
    protected hg(a: Rect, b: Rect): void;
    lw(a: GeometryGroup, b: Rect, c: Rect, d: Rect, e: Rect): void;
    protected get_az(): AxisOrientation;
    readonly az: AxisOrientation;
    is(a: number, b: Rect, c: Rect, d?: any, e?: any): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AngleAxisLabelPanelView extends AxisLabelPanelBaseView {
    static $t: Type;
    protected ax: AngleAxisLabelPanel;
    constructor(a: AngleAxisLabelPanel);
    am(): void;
    ay(a: List$1<Rect>, b: List$1<boolean>): void;
    o(): number;
    p(): number;
    q(): number;
    r(): number;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxisView extends CategoryAxisBaseView {
    static $t: Type;
    protected bg: CategoryAngleAxis;
    constructor(a: CategoryAngleAxis);
}
/**
 * @hidden
 */
export declare class NumericAngleAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bg: NumericAngleAxis;
    constructor(a: NumericAngleAxis);
}
/**
 * @hidden
 */
export declare class NumericRadiusAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bg: NumericRadiusAxis;
    constructor(a: NumericRadiusAxis);
}
