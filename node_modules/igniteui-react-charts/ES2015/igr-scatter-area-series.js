import { IgrColorScale } from "./igr-color-scale";
import { IgrScatterTriangulationSeries } from "./igr-scatter-triangulation-series";
import { ScatterAreaSeries } from "./ScatterAreaSeries";
import { toPoint } from "igniteui-react-core/ES2015/componentUtil";
/**
 * Series class which draws a colored 2D surface based on a triangulation of XY data with numeric values assigned to each point.
*/
export class IgrScatterAreaSeries extends IgrScatterTriangulationSeries {
    createImplementation() {
        return new ScatterAreaSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets ColorScale used to resolve the color values of points in the series.
    */
    get colorScale() {
        if (this.i.nk == null) {
            return null;
        }
        if (!this.i.nk.externalObject) {
            let e = IgrColorScale._createFromInternal(this.i.nk);
            if (e) {
                e._implementation = this.i.nk;
            }
            this.i.nk.externalObject = e;
        }
        return this.i.nk.externalObject;
    }
    set colorScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.nk = null : this.i.nk = v.i;
    }
    /**
     * Gets or sets the name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.
    */
    get colorMemberPath() {
        return this.i.ns;
    }
    set colorMemberPath(v) {
        this.i.ns = v;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.colorScale && this.colorScale._styling) {
            this.colorScale._styling(container, component, this);
        }
        this._inStyling = false;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.fs(item, memberPathName);
        return (iv);
    }
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world) {
        let iv = this.i.fp(toPoint(world));
        return (iv);
    }
    /**
     * Attaches an image to the view of this series
    
    */
    attachImage(image) {
        this.i.nw(image);
    }
}
