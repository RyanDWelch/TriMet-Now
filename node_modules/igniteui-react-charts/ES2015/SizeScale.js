/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DependencyObject } from "igniteui-react-core/ES2015/DependencyObject";
import { INotifyPropertyChanged_$type, PropertyChangedEventArgs, Type, delegateCombine, fromEnum, markType } from "igniteui-react-core/ES2015/type";
import { List$1 } from "igniteui-react-core/ES2015/List$1";
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { PropertyUpdatedEventArgs } from "igniteui-react-core/ES2015/PropertyUpdatedEventArgs";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
/**
 * @hidden
 */
export class SizeScale extends DependencyObject {
    constructor() {
        super();
        this.l = null;
        this.propertyChanged = null;
        this.propertyUpdated = null;
        this.l = new List$1(Series.$, 0);
        this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.t(a, b.propertyName, b.oldValue, b.newValue));
    }
    u(a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        if (this.propertyUpdated != null) {
            this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
        }
    }
    t(a, b, c, d) {
        for (let e of fromEnum(this.l)) {
            e.jc(false);
            if (e.bs != null) {
                e.ij();
                e.ii();
            }
        }
    }
}
SizeScale.$t = markType(SizeScale, 'SizeScale', DependencyObject.$, [INotifyPropertyChanged_$type]);
Type.dep(DependencyProperty, PropertyMetadata, SizeScale, 'u', ['IsLogarithmic', [0, false], 'LogarithmBase', [1, 10], 'MaximumValue', [1, NaN], 'MinimumValue', [1, NaN]]);
