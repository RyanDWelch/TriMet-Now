import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core/ES2015/type";
import { LabelsPosition_$type } from "./LabelsPosition";
import { Visibility_$type } from "igniteui-react-core/ES2015/Visibility";
import { LeaderLineType_$type } from "./LeaderLineType";
import { OthersCategoryType_$type } from "./OthersCategoryType";
import { IndexCollection } from "./igr-index-collection";
import { SweepDirection_$type } from "igniteui-react-core/ES2015/SweepDirection";
import { SliceSelectionMode_$type } from "./SliceSelectionMode";
import { ObjectCollection } from "igniteui-react-core/ES2015/igr-object-collection";
import { LabelClickEventArgs } from "./igr-label-click-event-args";
import { SelectedItemChangingEventArgs } from "./igr-selected-item-changing-event-args";
import { SelectedItemsChangingEventArgs } from "./igr-selected-items-changing-event-args";
import { SelectedItemChangedEventArgs } from "./igr-selected-item-changed-event-args";
import { SelectedItemsChangedEventArgs } from "./igr-selected-items-changed-event-args";
import { SliceClickEventArgs } from "./igr-slice-click-event-args";
import { TypeRegistrar, Number_$type, Base } from "igniteui-react-core/ES2015/type";
import { NamePatcher, getModifiedProps, isValidProp, ensureEnum, brushToString, stringToBrush, ensureBool, toBrushCollection, fromBrushCollection, toSpinal, initializePropertiesFromCss, toPoint } from "igniteui-react-core/ES2015/componentUtil";
import { IndexCollection as IndexCollection_internal } from "./IndexCollection";
import { SyncableObservableCollection$1 } from "igniteui-react-core/ES2015/SyncableObservableCollection$1";
import { Style } from "igniteui-react-core/ES2015/Style";
import { ObjectCollection as ObjectCollection_internal } from "igniteui-react-core/ES2015/ObjectCollection";
/**
 * Represents the base class for the pie chart.
*/
export class IgrPieChartBase extends React.Component {
    constructor(props) {
        super(props);
        this._explodedSlices = null;
        this._selectedItems = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._labelClick = null;
        this._labelClick_wrapped = null;
        this._selectedItemChanging = null;
        this._selectedItemChanging_wrapped = null;
        this._selectedItemsChanging = null;
        this._selectedItemsChanging_wrapped = null;
        this._selectedItemChanged = null;
        this._selectedItemChanged_wrapped = null;
        this._selectedItemsChanged = null;
        this._selectedItemsChanged_wrapped = null;
        this._sliceClick = null;
        this._sliceClick_wrapped = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    createImplementation() {
        return null;
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    } /**
                                 * @hidden
                                 */
    static _createFromInternal(internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        let name = internal.$type.name;
        let externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    }
    onImplementationCreated() {
    }
    componentDidMount() {
        for (const p of Object.keys(this.props)) {
            if (isValidProp(this, p)) {
                this[p] = this.props[p];
            }
        }
    }
    shouldComponentUpdate(nextProps, nextState) {
        const mod = getModifiedProps(this.props, nextProps);
        for (const p of Object.keys(mod)) {
            if (isValidProp(this, p)) {
                this[p] = mod[p];
            }
        }
        return true;
    }
    render() {
        return null;
    }
    /**
     * Gets or sets the amount of space between the center and the start of the arc. This property should be set between 0 and 1.
     * If InnerExtent is set to a value greater than 1, it will be interpreted as a percentage, effectively divided by 100.
    */
    get innerExtent() {
        return this.i.cl;
    }
    set innerExtent(v) {
        this.i.cl = +v;
    }
    /**
     * Gets or Sets the property name that contains the values.
    */
    get valueMemberPath() {
        return this.i.eg;
    }
    set valueMemberPath(v) {
        this.i.eg = v;
    }
    /**
     * Gets or sets the property name that contains the labels.
    */
    get labelMemberPath() {
        return this.i.di;
    }
    set labelMemberPath(v) {
        this.i.di = v;
    }
    /**
     * Gets or sets the property name that contains the legend labels.
    */
    get legendLabelMemberPath() {
        return this.i.dv;
    }
    set legendLabelMemberPath(v) {
        this.i.dv = v;
    }
    /**
     * Gets or sets the position of chart labels.
    */
    get labelsPosition() {
        return this.i.ao;
    }
    set labelsPosition(v) {
        this.i.ao = ensureEnum(LabelsPosition_$type, v);
    }
    /**
     * Gets or sets the color for labels rendered outside of the pie chart.
    */
    get labelOuterColor() {
        return brushToString(this.i.gw);
    }
    set labelOuterColor(v) {
        this.i.gw = stringToBrush(v);
    }
    /**
     * Gets or sets the color for labels rendered inside of the pie chart.
    */
    get labelInnerColor() {
        return brushToString(this.i.gv);
    }
    set labelInnerColor(v) {
        this.i.gv = stringToBrush(v);
    }
    /**
     * Gets or sets whether the leader lines are visible.
    */
    get leaderLineVisibility() {
        return this.i.g8;
    }
    set leaderLineVisibility(v) {
        this.i.g8 = ensureEnum(Visibility_$type, v);
    }
    /**
     * Gets or sets what type of leader lines will be used for the outside end labels.
    */
    get leaderLineType() {
        return this.i.ap;
    }
    set leaderLineType(v) {
        this.i.ap = ensureEnum(LeaderLineType_$type, v);
    }
    /**
     * Gets or sets the margin between a label and the end of its leader line. The default is 6 pixels.
    */
    get leaderLineMargin() {
        return this.i.cn;
    }
    set leaderLineMargin(v) {
        this.i.cn = +v;
    }
    /**
     * Gets or sets the ToolTip for the chart.
    */
    get toolTip() {
        return this.i.c0;
    }
    set toolTip(v) {
        this.i.c0 = v;
    }
    /**
     * Gets or sets the threshold value that determines if slices are grouped into the Others slice.
    */
    get othersCategoryThreshold() {
        return this.i.co;
    }
    set othersCategoryThreshold(v) {
        this.i.co = +v;
    }
    /**
     * Gets or sets whether to use numeric or percent-based threshold value.
    */
    get othersCategoryType() {
        return this.i.aq;
    }
    set othersCategoryType(v) {
        this.i.aq = ensureEnum(OthersCategoryType_$type, v);
    }
    /**
     * Gets or sets the label of the Others slice.
    */
    get othersCategoryText() {
        return this.i.dz;
    }
    set othersCategoryText(v) {
        this.i.dz = v;
    }
    /**
     * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
    */
    get explodedRadius() {
        return this.i.cg;
    }
    set explodedRadius(v) {
        this.i.cg = +v;
    }
    /**
     * Gets or sets the scaling factor of the chart's radius. Value between 0 and 1.
    */
    get radiusFactor() {
        return this.i.cr;
    }
    set radiusFactor(v) {
        this.i.cr = +v;
    }
    /**
     * Gets or sets whether the slices can be selected.
    */
    get allowSliceSelection() {
        return this.i.bq;
    }
    set allowSliceSelection(v) {
        this.i.bq = ensureBool(v);
    }
    /**
     * Gets or sets whether the slices can be exploded.
    */
    get allowSliceExplosion() {
        return this.i.bp;
    }
    set allowSliceExplosion(v) {
        this.i.bp = ensureBool(v);
    }
    /**
     * Gets or sets the collection of exploded slice indices.
    */
    get explodedSlices() {
        if (this._explodedSlices === null) {
            let coll = new IndexCollection();
            let innerColl = this.i.explodedSlices;
            if (!innerColl) {
                innerColl = new IndexCollection_internal();
            }
            this._explodedSlices = coll._fromInner(innerColl);
            this.i.explodedSlices = innerColl;
        }
        return this._explodedSlices;
    }
    set explodedSlices(v) {
        if (this._explodedSlices !== null) {
            this._explodedSlices._setSyncTarget(null);
            this._explodedSlices = null;
        }
        let coll = new IndexCollection();
        this._explodedSlices = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Number_$type);
        let innerColl = this.i.explodedSlices;
        if (!innerColl) {
            innerColl = new IndexCollection_internal();
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._explodedSlices._setSyncTarget(syncColl);
        this.i.explodedSlices = innerColl;
    }
    /**
     * Gets or sets the pixel amount by which the labels are offset from the edge of the slices.
    */
    get labelExtent() {
        return this.i.cm;
    }
    set labelExtent(v) {
        this.i.cm = +v;
    }
    /**
     * Gets or sets the starting angle of the chart.
     * The default zero value is equivalent to 3 o'clock.
    */
    get startAngle() {
        return this.i.ct;
    }
    set startAngle(v) {
        this.i.ct = +v;
    }
    /**
     * Gets or sets the rotational direction of the chart.
    */
    get sweepDirection() {
        return this.i.gx;
    }
    set sweepDirection(v) {
        this.i.gx = ensureEnum(SweepDirection_$type, v);
    }
    /**
     * Gets or sets the fill brush.
    */
    get othersCategoryFill() {
        return this.i.g5 ? this.i.g5.fill : null;
    }
    set othersCategoryFill(v) {
        this.ensureOthersCategoryStyle();
        this.i.g5.fill = v;
    }
    /**
     * Gets or sets the stroke brush.
    */
    get othersCategoryStroke() {
        return this.i.g5 ? this.i.g5.stroke : null;
    }
    set othersCategoryStroke(v) {
        this.ensureOthersCategoryStyle();
        this.i.g5.stroke = v;
    }
    /**
     * Gets or sets the stroke thickness.
    */
    get othersCategoryStrokeThickness() {
        return this.i.g5 ? this.i.g5.strokeThickness : NaN;
    }
    set othersCategoryStrokeThickness(v) {
        this.ensureOthersCategoryStyle();
        this.i.g5.strokeThickness = +v;
    }
    /**
     * Gets or sets the opacity.
    */
    get othersCategoryOpacity() {
        return this.i.g5 ? this.i.g5.opacity : NaN;
    }
    set othersCategoryOpacity(v) {
        this.ensureOthersCategoryStyle();
        this.i.g5.opacity = +v;
    }
    ensureOthersCategoryStyle() {
        if (this.i.g5) {
            return;
        }
        this.i.g5 = new Style();
    }
    /**
     * Gets or sets the fill brush.
    */
    get selectedSliceFill() {
        return this.i.g6 ? this.i.g6.fill : null;
    }
    set selectedSliceFill(v) {
        this.ensureSelectedStyle();
        this.i.g6.fill = v;
    }
    /**
     * Gets or sets the stroke brush.
    */
    get selectedSliceStroke() {
        return this.i.g6 ? this.i.g6.stroke : null;
    }
    set selectedSliceStroke(v) {
        this.ensureSelectedStyle();
        this.i.g6.stroke = v;
    }
    /**
     * Gets or sets the stroke thickness.
    */
    get selectedSliceStrokeThickness() {
        return this.i.g6 ? this.i.g6.strokeThickness : NaN;
    }
    set selectedSliceStrokeThickness(v) {
        this.ensureSelectedStyle();
        this.i.g6.strokeThickness = +v;
    }
    /**
     * Gets or sets the opacity.
    */
    get selectedSliceOpacity() {
        return this.i.g6 ? this.i.g6.opacity : NaN;
    }
    set selectedSliceOpacity(v) {
        this.ensureSelectedStyle();
        this.i.g6.opacity = +v;
    }
    ensureSelectedStyle() {
        if (this.i.g6) {
            return;
        }
        this.i.g6 = new Style();
    }
    /**
     * Gets or sets the palette of brushes to use for coloring the slices.
    */
    get brushes() {
        return fromBrushCollection(this.i.ag);
    }
    set brushes(v) {
        this.i.ag = toBrushCollection(v);
    }
    /**
     * Gets or sets the palette of brushes to use for outlines on the slices.
    */
    get outlines() {
        return fromBrushCollection(this.i.ah);
    }
    set outlines(v) {
        this.i.ah = toBrushCollection(v);
    }
    /**
     * Gets or sets the LegendItemTemplate property.
     * The legend item control content is created according to the LegendItemTemplate on-demand by
     * the chart object itself.
    */
    get legendItemTemplate() {
        return this.i.legendItemTemplate;
    }
    set legendItemTemplate(v) {
        this.i.legendItemTemplate = v;
    }
    /**
     * Gets or sets the LegendItemBadgeTemplate property.
     * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
     * the chart object itself.
    */
    get legendItemBadgeTemplate() {
        return this.i.legendItemBadgeTemplate;
    }
    set legendItemBadgeTemplate(v) {
        this.i.legendItemBadgeTemplate = v;
    }
    /**
     * Gets or sets whether all surface interactions with the plot area should be disabled.
    */
    get isSurfaceInteractionDisabled() {
        return this.i.bv;
    }
    set isSurfaceInteractionDisabled(v) {
        this.i.bv = ensureBool(v);
    }
    /**
     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
    */
    get formatLabel() {
        return this.i.at;
    }
    set formatLabel(v) {
        this.i.at = v;
    }
    /**
     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart's legend.
    */
    get formatLegendLabel() {
        return this.i.au;
    }
    set formatLegendLabel(v) {
        this.i.au = v;
    }
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get pixelScalingRatio() {
        return this.i.cq;
    }
    set pixelScalingRatio(v) {
        this.i.cq = +v;
    }
    /**
     * Resolved pixel scaling ratio. Unless explicitly overridden by the PieChartBase.PixelScalingRatio property,
     * this one returns the default ratio enforced by device. High resolution devices will initialize this property
     * to a higher value.
    */
    get actualPixelScalingRatio() {
        return this.i.cd;
    }
    set actualPixelScalingRatio(v) {
        this.i.cd = +v;
    }
    /**
     * Gets or sets which mode to use for selecting slices.
    */
    get selectionMode() {
        return this.i.a3;
    }
    set selectionMode(v) {
        this.i.a3 = ensureEnum(SliceSelectionMode_$type, v);
    }
    /**
     * Gets or sets the currently selected data item.  If a different data item is provided the pie chart
     * will select the slice associated with the new item.
    */
    get selectedItem() {
        return this.i.selectedItem;
    }
    set selectedItem(v) {
        this.i.selectedItem = v;
    }
    /**
     * Gets the currently selected data items.  Adding or removing data items from this collection will
     * select or deselect the slices associated with those items.
    */
    get selectedItems() {
        if (this._selectedItems === null) {
            let coll = new ObjectCollection();
            let innerColl = this.i.selectedItems;
            if (!innerColl) {
                innerColl = new ObjectCollection_internal(0);
            }
            this._selectedItems = coll._fromInner(innerColl);
            this.i.selectedItems = innerColl;
        }
        return this._selectedItems;
    }
    set selectedItems(v) {
        if (this._selectedItems !== null) {
            this._selectedItems._setSyncTarget(null);
            this._selectedItems = null;
        }
        let coll = new ObjectCollection();
        this._selectedItems = coll._fromOuter(v);
        let syncColl = new SyncableObservableCollection$1(Base.$type);
        let innerColl = this.i.selectedItems;
        if (!innerColl) {
            innerColl = new ObjectCollection_internal(0);
        }
        syncColl._inner = innerColl;
        syncColl.clear();
        this._selectedItems._setSyncTarget(syncColl);
        this.i.selectedItems = innerColl;
    }
    /**
     * Manually overrides the style to use for the labels.
    */
    get textStyle() {
        return this.i.eb;
    }
    set textStyle(v) {
        this.i.eb = v;
    }
    get hasUserValues() {
        return this._hasUserValues;
    }
    __m(propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    }
    _styling(container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        let genericPrefix = "";
        let typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("PieChartBase");
        let additionalPrefixes = [];
        let prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        let b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            let basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            let parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            let parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    }
    /**
     * Returns the chart visuals expressed as a serialized string.
    
    */
    exportSerializedVisualData() {
        let iv = this.i.c8();
        return (iv);
    }
    /**
     * Simulates a mouse click action at the specified point.
    
    * @param point  * The point to click at.
    */
    simulateLeftClick(point) {
        this.i.fl(toPoint(point));
    }
    /**
     * Invoked by the containing object to provide reference to the container.
    
    * @param container  * Reference to the container.
    */
    provideContainer(container) {
        this.i.provideContainer(container);
    }
    /**
     * Notification from the containing object that the container has been resized.
    
    */
    notifyContainerResized() {
        this.i.notifyContainerResized();
    }
    /**
     * Invoked when the instance is being destroyed.
    
    */
    destroy() {
        this.i.destroy();
    }
    /**
     * Use to force the pie chart to finish any deferred work before printing or evaluating its visual.
     * This should only be called if the visual of the pie chart needs to be synchronously saved or evaluated.
     * Calling this method too often will hinder the performance of the pie chart.
    
    */
    flush() {
        this.i.el();
    }
    notifySetItem(source_, index, oldItem, newItem) {
        this.i.eu(source_, index, oldItem, newItem);
    }
    /**
     * Manually notifies the pie chart's data source that the data it has bound to has been cleared and needs to be re-examined.
     * This should not be called if the data that the pie chart is bound to is already observable.
    
    * @param source_  * The data source.
    */
    notifyClearItems(source_) {
        this.i.eq(source_);
    }
    notifyInsertItem(source_, index, newItem) {
        this.i.es(source_, index, newItem);
    }
    notifyRemoveItem(source_, index, oldItem) {
        this.i.et(source_, index, oldItem);
    }
    /**
     * Assigns data source for the items.
    
    * @param source_  * Array of the data source items.
    */
    setWidgetLevelDataSource(source_) {
        this.i.fk(source_);
    }
    /**
     * Resets items data source.
    
    */
    removeWidgetLevelDataSource() {
        this.i.fb();
    }
    /**
     * Invoked when style is updated.
    
    */
    styleUpdated() {
        this.i.fp();
    }
    /**
     * Raised when the slice's label is clicked.
    */
    get labelClick() {
        return this._labelClick;
    }
    set labelClick(ev) {
        if (this._labelClick_wrapped !== null) {
            this.i.labelClick = delegateRemove(this.i.labelClick, this._labelClick_wrapped);
            this._labelClick_wrapped = null;
            this._labelClick = null;
        }
        this._labelClick = ev;
        this._labelClick_wrapped = (o, e) => {
            let outerArgs = new LabelClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeLabelClick) {
                this.beforeLabelClick(this, outerArgs);
            }
            if (this._labelClick) {
                this._labelClick(this, outerArgs);
            }
        };
        this.i.labelClick = delegateCombine(this.i.labelClick, this._labelClick_wrapped);
    }
    /**
     * Raised when the SelectedItem property is changing.  This event is cancelable.
    */
    get selectedItemChanging() {
        return this._selectedItemChanging;
    }
    set selectedItemChanging(ev) {
        if (this._selectedItemChanging_wrapped !== null) {
            this.i.selectedItemChanging = delegateRemove(this.i.selectedItemChanging, this._selectedItemChanging_wrapped);
            this._selectedItemChanging_wrapped = null;
            this._selectedItemChanging = null;
        }
        this._selectedItemChanging = ev;
        this._selectedItemChanging_wrapped = (o, e) => {
            let outerArgs = new SelectedItemChangingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectedItemChanging) {
                this.beforeSelectedItemChanging(this, outerArgs);
            }
            if (this._selectedItemChanging) {
                this._selectedItemChanging(this, outerArgs);
            }
        };
        this.i.selectedItemChanging = delegateCombine(this.i.selectedItemChanging, this._selectedItemChanging_wrapped);
    }
    /**
     * Raised when the SelectedItems collection is changing.  This event is cancelable.
    */
    get selectedItemsChanging() {
        return this._selectedItemsChanging;
    }
    set selectedItemsChanging(ev) {
        if (this._selectedItemsChanging_wrapped !== null) {
            this.i.selectedItemsChanging = delegateRemove(this.i.selectedItemsChanging, this._selectedItemsChanging_wrapped);
            this._selectedItemsChanging_wrapped = null;
            this._selectedItemsChanging = null;
        }
        this._selectedItemsChanging = ev;
        this._selectedItemsChanging_wrapped = (o, e) => {
            let outerArgs = new SelectedItemsChangingEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectedItemsChanging) {
                this.beforeSelectedItemsChanging(this, outerArgs);
            }
            if (this._selectedItemsChanging) {
                this._selectedItemsChanging(this, outerArgs);
            }
        };
        this.i.selectedItemsChanging = delegateCombine(this.i.selectedItemsChanging, this._selectedItemsChanging_wrapped);
    }
    /**
     * Raised when the SelectedItem property has changed.
    */
    get selectedItemChanged() {
        return this._selectedItemChanged;
    }
    set selectedItemChanged(ev) {
        if (this._selectedItemChanged_wrapped !== null) {
            this.i.selectedItemChanged = delegateRemove(this.i.selectedItemChanged, this._selectedItemChanged_wrapped);
            this._selectedItemChanged_wrapped = null;
            this._selectedItemChanged = null;
        }
        this._selectedItemChanged = ev;
        this._selectedItemChanged_wrapped = (o, e) => {
            let outerArgs = new SelectedItemChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectedItemChanged) {
                this.beforeSelectedItemChanged(this, outerArgs);
            }
            if (this._selectedItemChanged) {
                this._selectedItemChanged(this, outerArgs);
            }
        };
        this.i.selectedItemChanged = delegateCombine(this.i.selectedItemChanged, this._selectedItemChanged_wrapped);
    }
    /**
     * Raised when the SelectedItems collection has changed.
    */
    get selectedItemsChanged() {
        return this._selectedItemsChanged;
    }
    set selectedItemsChanged(ev) {
        if (this._selectedItemsChanged_wrapped !== null) {
            this.i.selectedItemsChanged = delegateRemove(this.i.selectedItemsChanged, this._selectedItemsChanged_wrapped);
            this._selectedItemsChanged_wrapped = null;
            this._selectedItemsChanged = null;
        }
        this._selectedItemsChanged = ev;
        this._selectedItemsChanged_wrapped = (o, e) => {
            let outerArgs = new SelectedItemsChangedEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSelectedItemsChanged) {
                this.beforeSelectedItemsChanged(this, outerArgs);
            }
            if (this._selectedItemsChanged) {
                this._selectedItemsChanged(this, outerArgs);
            }
        };
        this.i.selectedItemsChanged = delegateCombine(this.i.selectedItemsChanged, this._selectedItemsChanged_wrapped);
    }
    /**
     * Raised when the slice is clicked.
    */
    get sliceClick() {
        return this._sliceClick;
    }
    set sliceClick(ev) {
        if (this._sliceClick_wrapped !== null) {
            this.i.sliceClick = delegateRemove(this.i.sliceClick, this._sliceClick_wrapped);
            this._sliceClick_wrapped = null;
            this._sliceClick = null;
        }
        this._sliceClick = ev;
        this._sliceClick_wrapped = (o, e) => {
            let outerArgs = new SliceClickEventArgs();
            outerArgs._provideImplementation(e);
            if (this.beforeSliceClick) {
                this.beforeSliceClick(this, outerArgs);
            }
            if (this._sliceClick) {
                this._sliceClick(this, outerArgs);
            }
        };
        this.i.sliceClick = delegateCombine(this.i.sliceClick, this._sliceClick_wrapped);
    }
}
