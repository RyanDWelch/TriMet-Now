/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { Brush } from "igniteui-react-core/ES2015/Brush";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { Type, runOn, markType, fromEnum } from "igniteui-react-core/ES2015/type";
import { Rect } from "igniteui-react-core/ES2015/Rect";
import { Pool$1 } from "igniteui-react-core/ES2015/Pool$1";
import { Rectangle } from "igniteui-react-core/ES2015/Rectangle";
import { ArrayExtension } from "igniteui-react-core/ES2015/ArrayExtension";
import { List$1 } from "igniteui-react-core/ES2015/List$1";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
import { isNaN_ } from "igniteui-react-core/ES2015/number";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
/**
 * @hidden
 */
export class WaterfallSeries extends HorizontalAnchoredCategorySeries {
    constructor() {
        super();
        this.ab = WaterfallSeries.$;
    }
    bf() {
        return new WaterfallSeriesView(this);
    }
    it(a) {
        super.it(a);
        this.qg = a;
    }
    preferredCategoryMode(a) {
        return 2;
    }
    get_cz() {
        return true;
    }
    jh(a, b) {
        super.jh(a, b);
        this.qr = a;
        this.qs = b;
    }
    k8() {
        return this.qr;
    }
    get_nu() {
        return true;
    }
    iy(a, b, c, d) {
        super.iy(a, b, c, d);
        switch (b) {
            case WaterfallSeries.$$p[3]:
            case WaterfallSeries.$$p[2]:
            case WaterfallSeries.$$p[0]:
            case WaterfallSeries.$$p[1]:
                this.jc(false);
                break;
        }
    }
    dh(a, b) {
        if (this.dk(a, b)) {
            return true;
        }
        if (this.l3(a, b)) {
            return true;
        }
        return false;
    }
    lt(a) {
        if (this.qg == null || this.qg.c7 == null || this.qg.c7.count == 0 || this.xAxis == null) {
            return Rect.empty;
        }
        let b = this.qg.c7;
        let c = this.lf(a);
        let d = -1;
        let e = this.xAxis.b8;
        let f = this.lx.right * 2;
        if (e) {
            d = ArrayExtension.binarySearch$1(Rectangle.$, b, (g) => {
                let h = this.qg.de(g);
                return (f - c.x) < (f - (h.left + h.width / 2)) ? -1 : ((f - c.x) > (f - (h.left + h.width / 2)) ? 1 : 0);
            });
        }
        else {
            d = ArrayExtension.binarySearch$1(Rectangle.$, b, (g) => {
                let h = this.qg.de(g);
                return c.x < (h.left + h.width / 2) ? -1 : (c.x > (h.left + h.width / 2) ? 1 : 0);
            });
        }
        if (d < 0) {
            d = ~d;
            d--;
        }
        if (d < 0) {
            d = 0;
        }
        if (d > b.count - 1) {
            d = b.count - 1;
        }
        let g = d;
        let h = d;
        if (g < 0) {
            g--;
        }
        if (h < b.count - 1) {
            h++;
        }
        let i = this.qt(g);
        let j = this.qt(d);
        let k = this.qt(h);
        let l = i.left + i.width / 2;
        let m = j.left + j.width / 2;
        let n = k.left + k.width / 2;
        let o = Math.abs(l - c.x);
        let p = Math.abs(m - c.x);
        let q = Math.abs(n - c.x);
        let r = i.containsPoint(c);
        let s = j.containsPoint(c);
        let t = k.containsPoint(c);
        if (p <= o && p <= q) {
            if (!e && t) {
                return k;
            }
            if (e && r) {
                return i;
            }
            return j;
        }
        if (o <= p && o <= q) {
            if (!e && s) {
                return j;
            }
            return i;
        }
        if (q <= p && q <= o) {
            if (e && s) {
                return j;
            }
            return k;
        }
        return Rect.empty;
    }
    qt(a) {
        return this.qg.dd(a);
    }
    nf() {
        return 1;
    }
    hv(a, b) {
        super.hv(a, b);
        this.qg.c7.count = 0;
    }
    eg() {
        return this.px.jq(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
    }
    on(a, b) {
        let c = b;
        super.on(a, b);
        let d = b.bs;
        let e = b.br;
        let f = this.getEffectiveViewport1(b);
        let g = this.px.jq(d, e, f);
        let h = this.qh;
        let i = this.qi;
        let j;
        let k = this.o6(b);
        let l = NaN;
        let m = c.c7;
        let n;
        let o = 0;
        this.nd.x(this, this.ny(), this.px, runOn(this, this.mz), this.n6(b), this.n7(b));
        this.nd.p = this.qh;
        this.nd.q = this.qi;
        this.nd.j = this.qh;
        this.nd.k = this.qi;
        let p = false;
        let q = this.nd.c;
        if (q != null) {
            p = true;
        }
        let r = this.px.cc;
        let s = this.valueColumn.count;
        let t = a.f;
        let u = this.px;
        let v = new ScalerParams(0, d, e, this.px.b8, f);
        let w = this.k2;
        let x = this.qr;
        let y = this.k3;
        let z = this.qs || y;
        if (a.f.count > 0) {
            j = a.f._inner[0][0] - 0.5 * g;
            let aa = a.f._inner[0][1];
            if (!isNaN_(aa)) {
                if (aa > k) {
                    n = m.item(o);
                    o++;
                    c.dc(n, j, k);
                    n.width = g;
                    n.height = Math.abs(k - aa);
                    this.nd.al = x;
                    this.nd.ah = x;
                    this.nd.am = z;
                    this.nd.ai = z;
                    this.nd.f = true;
                    if (p) {
                        this.oj(t, 0, s, u, v, b.n);
                    }
                    this.nd.ae(n, false, false, false, false);
                    n.al = this.nd.j;
                    n.am = this.nd.k;
                }
                else {
                    n = m.item(o);
                    o++;
                    c.dc(n, j, aa);
                    n.width = g;
                    n.height = Math.abs(aa - k);
                    this.nd.al = w;
                    this.nd.ah = w;
                    this.nd.am = y;
                    this.nd.ai = y;
                    this.nd.f = false;
                    if (p) {
                        this.oj(t, 0, s, u, v, b.n);
                    }
                    this.nd.ae(n, false, false, false, false);
                    n.al = this.nd.j;
                    n.am = this.nd.k;
                }
                l = aa;
            }
            else {
                l = k;
            }
        }
        for (let ab = 1; ab < a.f.count; ++ab) {
            let ac = a.f._inner[ab];
            j = a.f._inner[ab][0] - 0.5 * g;
            let ad = ac[1];
            if (!isNaN_(ad)) {
                n = m.item(o);
                o++;
                c.dc(n, j, Math.min(l, ad));
                n.width = g;
                n.height = Math.abs(l - ad);
                this.nd.al = w;
                this.nd.ah = w;
                this.nd.am = y;
                this.nd.ai = y;
                this.nd.f = false;
                if (l > ad) {
                    if (p) {
                        this.oj(t, ab, s, u, v, b.n);
                    }
                }
                else {
                    this.nd.al = x;
                    this.nd.ah = x;
                    this.nd.am = z;
                    this.nd.ai = z;
                    this.nd.f = true;
                    if (p) {
                        this.oj(t, ab, s, u, v, b.n);
                    }
                }
                this.nd.ae(n, false, false, false, false);
                n.al = this.nd.j;
                n.am = this.nd.k;
                l = ad;
            }
        }
        m.count = o;
        b.cu(a);
    }
    get useHighMarkerFidelity() {
        return this.n1;
    }
}
WaterfallSeries.$t = markType(WaterfallSeries, 'WaterfallSeries', HorizontalAnchoredCategorySeries.$);
Type.dep(DependencyProperty, PropertyMetadata, WaterfallSeries, 'raisePropertyChanged', ['NegativeBrush:qr:qn', [Brush.$, null], 'NegativeOutline:qs:qo', [Brush.$, null], 'RadiusX:qh:qp', [1, 2], 'RadiusY:qi:qq', [1, 2]]);
/**
 * @hidden
 */
export class WaterfallSeriesView extends AnchoredCategorySeriesView {
    constructor(a) {
        super(a);
        this.c6 = null;
        this.c8 = null;
        this.df = new Rectangle();
        this.c7 = null;
        this.c6 = a;
        this.c7 = ((() => {
            let $ret = new Pool$1(Rectangle.$);
            $ret.create = runOn(this, this.dg);
            $ret.activate = runOn(this, this.c9);
            $ret.disactivate = runOn(this, this.db);
            $ret.destroy = runOn(this, this.da);
            return $ret;
        })());
    }
    ap() {
        super.ap();
        this.c8 = new List$1(Rectangle.$, 0);
        if (!this.n) {
            this.e.eu = 4;
            this.c6.qr = ((() => {
                let $ret = new Brush();
                $ret.fill = "#C62828";
                return $ret;
            })());
            this.c6.qs = ((() => {
                let $ret = new Brush();
                $ret.fill = "#C62828";
                return $ret;
            })());
            this.e.bj = 5;
        }
    }
    dg() {
        let a = new Rectangle();
        this.c8.add(a);
        a._visibility = 1;
        return a;
    }
    c9(a) {
        a._visibility = 0;
    }
    db(a) {
        a._visibility = 1;
    }
    da(a) {
        this.c8.remove(a);
    }
    dc(a, b, c) {
        let d = false;
        if (a.o != c) {
            d = true;
            a.o = c;
        }
        if (a.n != b) {
            d = true;
            a.n = b;
        }
        if (d) {
            this.an();
        }
    }
    z(a) {
        return this.c8._inner[a];
    }
    y(a) {
        let b = this.c8._inner[a];
        this.df._visibility = b._visibility;
        this.df.n = b.n;
        this.df.o = b.o;
        this.df.width = b.width;
        this.df.height = b.height;
        let c = this.bm(a);
        this.df._fill = c;
        this.df._stroke = c;
        this.df.ac = this.e.ey + 3;
        return this.df;
    }
    a3(a, b) {
        super.a3(a, b);
        if (a.d) {
            for (let c = 0; c < this.c8.count; c++) {
                let d = this.x(c, b);
                this.ba(d, c, b);
                a.v(d);
            }
        }
    }
    ai(a) {
        super.ai(a);
        let b = 0;
        let c = new List$1(Rectangle.$, 0);
        for (let d of fromEnum(this.c7.a)) {
            c.add(d);
        }
        c.aa((e, f) => {
            if (e.n < f.n) {
                return -1;
            }
            else if (e.n > f.n) {
                return 1;
            }
            else {
                return 0;
            }
        });
        for (let e of fromEnum(c)) {
            let f = "Negative";
            if (e._fill == this.e.k2) {
                f = "Positive";
            }
            this.e.a2.exportRectangleData(a, e, "column" + b, ["Main", f]);
        }
        b++;
    }
    dd(a) {
        let b = this.c7.item(a);
        return new Rect(0, b.n, b.o, b.width, b.height);
    }
    de(a) {
        return new Rect(0, a.n, a.o, a.width, a.height);
    }
}
WaterfallSeriesView.$t = markType(WaterfallSeriesView, 'WaterfallSeriesView', AnchoredCategorySeriesView.$);
