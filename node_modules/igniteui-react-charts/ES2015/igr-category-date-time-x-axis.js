import { TimeAxisDisplayType_$type } from "./TimeAxisDisplayType";
import { IgrTimeAxisBase } from "./igr-time-axis-base";
import { CategoryDateTimeXAxis } from "./CategoryDateTimeXAxis";
import { ensureEnum } from "igniteui-react-core/ES2015/componentUtil";
/**
 * Represents a category-based horizontal X axis that uses a DateTime scale.
*
* `IgrCategoryDateTimeXAxis` class represents a category-based horizontal X axis that uses a DateTime scale.
*
* ```ts
*   <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*     <IgrTimeXAxis name="xAxis" label="Date"
* 			dateTimeMemberPath="Date" />
*  </IgrDataChart>
* ```
*/
export class IgrCategoryDateTimeXAxis extends IgrTimeAxisBase {
    createImplementation() {
        return new CategoryDateTimeXAxis();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets if the current axis is a continuous rather than a discrete scale
    */
    get isContinuous() {
        return this.i.b4;
    }
    /**
     * Gets or sets the axis display type.
     * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points.
     * Discrete display type will not use a constant interval, but will align each label with its data point.
    *
    * `displayType` property is used for axis display type.
    *
    * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points. Discrete display type will not use a constant interval, but will align each label with its data point.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date"
    * 			displayType ="continuous" />
    *  </IgrDataChart>
    * ```
    */
    get displayType() {
        return this.i.l3;
    }
    set displayType(v) {
        this.i.l3 = ensureEnum(TimeAxisDisplayType_$type, v);
    }
    /**
     * Gets or sets the X axis time interval.
    *
    * `interval` property is used to get/sets the frequency of displayed labels.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    * 		width="700px"
    * 		height="500px">
    *     <IgrTimeXAxis name="xAxis"
    * 		label="Date"
    * 		interval=2
    * 		dateTimeMemberPath="Date" />
    *  </IgrDataChart>
    * ```
    */
    get interval() {
        return this.i.md;
    }
    set interval(v) {
        this.i.md = +v;
    }
    /**
     * Gets the effective value for the current Interval.
    */
    get actualInterval() {
        return this.i.ma;
    }
    set actualInterval(v) {
        this.i.ma = +v;
    }
    /**
     * Gets or sets the frequency of displayed minor lines.
     * The set value is a factor that determines how the minor lines will be displayed.
    */
    get minorInterval() {
        return this.i.me;
    }
    set minorInterval(v) {
        this.i.me = +v;
    }
    /**
     * Gets the effective value for the current MinorInterval.
    */
    get actualMinorInterval() {
        return this.i.mb;
    }
    set actualMinorInterval(v) {
        this.i.mb = +v;
    }
    /**
     * Gets if the current axis is of category date time axis type
    */
    get isCategoryDateTime() {
        return this.i.b3;
    }
    scrollIntoView(minimum, maximum) {
        this.i.mk(minimum, maximum);
    }
}
