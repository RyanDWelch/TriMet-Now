/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { StyleSelector } from "./StyleSelector";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { Style } from "igniteui-react-core/ES2015/Style";
import { Type, markType, typeCast } from "igniteui-react-core/ES2015/type";
import { ShapeSeriesViewBase } from "./ShapeSeriesViewBase";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
import { Path } from "igniteui-react-core/ES2015/Path";
import { stringIsNullOrEmpty } from "igniteui-react-core/ES2015/string";
/**
 * @hidden
 */
export class ScatterPolylineSeries extends ShapeSeriesBase {
    constructor() {
        super();
        this.ab = ScatterPolylineSeries.$;
    }
    bf() {
        return new ScatterPolylineSeriesView(this);
    }
    it(a) {
        super.it(a);
        this.m9 = a;
    }
    get_me() {
        return false;
    }
    iy(a, b, c, d) {
        super.iy(a, b, c, d);
        switch (b) {
            case ScatterPolylineSeries.$$p[0]:
                this.m9.cn(this.nf);
                this.jc(false);
                this.ij();
                break;
            case ScatterPolylineSeries.$$p[1]:
                this.m9.co(this.na);
                this.jc(false);
                this.ij();
                break;
        }
    }
    my(a) {
        let b = a;
        b.cn(this.nf);
        b.co(this.na);
        super.my(a);
    }
    ar(a, b) {
        let c = this.m9.cs(a, b, true);
        if (c != null) {
            return c.dataContext;
        }
        return super.ar(a, b);
    }
}
ScatterPolylineSeries.$t = markType(ScatterPolylineSeries, 'ScatterPolylineSeries', ShapeSeriesBase.$);
Type.dep(DependencyProperty, PropertyMetadata, ScatterPolylineSeries, 'raisePropertyChanged', ['ShapeStyle:nf:nd', [Style.$, null], 'ShapeStyleSelector:na:ne', [StyleSelector.$, null]]);
/**
 * @hidden
 */
export class ScatterPolylineSeriesView extends ShapeSeriesViewBase {
    constructor(a) {
        super(a);
    }
    cu(a, b) {
        return this.cv(a, b, false);
    }
    cc(a, b) {
        super.cc(a, b);
        ShapeSeriesViewBase.cb(this, a, b);
    }
    ca(a, b) {
        let c = typeCast(Path.$, a);
        if (c == null) {
            return;
        }
        c.aj = b;
    }
    bb(a, b) {
        super.bb(a, b);
        let c = a;
        c._fill = null;
    }
    bc(a, b) {
        super.bc(a, b);
        let c = a;
        c._fill = null;
    }
    b2(a) {
        return a.width >= this.by.mn || a.height >= this.by.mn;
    }
    getDefaultTooltipTemplate() {
        let a = "<div class='ui-chart-default-tooltip-content'><span";
        let b = this.e.a0.a$q(this.e);
        if (!stringIsNullOrEmpty(b)) {
            a += " style='color:" + b + "'";
        }
        a += ">" + this.by.fx + "</span><br/>";
        a += "</div>";
        return a;
    }
}
ScatterPolylineSeriesView.$t = markType(ScatterPolylineSeriesView, 'ScatterPolylineSeriesView', ShapeSeriesViewBase.$);
