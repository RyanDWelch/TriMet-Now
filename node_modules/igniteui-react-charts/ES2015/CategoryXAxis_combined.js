/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { List$1 } from "igniteui-react-core/ES2015/List$1";
import { Base, Number_$type, typeCast, Array_$type, markType, TypeRegistrar } from "igniteui-react-core/ES2015/type";
import { HorizontalAxisLabelPanel } from "./HorizontalAxisLabelPanel";
import { Rect } from "igniteui-react-core/ES2015/Rect";
import { MathUtil } from "igniteui-react-core/ES2015/MathUtil";
import { ScalerParams } from "./ScalerParams";
import { NumericScaler } from "./NumericScaler";
import { LinearCategorySnapper } from "./LinearCategorySnapper";
import { NumericYAxis } from "./NumericYAxis";
import { LabelPosition } from "./LabelPosition";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core/ES2015/number";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
/**
 * @hidden
 */
export class CategoryXAxis extends CategoryAxisBase {
    constructor() {
        super();
        this.k8 = 1;
        this.k7 = 1;
        this.ky = 0;
        this.kz = 0;
        this.jl = new List$1(Number_$type, 0);
        this.ab = CategoryXAxis.$;
    }
    a1() {
        return new CategoryXAxisView(this);
    }
    gr(a) {
        super.gr(a);
        this.kw = a;
    }
    get la() {
        return this.k8;
    }
    set la(a) {
        this.k8 = a;
    }
    get k9() {
        return this.k7;
    }
    set k9(a) {
        this.k7 = a;
    }
    as() {
        if (this.co) {
            return (TypeRegistrar.create('HorizontalSmartAxisLabelPanel'));
        }
        else {
            return new HorizontalAxisLabelPanel();
        }
    }
    getCategorySize(a, b, c) {
        let d = this.iy(b, c);
        return d.width / (this.jx * a.width);
    }
    jq(a, b, c) {
        let d = !isNaN_(this.jn) ? MathUtil.b(this.jn, 0, 1) : 0;
        let e = 0;
        if (!isNaN_(this.ju)) {
            e = Math.min(this.ju, 1);
        }
        else {
            e = 0;
        }
        ;
        let f = 1 - 0.5 * d;
        let g = this.j0 == 0 ? 1 : this.j0;
        let h = this.getCategorySize(a, b, c) * f / (g - (g - 1) * e);
        return h;
    }
    getGroupCenter(a, b, c, d) {
        let e = 0.5;
        if (this.j0 > 1) {
            let f = !isNaN_(this.jn) ? MathUtil.b(this.jn, 0, 1) : 0;
            let g = 0;
            if (!isNaN_(this.ju)) {
                g = Math.min(this.ju, 1);
            }
            let h = 1 - 0.5 * f;
            let i = h / (this.j0 - (this.j0 - 1) * g);
            let j = (h - i) / (this.j0 - 1);
            e = 0.25 * f + 0.5 * i + a * j;
        }
        return this.getCategorySize(b, c, d) * e;
    }
    di() {
        return this.k5;
    }
    lf(a) {
        let b = this.bf != null ? this.bf.mq : Rect.empty;
        b = b.copy();
        let c = this.i0;
        let d = this.ix();
        let e = new Rect(0, 0, 0, 1, 1);
        let f = new ScalerParams(0, e, e, this.b8, d);
        let g = !b.isEmpty && !c.isEmpty && this.je != null ? this.je.indexOf(a) : -1;
        let h = g > -1 ? this.dv(g, f) : NaN;
        if (!isNaN_(h) && this.bf.c0) {
            if (!isNaN_(h)) {
                if (h < b.left + 0.1 * b.width) {
                    h = h + 0.4 * b.width;
                    b.x = h - 0.5 * b.width;
                }
                if (h > b.right - 0.1 * b.width) {
                    h = h - 0.4 * b.width;
                    b.x = h - 0.5 * b.width;
                }
            }
            this.bf.km(b, false, true);
        }
    }
    dv(a, b) {
        if (!b.c.isEmpty) {
            let c = this.k4(a, NumericScaler.ac, b.c, this.categoryMode);
            c = (c - b.d.left) / b.d.width;
            c = b.d.left + b.d.width * (c - b.e.left) / b.e.width;
            return c;
        }
        return this.k4(a, b.e, b.d, this.categoryMode);
    }
    kv(a) {
        if (typeCast(List$1.$.specialize(Array_$type), a) !== null) {
            return a.asArray();
        }
        return null;
    }
    gl(a, b, c, d, e) {
        let f;
        let g = e.e;
        let h = e.d;
        let i = e.c;
        let j = e.a;
        let k = !i.isEmpty;
        let l = this.categoryMode == 0 ? this.jx - 1 : this.jx;
        if (l < 0) {
            l = 0;
        }
        let m = i.left;
        let n = i.width;
        let o = g.left;
        let p = g.width;
        let q = h.left;
        let r = h.width;
        let s = 0;
        let t = 1;
        let u = this.kv(a);
        let v = false;
        if (u != null) {
            v = true;
        }
        let w;
        for (let x = 0; x < b.count; x++) {
            w = b.item(x);
            for (let y = c; y < d; y++) {
                if (v) {
                    f = u[y];
                }
                else {
                    f = a.item(y);
                }
                if (k) {
                    let z = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                    if (j) {
                        z = 1 - z;
                    }
                    z = m + n * (z - s) / t;
                    let aa = (z - (o * r)) / p;
                    f[w] = aa;
                }
                else {
                    let ab = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                    if (j) {
                        ab = 1 - ab;
                    }
                    ab = q + r * (ab - o) / p;
                    f[w] = ab;
                }
            }
        }
    }
    dw(a, b, c) {
        if (!b.c.isEmpty) {
            let d = this.k4(a, NumericScaler.ac, b.c, c);
            d = (d - b.d.left) / b.d.width;
            d = b.d.left + b.d.width * (d - b.e.left) / b.e.width;
            return d;
        }
        return this.k4(a, b.e, b.d, c);
    }
    k4(a, b, c, d) {
        let e = d == 0 ? this.jx - 1 : this.jx;
        if (e < 0) {
            e = 0;
        }
        let f = e >= 1 ? (a) / (e) : e == 0 ? 0.5 : NaN;
        if (this.b9) {
            f = 1 - f;
        }
        return c.left + c.width * (f - b.left) / b.width;
    }
    dy(a, b) {
        if (!b.c.isEmpty) {
            let c = b.e.left + b.e.width * (a - b.d.left) / b.d.width;
            c = (c * b.d.width) + b.d.left;
            c = this.getUnscaledValue3(c, NumericScaler.ac, b.c, this.categoryMode);
            return c;
        }
        return this.getUnscaledValue3(a, b.e, b.d, this.categoryMode);
    }
    dz(a, b, c) {
        if (!b.c.isEmpty) {
            let d = b.e.left + b.e.width * (a - b.d.left) / b.d.width;
            d = (d * b.d.width) + b.d.left;
            d = this.getUnscaledValue3(d, NumericScaler.ac, b.c, c);
            return d;
        }
        return this.getUnscaledValue3(a, b.e, b.d, c);
    }
    getUnscaledValue3(a, b, c, d) {
        let e = b.left + (a - c.left) * b.width / c.width;
        if (this.b9) {
            e = 1 - e;
        }
        let f = d == 0 ? this.jx - 1 : this.jx;
        if (f < 0) {
            f = 0;
        }
        return e * f;
    }
    lg(a, b) {
        if (a == NaN || b == NaN || this.je == null || this.je.count == 0) {
            return;
        }
        let c = a / this.je.count;
        let d = (b + 1) / this.je.count;
        this.bf.m4 = new Rect(0, c, this.bf.m4.y, d - c, this.bf.m4.height);
    }
    g6(a) {
        super.g6(a);
        let b = this.bf != null ? this.bf.mq : Rect.empty;
        let c = this.i0;
        let d = this.iv();
        let e = this.iu();
        let f = new ScalerParams(0, b, c, this.b8, d);
        let g = this.a2.ay();
        let h = this.a2.a1();
        let i = this.a2.az();
        let j = this.a2.a0();
        let k = this.a2.e();
        let l = this.a2.f();
        let m = this.a2.g();
        let n = this.je;
        let o = this.kx();
        this.hd();
        this.gh(g);
        this.gh(h);
        this.gh(i);
        this.gh(j);
        this.cu.clear();
        this.cv.clear();
        this.jl.clear();
        this.a2.at(this, b, c);
        if (b.isEmpty || c.isEmpty) {
            this.bo.count = 0;
            this.bn.count = 0;
            this.bm.count = 0;
        }
        if (this.bo.count == 0 && this.bn.count == 0) {
            this.a2.y();
        }
        if (this.aw != null) {
            this.aw.registerAxis(this);
        }
        if (this.itemsSource == null || o == null || n.count == 0) {
            this.bo.count = 0;
            this.bn.count = 0;
            this.bm.count = 0;
            this.a2.y();
            return;
        }
        if (!b.isEmpty && !c.isEmpty) {
            let p = this.dy(e.left, f);
            let q = this.dy(e.right, f);
            if (this.b8) {
                p = Math.ceil(p);
                q = Math.floor(q);
            }
            else {
                p = Math.floor(p);
                q = Math.ceil(q);
            }
            let r = c.bottom;
            let s = r - c.top;
            if (this.ag != null) {
                let t = typeCast(NumericYAxis.$, this.ag);
                if (t != null) {
                    let u = this.g9(r, s, b, c, d, c.top, c.bottom);
                    r = u.p0;
                    s = u.p1;
                }
            }
            this.gp(g, r, c, k, true);
            this.a2.ao(s);
            let v = Math.min(p, q);
            let w = Math.max(p, q);
            let x = new LinearCategorySnapper(1, v, w, e.width, this.k5, this.categoryMode, this.d8());
            let y = Math.floor((v - 0) / x.g);
            let z = Math.ceil((w - 0) / x.g);
            this.k0 = x.g;
            if (!isNaN_(y) && !isNaN_(z)) {
                let aa = truncate(y);
                let ab = truncate(z);
                let ac = this.k3(0 + aa * x.g, f);
                let ad = this.dv(x.g, f);
                let ae = Math.abs(ad - this.dv(0, f));
                this.a2.ap(ad);
                let af = truncate(Math.ceil(e.right));
                let ag = truncate(Math.floor(e.left));
                let ah = this.k6;
                let ai = ah > 0 && ah < x.g;
                let aj = c.right;
                let ak = this.jl;
                let al = x.g;
                let am = truncate(al);
                let an = this.j0;
                let ao = this.b8;
                let ap = this.categoryMode;
                for (let aq = aa; aq <= ab; ++aq) {
                    let ar = this.k3(0 + (aq + 1) * x.g, f);
                    if (ac <= aj) {
                        if (aq % 2 == 0) {
                            this.hf(h, ac, ar, c);
                        }
                        this.he(i, ac, c, l, false);
                        ak.add(ac);
                    }
                    if (this.categoryMode != 0 && this.j0 != 0 && this.ci) {
                        if (ai) {
                            let as = ae * this.k6;
                            if (this.b8) {
                                let at = ac;
                                while (at - as > ar) {
                                    at -= as;
                                    if (Math.abs(at - ar) < 0.0001) {
                                        break;
                                    }
                                    this.he(j, at, c, m, false);
                                }
                            }
                            else {
                                let au = ac;
                                while (au + as < ar) {
                                    au += as;
                                    if (Math.abs(au - ar) < 0.0001) {
                                        break;
                                    }
                                    this.he(j, au, c, m, false);
                                }
                            }
                            this.k1 = this.k6;
                        }
                        else {
                            for (let av = 0; av < truncate(x.g); av++) {
                                for (let aw = 0; aw < this.j0; aw++) {
                                    let ax = this.getGroupCenter(aw, b, c, d);
                                    if (this.b8) {
                                        ax = -ax;
                                    }
                                    let ay = this.dv(av + aq * x.g, f) + ax;
                                    this.he(j, ay, c, m, false);
                                }
                            }
                            this.k1 = 0.5;
                        }
                    }
                    let az = this.k2(aq * al, ac, ap == 0, f);
                    let a0 = truncate(Math.round(az));
                    if (a0 >= ag && a0 <= af) {
                        let a1 = 0;
                        if (al >= 1) {
                            a1 = aq * truncate(Math.floor(al));
                        }
                        else {
                            if ((aq * al) * 2 % 2 == 0) {
                                a1 = truncate(Math.floor(aq * al));
                            }
                            else {
                                a1 = -1;
                            }
                        }
                        if (o != null && a1 < n.count && a1 >= 0) {
                            let a2 = o.getItem(a1);
                            let a3 = this.e5(a2);
                            if (!isNaN_(az) && !isInfinity(az) && a3 != null) {
                                if ((typeof a3 === 'string') && Base.equalsStatic(a3, "")) {
                                }
                                else {
                                    this.cu.add1(a3);
                                    this.cv.add(new LabelPosition(az));
                                }
                            }
                        }
                    }
                    ac = ar;
                }
            }
            if ((this.aw == null || this.aw.visibility == 0) && this.ag != null) {
                if (this.aw != null && (this.aw.location == 4 || this.aw.location == 5)) {
                    this.bf.ht();
                }
            }
            this.a2.au(this.cu, this.cv);
            this.kl();
        }
    }
    cm() {
        if (this.cf && this.cn) {
            this.a9 = this.a8();
        }
        if (this.je == null) {
            return false;
        }
        let a = this.je.count;
        if (a != this.k9) {
            let b = new AxisRangeChangedEventArgs(0, 1, 1, this.k9, a);
            this.k9 = a;
            this.g0(b);
            return true;
        }
        return false;
    }
    get k5() {
        return this.c(CategoryXAxis.lh);
    }
    set k5(a) {
        this.h(CategoryXAxis.lh, a);
    }
    get k0() {
        return this.ky;
    }
    set k0(a) {
        if (this.k0 != a) {
            let b = this.ky;
            this.ky = a;
            this.gz("ActualInterval", b, this.k0);
        }
    }
    d6() {
        return this.k0;
    }
    get k6() {
        return this.c(CategoryXAxis.li);
    }
    set k6(a) {
        this.h(CategoryXAxis.li, a);
    }
    get k1() {
        return this.kz;
    }
    set k1(a) {
        if (this.k1 != a) {
            let b = this.kz;
            this.kz = a;
            this.gz("ActualMinorInterval", b, this.k1);
        }
    }
    jh(a) {
        if (a == null) {
            return false;
        }
        let b = this.bb();
        if (b == null) {
            return false;
        }
        return b.synchronizeHorizontally;
    }
    get_az() {
        return 0;
    }
    get az() {
        return this.get_az();
    }
    kx() {
        return this.je;
    }
    k3(a, b) {
        return this.dv(a, b);
    }
    k2(a, b, c, d) {
        if (!c) {
            let e = this.k3(a + 1, d);
            return (b + e) / 2;
        }
        return b;
    }
    get isVertical() {
        return this.ce;
    }
    j$c(a, b) {
        return this.dy.apply(this, arguments);
    }
    j$b(a, b) {
        return this.dv.apply(this, arguments);
    }
    j$d(a, b, c, d, e) {
        this.gl.apply(this, arguments);
    }
    j$e(a, b, c, d) {
        this.gm.apply(this, arguments);
    }
    j$f(a, b, c, d) {
        this.gn.apply(this, arguments);
    }
    get j$a() {
        return this.b8;
    }
}
CategoryXAxis.$t = markType(CategoryXAxis, 'CategoryXAxis', CategoryAxisBase.$);
CategoryXAxis.lh = DependencyProperty.i("Interval", Number_$type, CategoryXAxis.$, new PropertyMetadata(2, NaN, (a, b) => {
    a.gz("Interval", b.oldValue, b.newValue);
    a.g5(false);
}));
CategoryXAxis.li = DependencyProperty.i("MinorInterval", Number_$type, CategoryXAxis.$, new PropertyMetadata(2, NaN, (a, b) => {
    (typeCast(CategoryXAxis.$, a)).gz("MinorInterval", b.oldValue, b.newValue);
    (typeCast(CategoryXAxis.$, a)).g5(false);
}));
/**
 * @hidden
 */
export class CategoryXAxisView extends CategoryAxisBaseView {
    constructor(a) {
        super(a);
        this.bg = null;
        this.bg = a;
    }
}
CategoryXAxisView.$t = markType(CategoryXAxisView, 'CategoryXAxisView', CategoryAxisBaseView.$);
