import { AxisRangeChangedEventArgs as AxisRangeChangedEventArgs_internal } from "./AxisRangeChangedEventArgs";
/**
 * Provides data for Axis RangeChanged events.
*
* The `AxisRangeChangedEventArgs` event fire when the axis range changes.
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
* 		<IgrCategoryXAxis name="xAxis" label="Date" />
* 		<IgrNumericYAxis  name="yAxis" />
*     <IgrFinancialPriceSeries
* 		name="series2"
* 		xAxisName="xAxis"
* 		yAxisName="yAxis"
* 		displayType="Candlestick"
* 		lowMemberPath="Low"
* 		highMemberPath="High"
* 		openMemberPath="Open"
* 		closeMemberPath="Close"
* 		volumeMemberPath="Volume" />
*  </IgrDataChart>
* ```
*/
export class AxisRangeChangedEventArgs {
    createImplementation() {
        return new AxisRangeChangedEventArgs_internal(0);
    }
    /**
     * @hidden
     */
    get i() {
        return this._implementation;
    }
    onImplementationCreated() {
    }
    constructor() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    _provideImplementation(i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    /**
     * Gets the minimum value before the range changed. The reported minimum is the effective,
     * not the set value.
    *
    * The `oldMinimumValue` property is used to gets the minimum value before the range changed.
    */
    get oldMinimumValue() {
        return this.i.oldMinimumValue;
    }
    set oldMinimumValue(v) {
        this.i.oldMinimumValue = +v;
    }
    /**
     * Gets the minimum value after the range changed. The reported minimum is the effective,
     * not the set value.
    *
    * The `minimumValue` property is used to getsthe minimum value after the range changed.
    */
    get minimumValue() {
        return this.i.minimumValue;
    }
    set minimumValue(v) {
        this.i.minimumValue = +v;
    }
    /**
     * Gets the maximum value before the range changed. The reported maximum is the effective,
     * not the set value.
    *
    * The `oldMaximumValue` property is used to gets the maximum value before the range changed.
    */
    get oldMaximumValue() {
        return this.i.oldMaximumValue;
    }
    set oldMaximumValue(v) {
        this.i.oldMaximumValue = +v;
    }
    /**
     * Gets the maximum value after the range changed. The reported maximum is the effective,
     * not the set value.
    *
    * The `maximumValue` property is used to gets the maximum value after the range changed.
    */
    get maximumValue() {
        return this.i.maximumValue;
    }
    set maximumValue(v) {
        this.i.maximumValue = +v;
    }
}
