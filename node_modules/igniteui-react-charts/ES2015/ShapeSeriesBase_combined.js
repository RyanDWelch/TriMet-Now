/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { IEnumerable$1_$type, Type, typeCast, Point_$type, fromEnum, Array_$type, Number_$type, markType, runOn } from "igniteui-react-core/ES2015/type";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { List$1 } from "igniteui-react-core/ES2015/List$1";
import { Rect } from "igniteui-react-core/ES2015/Rect";
import { IFastItemsSource_$type } from "igniteui-react-core/ES2015/IFastItemsSource";
import { PointCollectionUtil } from "igniteui-react-core/ES2015/PointCollectionUtil";
import { FlattenedShape } from "./FlattenedShape";
import { SeriesView } from "./SeriesView";
import { Clipper } from "igniteui-react-core/ES2015/Clipper";
import { ScalerParams } from "./ScalerParams";
import { Dictionary$2 } from "igniteui-react-core/ES2015/Dictionary$2";
import { Tuple$2 } from "igniteui-react-core/ES2015/Tuple$2";
import { PolySimplification } from "igniteui-react-core/ES2015/PolySimplification";
import { DefaultFlattener } from "./DefaultFlattener";
import { DataContext } from "igniteui-react-core/ES2015/DataContext";
import { FrameworkElement } from "igniteui-react-core/ES2015/FrameworkElement";
import { AxisRange } from "./AxisRange";
import { StyleShapeEventArgs } from "./StyleShapeEventArgs";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
import { boxArray$1 } from "igniteui-react-core/ES2015/array";
import { InvalidOperationException } from "igniteui-react-core/ES2015/InvalidOperationException";
import { FastItemObjectColumn } from "igniteui-react-core/ES2015/FastItemObjectColumn";
import { Path } from "igniteui-react-core/ES2015/Path";
import { Pool$1 } from "igniteui-react-core/ES2015/Pool$1";
import { ShapeHitRegion } from "./ShapeHitRegion";
import { PointCollection } from "igniteui-react-core/ES2015/PointCollection";
import { PathGeometry } from "igniteui-react-core/ES2015/PathGeometry";
import { PolyLineSegment } from "igniteui-react-core/ES2015/PolyLineSegment";
import { PathFigure } from "igniteui-react-core/ES2015/PathFigure";
import { GeometryUtil } from "igniteui-react-core/ES2015/GeometryUtil";
import { PolygonUtil } from "igniteui-react-core/ES2015/PolygonUtil";
import { RectUtil } from "igniteui-react-core/ES2015/RectUtil";
import { truncate } from "igniteui-react-core/ES2015/number";
/**
 * @hidden
 */
export class ShapeSeriesBase extends Series {
    constructor() {
        super();
        this.l9 = null;
        this.l4 = null;
        this.l6 = null;
        this.ml = 0;
        this.mh = null;
        this.l0 = null;
        this.l2 = null;
        this.l1 = null;
        this.lz = null;
        this.m6 = null;
        this.mn = 0;
        this.styleShape = null;
        FastItemObjectColumn.m();
        this.mn = this.mm;
        this.m6 = Rect.empty;
    }
    ht() {
        super.ht();
        this.l5 = null;
        this.l7 = null;
    }
    ag() {
        return [this.l5, this.l7];
    }
    fs(a, b) {
        let c = this.gu(b);
        if (c == ShapeSeriesBase.$$p[1]) {
            return this.ft(a, b, this.ms);
        }
        return null;
    }
    get ma() {
        return this.l9;
    }
    set ma(a) {
        let b = this.ma != a;
        if (b) {
            let c = this.ma;
            this.l9 = a;
            this.raisePropertyChanged("ShapeColumn", c, this.ma);
        }
    }
    md(array_) {
        let a = (Array.isArray(array_));
        return a;
    }
    convertToListList(a) {
        if (a == null) {
            return null;
        }
        let b = new List$1(List$1.$.specialize(Point_$type), 0);
        let c;
        let curr_;
        let d;
        let e;
        for (let f = 0; f < a.length; f++) {
            c = a[f];
            let g = new List$1(Point_$type, 0);
            for (let h = 0; h < c.length; h++) {
                curr_ = c[h];
                d = (curr_.x);
                e = (curr_.y);
                g.add({ $type: Point_$type, x: d, y: e });
            }
            b.add(g);
        }
        return b;
    }
    by(a) {
        if (this.bz != null && this.md(this.itemsSource) && a != null && a.split('!').length != 2) {
            if (this.coercionMethods == null) {
                this.coercionMethods = {};
            }
            let methods_ = this.coercionMethods;
            methods_.convertToListList = this.convertToListList;
            a += "!convertToListList";
        }
        return super.by(a);
    }
    iy(a, b, c, d) {
        super.iy(a, b, c, d);
        let e = false;
        let f = false;
        switch (b) {
            case "FastItemsSource":
                let g = typeCast(IFastItemsSource_$type, c);
                if (g != null) {
                    g.deregisterColumn(this.ma);
                    this.ma = null;
                }
                let h = typeCast(IFastItemsSource_$type, d);
                if (h != null) {
                    this.ma = this.by(this.ms);
                }
                e = this.l5 != null && !this.l5.ck();
                f = this.l7 != null && !this.l7.ck();
                if (e || f) {
                    this.jc(false);
                }
                break;
            case ShapeSeriesBase.$$p[1]:
                if (this.bz != null) {
                    this.bz.deregisterColumn(this.ma);
                    this.ma = this.by(this.ms);
                }
                break;
            case "ShapeColumn":
                this.mz();
                e = this.l5 != null && !this.l5.ck();
                f = this.l7 != null && !this.l7.ck();
                if (e || f) {
                    this.jc(false);
                }
                this.ij();
                break;
            case ShapeSeriesBase.$$p[2]:
            case ShapeSeriesBase.$$p[3]:
                this.l4 = this.l5;
                this.l6 = this.l7;
                let i = c;
                let j = d;
                this.m0(i);
                this.mx(j);
                if ((j != null && !j.ck()) || (j == null && i != null)) {
                    this.jc(false);
                }
                this.ij();
                break;
            case "Resolution":
                this.ml = this.eu;
                this.ij();
                break;
            case "ActualBrush":
                this.jc(false);
                break;
            case ShapeSeriesBase.$$p[0]:
                this.mn = this.mm;
                this.jc(false);
                this.ij();
                break;
            case "Thickness":
                this.jc(false);
                this.ij();
                break;
        }
    }
    mc(a) {
        if (typeCast(NumericYAxis.$, a) !== null) {
            return true;
        }
        return false;
    }
    mb(a) {
        if (typeCast(NumericXAxis.$, a) !== null) {
            return true;
        }
        return false;
    }
    mz() {
        this.mh = null;
        if (this.ma == null) {
            return;
        }
        this.mh = new List$1(Rect.$, 2, this.ma.count);
        for (let a = 0; a < this.ma.count; a++) {
            this.mh.add(PointCollectionUtil.j(this.ma.item(a)));
        }
    }
    m7(a) {
        if (typeCast(IEnumerable$1_$type.specialize(IEnumerable$1_$type.specialize(Point_$type)), a) !== null) {
            return PointCollectionUtil.h(a);
        }
        else if (typeCast(IEnumerable$1_$type.specialize(Point_$type), a) !== null) {
            return PointCollectionUtil.g(a);
        }
        return Rect.empty;
    }
    mj(a, b, c, d, e) {
        return this.mk(a, b, c, d, e);
        if (typeCast(List$1.$.specialize(List$1.$.specialize(Point_$type)), c) !== null) {
            return this.mk(a, b, c, d, e);
        }
        else if (typeCast(IEnumerable$1_$type.specialize(IEnumerable$1_$type.specialize(Point_$type)), c) !== null) {
            let f = c;
            let g = new List$1(FlattenedShape.$, 0);
            let h = null;
            for (let i of fromEnum(f)) {
                h = this.l3(a, b, PointCollectionUtil.b(i), d, e);
                if (h == null) {
                    continue;
                }
                g.add(h);
            }
            return g;
        }
        else if (typeCast(IEnumerable$1_$type.specialize(Point_$type), c) !== null) {
            let j = c;
            let k = this.l3(a, b, PointCollectionUtil.b(j), d, e);
            let l = new List$1(FlattenedShape.$, 0);
            if (k != null) {
                l.add(k);
            }
            return l;
        }
        else {
            throw new InvalidOperationException(1, "Unrecognized data in ShapeColumn");
        }
    }
    get_me() {
        return true;
    }
    get me() {
        return this.get_me();
    }
    mg() {
        return false;
    }
    jd(a) {
        this.my(this.bi);
    }
    jb(a, b, c, d, e) {
        super.jb(a, b, c, d, e);
        let f = this.a0.a$h.item(d);
        let g = f;
        f.ay(c);
        if (this.cc(f)) {
            return;
        }
        this.my(f);
    }
    my(a) {
        if (this.cc(a)) {
            return;
        }
        let b;
        let c;
        let d = a;
        let e = a.getViewInfo(c, b);
        c = e.p0;
        b = e.p1;
        if (c.width < 1 || c.height < 1 || this.ma == null) {
            return;
        }
        let f = this.l5;
        let g = this.l7;
        let h = this.getEffectiveViewport1(a);
        let i = new ScalerParams(1, b, c, f.b8);
        i.c = h;
        let j = new ScalerParams(1, b, c, g.b8);
        j.c = h;
        d.cj();
        let k = new Rect(0, 0, 0, 0, 0);
        let l;
        let m;
        let n;
        let o;
        let p = this.ma.count;
        if (this.l2 == null || this.l2.length != p) {
            this.l2 = new Array(p);
            this.l0 = new Array(p);
            this.l1 = new Array(p);
            this.lz = new Array(p);
        }
        let q = this.l2;
        let r = this.l0;
        let s = this.l1;
        let t = this.lz;
        let u;
        for (let v = 0; v < p; v++) {
            u = this.mh._inner[v];
            q[v] = u.top;
            r[v] = u.left;
            s[v] = u.right;
            t[v] = u.bottom;
        }
        this.l4.gm(boxArray$1(r), 0, r.length, i);
        this.l4.gm(boxArray$1(s), 0, s.length, i);
        this.l6.gm(boxArray$1(q), 0, q.length, j);
        this.l6.gm(boxArray$1(t), 0, t.length, j);
        d.ck(r, q, s, t);
        let w = this.ma;
        let x = this.bz;
        this.m1(d);
        let y = c.left;
        let z = c.right;
        let aa = c.top;
        let ab = c.bottom;
        let ac = null;
        if (this.m6.isEmpty) {
            ac = null;
        }
        else {
            ac = new Clipper(1, this.m6.left, this.m6.bottom, this.m6.right, this.m6.top, this.me);
        }
        let ad = this.mg();
        if (ad) {
            d.b3.clear();
        }
        let ae;
        for (let af = 0; af < p; af++) {
            n = r[af];
            l = q[af];
            m = t[af];
            o = s[af];
            k.x = Math.min(n, o);
            k.y = Math.min(l, m);
            k.width = Math.max(n, o) - k.x;
            k.height = Math.max(l, m) - k.y;
            if (k.intersectsWith(c)) {
                if (k.x < y || k.y < aa || k.x > z || k.y > ab) {
                    ae = ac;
                }
                else {
                    ae = null;
                }
                let ag = this.mj(a, ae, w.item(af), i, j);
                if (ad) {
                    let ah = 0;
                    let ai = null;
                    for (let aj = 0; aj < ag.count; aj++) {
                        let ak = ag._inner[aj];
                        let al = ak.b.width * ak.b.height;
                        if (al > ah) {
                            ah = al;
                            ai = ak;
                        }
                    }
                    d.b3.addItem(af, ai);
                }
                d.b8(af, x.item(af), k, ag);
            }
        }
        d.ci();
    }
    ia() {
        super.ia();
        if (this.l5 != null) {
            this.l5.g4();
        }
        if (this.l7 != null) {
            this.l7.g4();
        }
    }
    js(a, b) {
        this.jc(false);
    }
    jr(a, b) {
        this.jc(false);
    }
    hy(a, b, c, d) {
        super.hy(a, b, c, d);
        switch (a) {
            case 3:
                if (d == this.ms) {
                    this.mh._inner[b] = this.m7(this.ma.item(b));
                }
                break;
            case 1:
                for (let e = b; e < b + c; e++) {
                    this.mh.insert(e, this.m7(this.ma.item(e)));
                }
                break;
            case 0:
                this.mh.v(b, c);
                break;
            case 2:
                for (let f = b; f < b + c; f++) {
                    this.mh._inner[f] = this.m7(this.ma.item(f));
                }
                break;
            case 4:
                this.mz();
                break;
        }
        this.jc(false);
    }
    dw(a, b, c) {
        let d = true;
        if (!super.dw(a, b, c) || (this.mf && this.ma == null) || b.isEmpty || a.isEmpty || this.l5 == null || this.l7 == null || this.l5.bf == null || this.l7.bf == null || this.l5.j3 == this.l5.j2 || this.l7.j3 == this.l7.j2 || this.ma == null || this.ma.count == 0 || this.mh == null || this.mh.count == 0 || this.mh.count != this.ma.count) {
            d = false;
        }
        return d;
    }
    get_mf() {
        return true;
    }
    get mf() {
        return this.get_mf();
    }
    it(a) {
        super.it(a);
        this.l8 = typeCast(ShapeSeriesViewBase.$, a);
    }
    mk(a, b, c, d, e) {
        let f = new List$1(FlattenedShape.$, 0);
        let g;
        let h = c.count;
        for (let i = 0; i < h; i++) {
            g = c._inner[i];
            let j = this.l3(a, b, g, d, e);
            if (j == null) {
                continue;
            }
            f.add(j);
        }
        return f;
    }
    l3(a, b, c, d, e) {
        let f = this.mw(c, d, e);
        let g = f.c;
        let h = f.d;
        let i = g.length;
        let j = 1.7976931348623157E+308;
        let k = 1.7976931348623157E+308;
        let l = -1.7976931348623157E+308;
        let m = -1.7976931348623157E+308;
        let n;
        let o;
        for (let p = 0; p < i; p++) {
            n = g[p];
            o = h[p];
            j = n < j ? n : j;
            k = o < k ? o : k;
            l = n > l ? n : l;
            m = o > m ? o : m;
        }
        let q = !(j > this.m6.right || l < this.m6.left || k > this.m6.bottom || m < this.m6.top);
        if (!q) {
            return null;
        }
        let r = b != null && (j < this.m6.left || k < this.m6.top || l > this.m6.right || m > this.m6.bottom);
        let s = new Rect(0, j, k, l - j, m - k);
        if (!a.b2(s)) {
            return null;
        }
        j = j < this.m6.left ? this.m6.left : j;
        l = l > this.m6.right ? this.m6.right : l;
        k = k < this.m6.top ? this.m6.top : k;
        m = m > this.m6.bottom ? this.m6.bottom : m;
        let t = PolySimplification.b(f, this.eu);
        let u = new DefaultFlattener().c(f.c, f.d, t, this.ml);
        let v = u.count;
        if (r) {
            let w = new List$1(Point_$type, 0);
            b.i = w;
            for (let x = 0; x < v; x++) {
                b.j(u._inner[x]);
            }
            b.i = null;
            u = w;
        }
        if (u == null || u.count == 0) {
            return null;
        }
        let y = new FlattenedShape();
        y.a = u;
        y.b = new Rect(0, j, k, l - j, m - k);
        y.c = s;
        return y;
    }
    mw(a, b, c) {
        let d = this.l4;
        let e = this.l6;
        let f = a.count;
        let g = new Array(f);
        let h = new Array(f);
        for (let i = 0; i < f; i++) {
            g[i] = a._inner[i].x;
            h[i] = a._inner[i].y;
        }
        d.gm(boxArray$1(g), 0, g.length, b);
        e.gm(boxArray$1(h), 0, h.length, c);
        return new Tuple$2(Array_$type, Array_$type, g, h);
    }
    m1(a) {
        a.cp();
    }
    hv(a, b) {
        super.hv(a, b);
        let c = b;
        c.cd();
    }
    mx(a) {
        if (a != null) {
            a.ch(this);
        }
    }
    m0(a) {
        if (a != null) {
            a.bv(this);
        }
    }
    ar(a, b) {
        let c = this.l8.cr(a, b);
        let d = null;
        if (c != null) {
            d = c.dataContext;
        }
        if (d != null) {
            return d;
        }
        return super.ar(a, b);
    }
    mp(a) {
        return this.bz.item(a);
    }
    get_dq() {
        return true;
    }
    set_dq(a) {
        super.set_dq(a);
    }
    an(a) {
        if (typeCast(NumericXAxis.$, a) !== null && this.mh != null) {
            let b = 1.7976931348623157E+308;
            let c = -1.7976931348623157E+308;
            for (let d of fromEnum(this.mh)) {
                b = Math.min(b, d.left);
                c = Math.max(c, d.right);
            }
            return new AxisRange(b, c);
        }
        if (typeCast(NumericYAxis.$, a) !== null && this.mh != null) {
            let e = 1.7976931348623157E+308;
            let f = -1.7976931348623157E+308;
            for (let g of fromEnum(this.mh)) {
                e = Math.min(e, g.top);
                f = Math.max(f, g.bottom);
            }
            return new AxisRange(e, f);
        }
        return null;
    }
    get_c5() {
        return true;
    }
    m8(a, b, c) {
        if (this.styleShape != null) {
            let d = new StyleShapeEventArgs(a, b, c);
            this.styleShape(this, d);
            return d.d();
        }
        return null;
    }
}
ShapeSeriesBase.$t = markType(ShapeSeriesBase, 'ShapeSeriesBase', Series.$);
Type.dep(DependencyProperty, PropertyMetadata, ShapeSeriesBase, 'raisePropertyChanged', ['ShapeFilterResolution:mm:m2', [1, 2], 'ShapeMemberPath:ms:m3', [2, null], 'XAxis:l5:m4', [NumericXAxis.$, null], 'YAxis:l7:m5', [NumericYAxis.$, null]]);
/**
 * @hidden
 */
export class ShapeSeriesViewBase extends SeriesView {
    constructor(a) {
        super(a);
        this.b3 = null;
        this.by = null;
        this.b4 = new List$1(ShapeHitRegion.$, 0);
        this.b7 = 0;
        this.b6 = null;
        this.b1 = null;
        this.bz = null;
        this.cw = null;
        this.bv = null;
        this.bx = null;
        this.bw = null;
        this.bu = null;
        this.by = a;
        this.b1 = this.b0();
        this.b6 = new List$1(Path.$, 0);
        this.b3 = new Dictionary$2(Number_$type, FlattenedShape.$, 0);
    }
    b0() {
        return ((() => {
            let $ret = new Pool$1(FrameworkElement.$);
            $ret.create = runOn(this, this.cq);
            $ret.activate = runOn(this, this.cf);
            $ret.disactivate = runOn(this, this.cg);
            $ret.destroy = runOn(this, this.ch);
            return $ret;
        })());
    }
    b2(a) {
        return a.width >= this.by.mn && a.height >= this.by.mn;
    }
    static b5(a) {
        let b = new List$1(PointCollection.$, 0);
        let c;
        let d = a.count;
        for (let e = 0; e < d; e++) {
            c = a._inner[e];
            let f = new PointCollection(1, c.a);
            b.add(f);
        }
        return b;
    }
    b8(a, b, c, d) {
        if (d != null && d.count > 0) {
            let e = ShapeSeriesViewBase.b5(d);
            c.intersect(this.br);
            if (!this.b2(c)) {
            }
            else {
                let f = this.cu(a, e);
                if (f != null) {
                    let g = this.ct(this.b7, b);
                    for (let h = 0; h < d.count; h++) {
                        let i = new ShapeHitRegion();
                        i.d = d._inner[h].b;
                        i.a = d._inner[h].a;
                        i.b = a;
                        i.c = g;
                        this.b4.add(i);
                    }
                    this.ce(g);
                    this.ca(g, f);
                    this.cc(g, b);
                    this.b7 = this.b7 + 1;
                }
            }
        }
    }
    ct(a, b) {
        let c = this.b1.item(this.b7);
        if (c.dataContext != null) {
            c.dataContext.item = b;
        }
        return c;
    }
    static cb(a, b, c) {
        if (b._fill == null) {
            b._fill = a.e.k2;
        }
        if (b._stroke == null) {
            b._stroke = a.e.k3;
        }
        if (b.y == null) {
            b.ac = a.e.ey;
        }
    }
    cc(a, b) {
        if (a == null) {
            return;
        }
        if (this.bz != null) {
            a.y = this.bz.selectStyle(b, a);
        }
        a.y = this.by.m8(b, a, a.y);
        if (a.y == null) {
            a.y = this.cw;
        }
    }
    ce(a) {
    }
    b9(a, b) {
        let c = truncate(Math.floor(a.left));
        let d = truncate(Math.ceil(a.right));
        let e = truncate(Math.floor(a.top));
        let f = truncate(Math.ceil(a.bottom));
        for (let g = c; g < d; g++) {
            for (let h = e; h < f; h++) {
                this.cm(g, h, b);
            }
        }
    }
    cm(a, b, c) {
    }
    cj() {
        this.b7 = 0;
    }
    ci() {
        this.b1.count = this.b7;
        this.an();
    }
    cl(a, b) {
    }
    cd() {
        this.b1.count = 0;
        this.an();
    }
    cq() {
        let a = this.by;
        let b = ((() => {
            let $ret = new Path();
            $ret.dataContext = ((() => {
                let $ret = new DataContext();
                $ret.series = a;
                return $ret;
            })());
            return $ret;
        })());
        this.b6.add(b);
        return b;
    }
    cf(a) {
        a._visibility = 0;
    }
    cg(a) {
        a.dataContext.item = null;
        a._visibility = 1;
    }
    ch(a) {
        this.b6.remove(a);
    }
    cv(a, b, c) {
        if (b == null) {
            return null;
        }
        let d = new PathGeometry();
        let e;
        let f = b.count;
        for (let g = 0; g < f; g++) {
            e = b._inner[g];
            if (e.count < 1) {
                continue;
            }
            let h = new PolyLineSegment();
            h._points = e;
            let i = new PathFigure();
            i._isFilled = c;
            i._isClosed = c;
            i._startPoint = e._inner[0];
            i._segments.add(h);
            d.b.add(i);
        }
        return d;
    }
    bb(a, b) {
        super.bb(a, b);
        let c = a;
        c._fill = this.e.k2;
        c._stroke = this.e.k3;
        c.ac = this.e.ey;
        if (c.y != null) {
            this.h.i(c, c.y);
        }
    }
    bc(a, b) {
        super.bc(a, b);
        let c = a;
        let d = this.bm(b);
        c._fill = d;
        c._stroke = d;
        c.ac = this.e.ey + 3;
    }
    a3(a, b) {
        super.a3(a, b);
        for (let c = 0; c < this.b6.count; c++) {
            let d = this.b6._inner[c];
            if (d._visibility != 1) {
                this.ba(d, c, b);
                a.s(d);
            }
        }
    }
    co(a) {
        this.bz = a;
    }
    cn(a) {
        this.cw = a;
    }
    cr(a, b) {
        return this.cs(a, b, false);
    }
    cs(a, b, c) {
        if (this.b4.count == 0) {
            return null;
        }
        let d = a.x;
        let e = a.y;
        let f = this.b4.count;
        let g = this.b4;
        let h = null;
        for (let i = 0; i < f; i++) {
            h = g._inner[i];
            if (h.a == null || h.a.count == 0) {
                continue;
            }
            if (d >= h.d.left && d <= h.d.right && e >= h.d.top && e <= h.d.bottom) {
                if (c) {
                    let j = this.by.ey / 2 + this.by.ee(b);
                    if (GeometryUtil.b(a, h.a._inner[0], h.a, j)) {
                        return h.c;
                    }
                }
                else {
                    if (PolygonUtil.a(h.a, a)) {
                        return h.c;
                    }
                }
            }
        }
        return null;
    }
    ck(a, b, c, d) {
        this.bv = a;
        this.bx = b;
        this.bw = c;
        this.bu = d;
        this.b4.clear();
    }
    cp() {
        let a = this.br;
        let b = ((() => {
            let $ret = new Path();
            $ret.y = this.cw;
            return $ret;
        })());
        b.ac = 1;
        if (this.h != null) {
            this.h.i(b, b.y);
        }
        this.by.m6 = RectUtil.r(a, b.ac);
    }
    ai(a) {
        super.ai(a);
        if (this.b1.a == null) {
            return;
        }
        for (let b = 0; b < this.b1.a.count; b++) {
            let c = typeCast(Path.$, this.b1.a._inner[b]);
            if (c._visibility != 1) {
                this.e.a2.exportPathData(a, c, "shape" + b, ["Main "]);
            }
        }
    }
}
ShapeSeriesViewBase.$t = markType(ShapeSeriesViewBase, 'ShapeSeriesViewBase', SeriesView.$);
