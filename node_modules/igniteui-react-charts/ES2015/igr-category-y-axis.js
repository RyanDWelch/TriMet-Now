import { IgrCategoryAxisBase } from "./igr-category-axis-base";
import { CategoryYAxis } from "./CategoryYAxis";
import { toPoint, fromRect } from "igniteui-react-core/ES2015/componentUtil";
/**
 * Represents a IgxDataChartComponent category Y axis.
*/
export class IgrCategoryYAxis extends IgrCategoryAxisBase {
    createImplementation() {
        return new CategoryYAxis();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets if the current axis is a vertical axis.
    */
    get isVertical() {
        return this.i.ce;
    }
    /**
     * Gets or sets the frequency of displayed labels.
     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    */
    get interval() {
        return this.i.k2;
    }
    set interval(v) {
        this.i.k2 = +v;
    }
    /**
     * Gets the effective value for the current Interval.
    */
    get actualInterval() {
        return this.i.ky;
    }
    set actualInterval(v) {
        this.i.ky = +v;
    }
    /**
     * Gets or sets the frequency of displayed minor lines.
     * The set value is a factor that determines how the minor lines will be displayed.
    */
    get minorInterval() {
        return this.i.k3;
    }
    set minorInterval(v) {
        this.i.k3 = +v;
    }
    /**
     * Gets the effective value for the current MinorInterval.
    */
    get actualMinorInterval() {
        return this.i.k0;
    }
    set actualMinorInterval(v) {
        this.i.k0 = +v;
    }
    getCategoryBoundingBox(point, useInterpolation, singularWidth) {
        let iv = this.i.kt(toPoint(point), useInterpolation, singularWidth);
        return fromRect(iv);
    }
    scrollRangeIntoView(minimum, maximum) {
        this.i.ld(minimum, maximum);
    }
    /**
     * Scrolls the specified item into view.
    
    * @param item  * Data item to scroll into view
    */
    scrollIntoView(item) {
        this.i.lc(item);
    }
}
