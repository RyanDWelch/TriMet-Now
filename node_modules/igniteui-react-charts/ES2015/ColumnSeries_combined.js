/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { ConsolidatedItemsPosition_$type } from "./ConsolidatedItemsPosition";
import { Type, runOn, enumGetBox, markType, fromEnum } from "igniteui-react-core/ES2015/type";
import { Pool$1 } from "igniteui-react-core/ES2015/Pool$1";
import { Rectangle } from "igniteui-react-core/ES2015/Rectangle";
import { List$1 } from "igniteui-react-core/ES2015/List$1";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
import { isNaN_, isInfinity } from "igniteui-react-core/ES2015/number";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
/**
 * @hidden
 */
export class ColumnSeries extends HorizontalAnchoredCategorySeries {
    constructor() {
        super();
        this.qm = null;
        this.qh = 0;
        this.ab = ColumnSeries.$;
        this.p0 = 2;
    }
    bf() {
        return new ColumnSeriesView(this);
    }
    it(a) {
        super.it(a);
        this.qg = a;
    }
    nf() {
        return 1;
    }
    get_nu() {
        return true;
    }
    preferredCategoryMode(a) {
        return this.p0;
    }
    lt(a) {
        if (this.qm == null) {
            this.qm = runOn(this, this.qj);
        }
        let b = this.p3 != null ? this.p3 : this.yAxis;
        let c = this.px;
        return this.o2.c$d(this, a, c, b, this.m6, this.n6(this.bi), this.n7(this.bi), this.qm);
    }
    dh(a, b) {
        if (this.dk(a, b)) {
            return true;
        }
        if (this.l3(a, b)) {
            return true;
        }
        return false;
    }
    hv(a, b) {
        super.hv(a, b);
        let c = b;
        if (a && c.c7 != null) {
            c.c7.count = 0;
        }
    }
    eg() {
        return this.px.jq(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
    }
    on(a, b) {
        super.on(a, b);
        let c = a.f;
        if (!b.q()) {
            return;
        }
        let d = b.bs;
        let e = b.br;
        let f = this.getEffectiveViewport1(b);
        let g = new ScalerParams(0, d, e, this.p3.b8, f);
        g.b = this.eh();
        let h = new ScalerParams(0, d, e, this.px.b8, f);
        let i = this.p3;
        let j = i.dv(i.kd, g);
        let k = this.px.jq(d, e, f);
        let l = this.px;
        let m = b;
        if (isNaN_(k) || isInfinity(k)) {
            m.c7.count = 0;
            return;
        }
        this.nd.x(this, this.ny(), this.px, runOn(this, this.mz), this.n6(b), this.n7(b));
        this.nd.p = this.qk;
        this.nd.q = this.ql;
        this.nd.j = this.qk;
        this.nd.k = this.ql;
        let n = false;
        let o = this.nd.c;
        if (o != null) {
            n = true;
        }
        let p = this.px.cc;
        let q = p ? this.px : null;
        let r = this.valueColumn.count;
        let s = this.n6(b);
        let t = 0;
        for (let u = 0; u < c.count; ++u) {
            let v = c._inner[u][0] - 0.5 * k;
            let w = this.qj(c._inner[u]);
            let x = j;
            w = Math.max(w, -100);
            x = Math.min(x, e.bottom + 100);
            let y = Math.abs(x - w);
            if (isInfinity(y)) {
                continue;
            }
            let z = m.c7.item(t);
            t++;
            z.width = k;
            z.height = y;
            if (n) {
                this.oj(c, u, r, l, h, b.n);
            }
            if (z.dataContext != null) {
                let aa = z.dataContext;
                if (s == 1) {
                    let ab = this.nd.a(r, u)[0];
                    if (ab >= 0 && ab < this.bz.count) {
                        if (q != null && q.i$b != null && q.i$b.count > ab) {
                            ab = q.i$b._inner[ab];
                        }
                        aa.item = this.bz.item(ab);
                    }
                }
                else {
                    aa.item = null;
                }
            }
            this.nd.ae(z, false, false, false, false);
            z.al = this.nd.j;
            z.am = this.nd.k;
            m.dc(z, v, Math.min(x, w));
        }
        m.c7.count = t;
        b.cu(a);
    }
    get qi() {
        return this.qh;
    }
    set qi(a) {
        if (this.qi != a) {
            let b = this.qi;
            this.qh = a;
            this.raisePropertyChanged("ConsolidatedColumnVerticalPosition", enumGetBox(ConsolidatedItemsPosition_$type, b), enumGetBox(ConsolidatedItemsPosition_$type, this.qi));
        }
    }
    qj(a) {
        if (a == null || a.length < 3) {
            return NaN;
        }
        switch (this.qi) {
            case 0: return a[1];
            case 1: return a[2];
            case 2: return (a[1] + a[2]) / 2;
            case 3:
                let b = (a[1] + a[2]) / 2;
                if (this.yAxis == null) {
                    return b;
                }
                let c = this.yAxis.dy(b, new ScalerParams(1, this.bs.m4, this.bs.m3, this.yAxis.b8));
                if (c < this.yAxis.kd) {
                    return a[2];
                }
                else {
                    return a[1];
                }
            case 4:
                let d = (a[1] + a[2]) / 2;
                let e = this.yAxis.dy(d, new ScalerParams(1, this.bs.m4, this.bs.m3, this.yAxis.b8));
                if (this.yAxis == null) {
                    return d;
                }
                if (e < this.yAxis.kd) {
                    return a[1];
                }
                else {
                    return a[2];
                }
            default: return (a[1] + a[2]) / 2;
        }
    }
    get useHighMarkerFidelity() {
        return this.n1;
    }
}
ColumnSeries.$t = markType(ColumnSeries, 'ColumnSeries', HorizontalAnchoredCategorySeries.$);
Type.dep(DependencyProperty, PropertyMetadata, ColumnSeries, 'raisePropertyChanged', ['RadiusX:qk:qq', [1, 2], 'RadiusY:ql:qr', [1, 2]]);
/**
 * @hidden
 */
export class ColumnSeriesView extends AnchoredCategorySeriesView {
    constructor(a) {
        super(a);
        this.c6 = null;
        this.c8 = null;
        this.dd = new Rectangle();
        this.c7 = null;
        this.c6 = a;
        this.c7 = ((() => {
            let $ret = new Pool$1(Rectangle.$);
            $ret.create = runOn(this, this.de);
            $ret.activate = runOn(this, this.c9);
            $ret.disactivate = runOn(this, this.db);
            $ret.destroy = runOn(this, this.da);
            return $ret;
        })());
    }
    ap() {
        super.ap();
        this.c8 = new List$1(Rectangle.$, 0);
        if (!this.n) {
            this.e.eu = 4;
            this.e.bj = 1;
        }
    }
    de() {
        let a = new Rectangle();
        this.c8.add(a);
        a._visibility = 1;
        return a;
    }
    c9(a) {
        a._visibility = 0;
    }
    db(a) {
        a._visibility = 1;
    }
    da(a) {
        this.c8.remove(a);
    }
    dc(a, b, c) {
        if (!this.isDirty) {
            this.an();
        }
        a.o = c;
        a.n = b;
    }
    z(a) {
        return this.c8._inner[a];
    }
    y(a) {
        let b = this.c8._inner[a];
        this.dd._visibility = b._visibility;
        this.dd.n = b.n;
        this.dd.o = b.o;
        this.dd.width = b.width;
        this.dd.height = b.height;
        let c = this.bm(a);
        this.dd._fill = c;
        this.dd._stroke = c;
        this.dd.ac = this.e.ey + 3;
        return this.dd;
    }
    a3(a, b) {
        super.a3(a, b);
        if (a.d) {
            for (let c = 0; c < this.c8.count; c++) {
                let d = this.x(c, b);
                this.ba(d, c, b);
                a.v(d);
            }
        }
    }
    ai(a) {
        super.ai(a);
        let b = 0;
        let c = new List$1(Rectangle.$, 0);
        for (let d of fromEnum(this.c7.a)) {
            c.add(d);
        }
        c.aa((e, f) => {
            if (e.n < f.n) {
                return -1;
            }
            else if (e.n > f.n) {
                return 1;
            }
            else {
                return 0;
            }
        });
        for (let e of fromEnum(c)) {
            this.e.a2.exportRectangleData(a, e, "column" + b, ["Main", "Fill"]);
        }
        b++;
    }
}
ColumnSeriesView.$t = markType(ColumnSeriesView, 'ColumnSeriesView', AnchoredCategorySeriesView.$);
