import { Base, Type } from "igniteui-react-core/ES2015/type";
import { ISeriesVisualDataManager } from "./ISeriesVisualDataManager";
import { List$1 } from "igniteui-react-core/ES2015/List$1";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core/ES2015/Rect";
import { MarkerSeries } from "./MarkerSeries";
import { Marker } from "./Marker";
import { DataTemplate } from "igniteui-react-core/ES2015/DataTemplate";
import { ContentControl } from "igniteui-react-core/ES2015/ContentControl";
import { Path } from "igniteui-react-core/ES2015/Path";
import { Polygon } from "igniteui-react-core/ES2015/Polygon";
import { Polyline } from "igniteui-react-core/ES2015/Polyline";
import { Rectangle } from "igniteui-react-core/ES2015/Rectangle";
import { TextBlock } from "igniteui-react-core/ES2015/TextBlock";
import { FontInfo } from "igniteui-react-core/ES2015/FontInfo";
import { Line } from "igniteui-react-core/ES2015/Line";
/**
 * @hidden
 */
export declare class SeriesVisualDataManager extends Base implements ISeriesVisualDataManager {
    static $t: Type;
    addSubSeriesVisualData(a: any, b: any): void;
    copyVisualData(a: any, b: any): void;
    createFragmentVisualData(a: Series, b: Rect, c: string, d: string): any;
    exportMarkerVisualData(a: MarkerSeries, b: any): void;
    getMarkerVisualData(a: Series, b: Marker, c: DataTemplate): any;
    a(a: Series, b: DataTemplate): string;
    exportMarkerVisualDataFromMarker(a: Series, b: any, c: ContentControl): void;
    exportPathData(a: any, b: Path, c: string, d: string[]): void;
    exportPolygonData(a: any, b: Polygon, c: string, d: string[]): void;
    exportPolylineData(a: any, b: Polyline, c: string, d: string[]): void;
    exportRectangleData(a: any, b: Rectangle, c: string, d: string[]): void;
    exportStackedVisualData(a: Series, b: Rect): any;
    exportTrendlineData(a: Series, b: any, c: Polyline): void;
    exportVisualData(a: Series, b: Rect): any;
    exportSeriesPixelsData(a: any, b: number[], c: number, d: number): void;
    private b;
    addPointerTooltipData(a: any, b: any, c: number, d: number, e: List$1<string>): void;
    exportPointerTooltipData(a: Polygon, b: Polyline, c: Rectangle, d: Rect): any;
    exportCalloutData(a: number, b: number, c: number, d: number, e: any, f: Rectangle, g: TextBlock, h: FontInfo, i: Line, j: string, k: string[]): void;
}
