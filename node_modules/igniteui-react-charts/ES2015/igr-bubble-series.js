import { IgrSizeScale } from "./igr-size-scale";
import { IgrBrushScale } from "./igr-brush-scale";
import { IgrScatterBase } from "./igr-scatter-base";
import { BubbleSeries } from "./BubbleSeries";
/**
 * Represents a IgxDataChartComponent bubble series.
*/
export class IgrBubbleSeries extends IgrScatterBase {
    createImplementation() {
        return new BubbleSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the radius mapping property for the current series object.
    */
    get radiusMemberPath() {
        return this.i.ph;
    }
    set radiusMemberPath(v) {
        this.i.ph = v;
    }
    /**
     * Gets or sets the radius size scale for the bubbles.
    */
    get radiusScale() {
        if (this.i.oy == null) {
            return null;
        }
        if (!this.i.oy.externalObject) {
            let e = IgrSizeScale._createFromInternal(this.i.oy);
            if (e) {
                e._implementation = this.i.oy;
            }
            this.i.oy.externalObject = e;
        }
        return this.i.oy.externalObject;
    }
    set radiusScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.oy = null : this.i.oy = v.i;
    }
    /**
     * Gets or sets the Label mapping property for the current series object.
    */
    get labelMemberPath() {
        return this.i.pe;
    }
    set labelMemberPath(v) {
        this.i.pe = v;
    }
    /**
     * Gets or sets the fill mapping property for the current series object.
    */
    get fillMemberPath() {
        return this.i.pa;
    }
    set fillMemberPath(v) {
        this.i.pa = v;
    }
    /**
     * Gets or sets the brush scale for the marker brush.
    */
    get fillScale() {
        if (this.i.ow == null) {
            return null;
        }
        if (!this.i.ow.externalObject) {
            let e = IgrBrushScale._createFromInternal(this.i.ow);
            if (e) {
                e._implementation = this.i.ow;
            }
            this.i.ow.externalObject = e;
        }
        return this.i.ow.externalObject;
    }
    set fillScale(v) {
        if (v != null && this._stylingContainer && v._styling)
            v._styling(this._stylingContainer, this, this);
        v == null ? this.i.ow = null : this.i.ow = v.i;
    }
    /**
     * Overridden by derived series classes to indicate when markerless display is preferred or not.
    */
    get isMarkerlessDisplayPreferred() {
        return this.i.cy;
    }
    _styling(container, component, parent) {
        super._styling(container, component, parent);
        this._inStyling = true;
        if (this.radiusScale && this.radiusScale._styling) {
            this.radiusScale._styling(container, component, this);
        }
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        this._inStyling = false;
    }
    getItemValue(item, memberPathName) {
        let iv = this.i.fs(item, memberPathName);
        return (iv);
    }
}
