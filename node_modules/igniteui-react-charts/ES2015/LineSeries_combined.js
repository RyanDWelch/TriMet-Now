/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { IUnknownValuePlotting_$type } from "igniteui-react-core/ES2015/IUnknownValuePlotting";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { UnknownValuePlotting_$type } from "igniteui-react-core/ES2015/UnknownValuePlotting";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { Type, typeCast, runOn, enumGetBox, markType } from "igniteui-react-core/ES2015/type";
import { Path } from "igniteui-react-core/ES2015/Path";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { ISortingAxis_$type } from "./ISortingAxis";
import { Color } from "igniteui-react-core/ES2015/Color";
/**
 * @hidden
 */
export class LineSeries extends HorizontalAnchoredCategorySeries {
    constructor() {
        super();
        this.qg = null;
        this.qg = new CategoryLineRasterizer();
        this.ab = LineSeries.$;
        this.p0 = 0;
    }
    bf() {
        return new LineSeriesView(this);
    }
    it(a) {
        super.it(a);
        this.qh = a;
    }
    get_ck() {
        return true;
    }
    preferredCategoryMode(a) {
        return this.p0;
    }
    hv(a, b) {
        super.hv(a, b);
        let c = b;
        c.c7();
    }
    on(a, b) {
        super.on(a, b);
        let c = b.cn.d;
        let d = typeCast(LineSeriesView.$, b);
        let e = a.f;
        let f = this.getEffectiveViewport1(b);
        this.nd.x(this, this.ny(), this.px, runOn(this, this.mz), this.n6(b), this.n7(b));
        let g = false;
        let h = this.nd.c;
        if (h != null) {
            g = true;
        }
        if (g) {
            let i = new ScalerParams(0, b.bs, b.br, this.px.b8, f);
            this.oj(e, -1, this.valueColumn.count, this.px, i, b.n);
        }
        let j = d.dd;
        let k = d.de;
        let l = d.dc;
        this.nd.ae(j, true, false, true, false);
        this.nd.ae(k, true, false, true, false);
        this.nd.ae(l, false, true, false, false);
        l._opacity = 0.75 * this.nd.i;
        if (b.cr(a)) {
            d.c8(e.count, e, true, this.unknownValuePlotting, this.ov(e, e.count - 1, b.br, b.bs), c, this.eu);
            b.cu(a);
        }
    }
    iy(a, b, c, d) {
        super.iy(a, b, c, d);
        switch (b) {
            case LineSeries.$$p[0]:
                this.na.m = this.unknownValuePlotting == 0;
                this.jc(false);
                this.ij();
                break;
        }
    }
    get useHighMarkerFidelity() {
        return this.n1;
    }
}
LineSeries.$t = markType(LineSeries, 'LineSeries', HorizontalAnchoredCategorySeries.$, [IUnknownValuePlotting_$type]);
Type.dep(DependencyProperty, PropertyMetadata, LineSeries, 'raisePropertyChanged', ['UnknownValuePlotting::qj', [UnknownValuePlotting_$type, enumGetBox(UnknownValuePlotting_$type, 1)]]);
/**
 * @hidden
 */
export class LineSeriesView extends AnchoredCategorySeriesView {
    constructor(a) {
        super(a);
        this.c6 = null;
        this.dg = new Path();
        this.df = new Path();
        this.dh = new Path();
        this.db = new Path();
        this.da = new Path();
        this.c9 = new Path();
        this.c6 = a;
    }
    get dd() {
        return this.dg;
    }
    get de() {
        return this.dh;
    }
    get dc() {
        return this.df;
    }
    c7() {
        this.df.aj = null;
        this.dg.aj = null;
        this.dh.aj = null;
        this.an();
    }
    c8(a, b, c, d, e, f, g) {
        this.c6.qg.a = typeCast(ISortingAxis_$type, this.cp.fetchXAxis()) !== null ? true : false;
        this.c6.qg.m(this.dg, this.df, this.dh, a, b, c, d, e, f, g);
        this.an();
    }
    a8() {
        super.a8();
    }
    a9() {
        super.a9();
        this.da.aj = this.dg.aj;
        this.db.aj = this.dh.aj;
        this.c9.aj = this.df.aj;
        let a = this.bl();
        this.da._stroke = a;
        this.da.ac = this.e.ey + 3;
        this.db._stroke = a;
        this.db.ac = this.e.ey + 3;
        this.c9._fill = a;
        this.c9._opacity = 1;
    }
    a3(a, b) {
        super.a3(a, b);
        if (a.d) {
            if (b) {
                a.s(this.c9);
                a.s(this.da);
                a.s(this.db);
            }
            else {
                a.s(this.df);
                a.s(this.dg);
                a.s(this.dh);
            }
        }
    }
    ai(a) {
        super.ai(a);
        this.e.a2.exportPathData(a, this.dg, "lowerShape", ["Lower", "Main"]);
        this.e.a2.exportPathData(a, this.dh, "upperShape", ["Upper"]);
        this.e.a2.exportPathData(a, this.df, "translucentShape", ["Translucent"]);
    }
    ac() {
        let a = new Color();
        a.colorString = "rgba(95,95,95,0.5)";
        this.e.k9 = a;
        this.e.ev = 3;
        this.e.ew = 1;
        this.e.ex = 4;
        this.e.du = false;
    }
}
LineSeriesView.$t = markType(LineSeriesView, 'LineSeriesView', AnchoredCategorySeriesView.$);
