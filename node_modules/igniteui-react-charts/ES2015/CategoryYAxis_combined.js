/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { Rect } from "igniteui-react-core/ES2015/Rect";
import { Base, typeCast, Array_$type, Number_$type, markType } from "igniteui-react-core/ES2015/type";
import { List$1 } from "igniteui-react-core/ES2015/List$1";
import { ScalerParams } from "./ScalerParams";
import { NumericScaler } from "./NumericScaler";
import { VerticalAxisLabelPanel } from "./VerticalAxisLabelPanel";
import { MathUtil } from "igniteui-react-core/ES2015/MathUtil";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { LinearCategorySnapper } from "./LinearCategorySnapper";
import { NumericXAxis } from "./NumericXAxis";
import { LabelPosition } from "./LabelPosition";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core/ES2015/number";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
/**
 * @hidden
 */
export class CategoryYAxis extends CategoryAxisBase {
    constructor() {
        super();
        this.kx = 0;
        this.kz = 0;
        this.k5 = 1;
        this.k4 = 1;
        this.jl = new List$1(Number_$type, 0);
        this.ab = CategoryYAxis.$;
    }
    a1() {
        return new CategoryYAxisView(this);
    }
    gr(a) {
        super.gr(a);
        this.kw = a;
    }
    get_ce() {
        return true;
    }
    du() {
        return this.i0.height;
    }
    kt(a, b, c) {
        return this.ku(a, b, c, true);
    }
    kv(a) {
        if (typeCast(List$1.$.specialize(Array_$type), a) !== null) {
            return a.asArray();
        }
        return null;
    }
    gl(a, b, c, d, e) {
        let f;
        let g = e.e;
        let h = e.d;
        let i = e.c;
        let j = e.a;
        let k = !i.isEmpty;
        let l = this.categoryMode == 0 ? this.jx - 1 : this.jx;
        if (l < 0) {
            l = 0;
        }
        let m = i.top;
        let n = i.height;
        let o = g.top;
        let p = g.height;
        let q = h.top;
        let r = h.height;
        let s = 0;
        let t = 1;
        let u = this.kv(a);
        let v = false;
        if (u != null) {
            v = true;
        }
        let w;
        for (let x = 0; x < b.count; x++) {
            w = b.item(x);
            for (let y = c; y < d; y++) {
                if (v) {
                    f = u[y];
                }
                else {
                    f = a.item(y);
                }
                if (k) {
                    let z = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                    if (!j) {
                        z = 1 - z;
                    }
                    z = m + n * (z - s) / t;
                    let aa = (z - (o * r)) / p;
                    f[w] = aa;
                }
                else {
                    let ab = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                    if (!j) {
                        ab = 1 - ab;
                    }
                    ab = q + r * (ab - o) / p;
                    f[w] = ab;
                }
            }
        }
    }
    get k2() {
        return this.c(CategoryYAxis.le);
    }
    set k2(a) {
        this.h(CategoryYAxis.le, a);
    }
    get ky() {
        return this.kx;
    }
    set ky(a) {
        if (this.ky != a) {
            let b = this.kx;
            this.kx = a;
            this.gz("ActualInterval", b, this.ky);
        }
    }
    d6() {
        return this.ky;
    }
    get k3() {
        return this.c(CategoryYAxis.lf);
    }
    set k3(a) {
        this.h(CategoryYAxis.lf, a);
    }
    get k0() {
        return this.kz;
    }
    set k0(a) {
        if (this.k0 != a) {
            let b = this.kz;
            this.kz = a;
            this.gz("ActualMinorInterval", b, this.k0);
        }
    }
    get k7() {
        return this.k5;
    }
    set k7(a) {
        this.k5 = a;
    }
    get k6() {
        return this.k4;
    }
    set k6(a) {
        this.k4 = a;
    }
    dv(a, b) {
        if (!b.c.isEmpty) {
            let c = this.k1(a, NumericScaler.ac, b.c);
            c = (c - b.d.top) / b.d.height;
            c = b.d.top + b.d.height * (c - b.e.top) / b.e.height;
            return c;
        }
        return this.k1(a, b.e, b.d);
    }
    k1(a, b, c) {
        let d = this.categoryMode == 0 ? this.jx - 1 : this.jx;
        if (d < 0) {
            d = 0;
        }
        let e = d >= 1 ? (a) / (d) : d == 0 ? 0.5 : NaN;
        if (!this.b9) {
            e = 1 - e;
        }
        return c.top + c.height * (e - b.top) / b.height;
    }
    dy(a, b) {
        if (!b.c.isEmpty) {
            let c = b.e.top + b.e.height * (a - b.d.top) / b.d.height;
            c = (c * b.d.height) + b.d.top;
            c = this.getUnscaledValue3(c, NumericScaler.ac, b.c, this.categoryMode);
            return c;
        }
        return this.getUnscaledValue3(a, b.e, b.d, this.categoryMode);
    }
    dz(a, b, c) {
        if (!b.c.isEmpty) {
            let d = b.e.top + b.e.height * (a - b.d.top) / b.d.height;
            d = (d * b.d.height) + b.d.top;
            d = this.getUnscaledValue3(d, NumericScaler.ac, b.c, c);
            return d;
        }
        return this.getUnscaledValue3(a, b.e, b.d, c);
    }
    getUnscaledValue3(a, b, c, d) {
        let e = b.top + (a - c.top) * b.height / c.height;
        if (!this.b9) {
            e = 1 - e;
        }
        let f = d == 0 ? this.jx - 1 : this.jx;
        if (f < 0) {
            f = 0;
        }
        return e * f;
    }
    ld(a, b) {
        if (a == NaN || b == NaN || this.je == null || this.je.count == 0) {
            return;
        }
        let c = a / this.je.count;
        let d = b / this.je.count;
        this.bf.m4 = new Rect(0, this.bf.m4.x, 1 - d, this.bf.m4.width, d - c);
    }
    as() {
        return new VerticalAxisLabelPanel();
    }
    di() {
        return this.k2;
    }
    getCategorySize(a, b, c) {
        let d = this.iy(b, c);
        return d.height / (this.jx * a.height);
    }
    jq(a, b, c) {
        let d = 0;
        if (!isNaN_(this.jn)) {
            d = MathUtil.b(this.jn, 0, 1);
        }
        let e = 0;
        if (!isNaN_(this.ju)) {
            e = Math.min(this.ju, 1);
        }
        let f = 1 - 0.5 * d;
        let g = this.getCategorySize(a, b, c) * f / (this.j0 - (this.j0 - 1) * e);
        return g;
    }
    getGroupCenter(a, b, c, d) {
        let e = 0.5;
        if (this.j0 > 1) {
            let f = 0;
            if (!isNaN_(this.jn)) {
                f = MathUtil.b(this.jn, 0, 1);
            }
            let g = 0;
            if (!isNaN_(this.ju)) {
                g = Math.min(this.ju, 1);
            }
            let h = 1 - 0.5 * f;
            let i = h / (this.j0 - (this.j0 - 1) * g);
            let j = (h - i) / (this.j0 - 1);
            e = 0.25 * f + 0.5 * i + a * j;
        }
        return this.getCategorySize(b, c, d) * e;
    }
    lc(a) {
        let b = this.bf != null ? this.bf.mq : Rect.empty;
        b = b.copy();
        let c = this.i0;
        let d = new Rect(0, 0, 0, 1, 1);
        let e = this.ix();
        let f = new ScalerParams(0, d, d, this.b8, e);
        let g = !b.isEmpty && !c.isEmpty && this.je != null ? this.je.indexOf(a) : -1;
        let h = g > -1 ? this.dv(g, f) : NaN;
        if (!isNaN_(h) && this.bf.c0) {
            if (!isNaN_(h)) {
                if (h < b.top + 0.1 * b.height) {
                    h = h + 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
                if (h > b.bottom - 0.1 * b.height) {
                    h = h - 0.4 * b.height;
                    b.y = h - 0.5 * b.height;
                }
            }
            this.bf.km(b, false, true);
        }
    }
    cm() {
        if (this.cf && this.cn) {
            this.a9 = this.a8();
        }
        if (this.je == null) {
            return false;
        }
        let a = this.je.count;
        if (a != this.k6) {
            let b = new AxisRangeChangedEventArgs(0, 1, 1, this.k6, a);
            this.k6 = a;
            this.g0(b);
            return true;
        }
        return false;
    }
    jh(a) {
        if (a == null) {
            return false;
        }
        let b = this.bb();
        if (b == null) {
            return false;
        }
        return b.synchronizeVertically;
    }
    g6(a) {
        super.g6(a);
        let b = this.bf != null ? this.bf.mq : Rect.empty;
        let c = this.i0;
        let d = this.iv();
        let e = this.iu();
        let f = new ScalerParams(0, b, c, this.b8, d);
        let g = this.a2.ay();
        let h = this.a2.a1();
        let i = this.a2.az();
        let j = this.a2.a0();
        let k = this.a2.e();
        let l = this.a2.f();
        let m = this.a2.g();
        this.hd();
        this.gh(g);
        this.gh(h);
        this.gh(i);
        this.gh(j);
        this.cu.clear();
        this.cv.clear();
        this.jl.clear();
        this.a2.at(this, b, c);
        if (b.isEmpty || c.isEmpty) {
            this.bo.count = 0;
            this.bn.count = 0;
            this.bm.count = 0;
        }
        if (this.bo.count == 0 && this.bn.count == 0) {
            this.a2.y();
        }
        if (this.aw != null) {
            this.aw.registerAxis(this);
        }
        if (this.itemsSource == null || this.je == null || this.je.count == 0) {
            this.bo.count = 0;
            this.bn.count = 0;
            this.bm.count = 0;
            this.a2.y();
            return;
        }
        if (!b.isEmpty && !c.isEmpty) {
            let n = this.dy(e.top, f);
            let o = this.dy(e.bottom, f);
            if (!this.b8) {
                n = Math.ceil(n);
                o = Math.floor(o);
            }
            else {
                n = Math.floor(n);
                o = Math.ceil(o);
            }
            let p = c.left;
            let q = 0;
            if (this.ag != null) {
                let r = typeCast(NumericXAxis.$, this.ag);
                if (r != null) {
                    let s = this.g9(p, q, b, c, d, c.left, c.right);
                    p = s.p0;
                    q = s.p1;
                }
            }
            this.he(g, p, c, k, true);
            this.a2.ao(q);
            let t = Math.min(n, o);
            let u = Math.max(n, o);
            let v = new LinearCategorySnapper(1, t, u, e.height, this.k2, this.categoryMode, this.d8());
            let w = Math.floor((t - 0) / v.g);
            let x = Math.ceil((u - 0) / v.g);
            if (!isNaN_(w) && !isNaN_(x)) {
                let y = truncate(w);
                let z = truncate(x);
                let aa = this.dv(0 + y * v.g, f);
                let ab = Math.abs(this.dv(v.g, f) - this.dv(0, f));
                this.at.bn = this.dv(v.g, f);
                for (let ac = y; ac <= z; ++ac) {
                    let ad = this.dv(0 + (ac + 1) * v.g, f);
                    if (aa <= e.bottom) {
                        if (ac % 2 == 0) {
                            this.gq(h, aa, ad, c);
                        }
                        this.gp(i, aa, c, l, false);
                        this.jl.add(aa);
                    }
                    if (this.categoryMode != 0 && this.j0 != 0 && this.ci) {
                        if (this.k3 > 0 && this.k3 < v.g) {
                            let ae = ab * this.k3;
                            if (!this.b8) {
                                let af = aa;
                                while (af - ae > ad) {
                                    af -= ae;
                                    if (Math.abs(af - ad) < 0.0001) {
                                        break;
                                    }
                                    this.gp(j, af, c, m, false);
                                }
                            }
                            else {
                                let ag = aa;
                                while (ag + ae < ad) {
                                    ag += ae;
                                    if (Math.abs(ag - ad) < 0.0001) {
                                        break;
                                    }
                                    this.gp(j, ag, c, m, false);
                                }
                            }
                            this.k0 = this.k3;
                        }
                        else {
                            for (let ah = 0; ah < truncate(v.g); ah++) {
                                for (let ai = 0; ai < this.j0; ai++) {
                                    let aj = this.getGroupCenter(ai, b, c, d);
                                    if (!this.b8) {
                                        aj = -aj;
                                    }
                                    let ak = this.dv(ah + ac * v.g, f) + aj;
                                    this.gp(j, ak, c, m, false);
                                }
                            }
                            this.k0 = 0.5;
                        }
                    }
                    let al = aa;
                    if (this.categoryMode != 0) {
                        let am = this.dv(ac * v.g + 1, f);
                        al = (aa + am) / 2;
                    }
                    if (al <= e.bottom && al >= e.top) {
                        let an = 0;
                        if (v.g >= 1) {
                            an = ac * truncate(Math.floor(v.g));
                        }
                        else {
                            if ((ac * v.g) * 2 % 2 == 0) {
                                an = truncate(Math.floor(ac * v.g));
                            }
                            else {
                                an = -1;
                            }
                        }
                        if (this.je != null && an < this.je.count && an >= 0) {
                            let ao = this.je.item(an);
                            let ap = this.e5(ao);
                            if (!isNaN_(al) && !isInfinity(al) && ap != null) {
                                if ((typeof ap === 'string') && Base.equalsStatic(ap, "")) {
                                }
                                else {
                                    this.cu.add1(ap);
                                    this.cv.add(new LabelPosition(al));
                                }
                            }
                        }
                    }
                    aa = ad;
                }
            }
            this.ky = v.g;
            if ((this.aw == null || this.aw.visibility == 0) && this.ag != null) {
                if (this.aw != null && (this.aw.location == 6 || this.aw.location == 7)) {
                    this.bf.ht();
                }
            }
            this.a2.au(this.cu, this.cv);
            this.kl();
        }
    }
    get_az() {
        return 1;
    }
    get az() {
        return this.get_az();
    }
    get isVertical() {
        return this.ce;
    }
    j$c(a, b) {
        return this.dy.apply(this, arguments);
    }
    j$b(a, b) {
        return this.dv.apply(this, arguments);
    }
    j$d(a, b, c, d, e) {
        this.gl.apply(this, arguments);
    }
    j$e(a, b, c, d) {
        this.gm.apply(this, arguments);
    }
    j$f(a, b, c, d) {
        this.gn.apply(this, arguments);
    }
    get j$a() {
        return this.b8;
    }
}
CategoryYAxis.$t = markType(CategoryYAxis, 'CategoryYAxis', CategoryAxisBase.$);
CategoryYAxis.le = DependencyProperty.i("Interval", Number_$type, CategoryYAxis.$, new PropertyMetadata(2, NaN, (a, b) => {
    a.gz("Interval", b.oldValue, b.newValue);
    a.g5(false);
}));
CategoryYAxis.lf = DependencyProperty.i("MinorInterval", Number_$type, CategoryYAxis.$, new PropertyMetadata(2, NaN, (a, b) => {
    (typeCast(CategoryYAxis.$, a)).gz("MinorInterval", b.oldValue, b.newValue);
    (typeCast(CategoryYAxis.$, a)).g5(false);
}));
/**
 * @hidden
 */
export class CategoryYAxisView extends CategoryAxisBaseView {
    constructor(a) {
        super(a);
        this.bg = null;
        this.bg = a;
    }
}
CategoryYAxisView.$t = markType(CategoryYAxisView, 'CategoryYAxisView', CategoryAxisBaseView.$);
