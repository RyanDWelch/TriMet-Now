/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { typeCast, Array_$type, runOn, markType } from "igniteui-react-core/ES2015/type";
import { ISortingAxis_$type } from "./ISortingAxis";
import { List$1 } from "igniteui-react-core/ES2015/List$1";
import { Path } from "igniteui-react-core/ES2015/Path";
import { ScalerParams } from "./ScalerParams";
import { intDivide, isNaN_ } from "igniteui-react-core/ES2015/number";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
/**
 * @hidden
 */
export class StepAreaSeries extends HorizontalAnchoredCategorySeries {
    constructor() {
        super();
        this.qg = null;
        this.qg = new CategoryLineRasterizer();
        this.ab = StepAreaSeries.$;
    }
    bf() {
        return new StepAreaSeriesView(this);
    }
    getHostReferenceValue() {
        return this.eh();
    }
    it(a) {
        super.it(a);
        this.qh = a;
    }
    get_ck() {
        return true;
    }
    preferredCategoryMode(a) {
        return typeCast(ISortingAxis_$type, a) !== null ? 0 : 1;
    }
    hv(a, b) {
        super.hv(a, b);
        let c = b;
        c.c7();
    }
    qi(a, b, c, d, e) {
        if (b) {
            if (e) {
                if ((a & 1) == 0 || ((intDivide(a, 2)) + 1) >= c.f.count) {
                    return c.f._inner[(intDivide(a, 2))][0];
                }
                return c.f._inner[(intDivide(a, 2)) + 1][0];
            }
            return c.f._inner[(intDivide(a, 2))][0] + ((a & 1) == 1 ? -d : d);
        }
        if (e) {
            if ((a & 1) == 0 || ((intDivide(a, 2)) + 1) >= c.f.count) {
                return c.f._inner[(intDivide(a, 2))][0];
            }
            return c.f._inner[(intDivide(a, 2)) + 1][0];
        }
        return c.f._inner[(intDivide(a, 2))][0] + ((a & 1) == 0 ? -d : d);
    }
    nf() {
        return 1;
    }
    ef(a, b, c, d, e, f, g, h) {
        let i = NaN;
        if (c >= 0 && c < b.count) {
            i = b.item(c);
        }
        let j = NaN;
        if (d >= 0 && d < b.count) {
            j = b.item(d);
        }
        if (f == 0) {
            return j;
        }
        if (e == b.count - 1) {
            return i;
        }
        if (isNaN_(j) && g != 0 && a <= 0.5 && !h) {
            return i;
        }
        if (isNaN_(i) && g != 0 && a >= 0.5 && !h) {
            return j;
        }
        if (a > 0.5) {
            return j;
        }
        return i;
    }
    bd() {
        if (this.be == 0) {
            return 2;
        }
        else {
            return super.bd();
        }
    }
    on(a, b) {
        super.on(a, b);
        let c = b.bs;
        let d = b.br;
        let e = this.getEffectiveViewport1(b);
        let f = typeCast(ISortingAxis_$type, this.px) != null;
        let g = this.px != null ? 0.5 * this.px.getCategorySize(c, d, e) : 0;
        if (this.px != null && this.px.b8) {
            g = -g;
        }
        let h = a.f.count * 2;
        let i = new List$1(Array_$type, 2, h);
        this.nd.x(this, this.ny(), this.px, runOn(this, this.mz), this.n6(b), this.n7(b));
        let j = false;
        let k = this.nd.c;
        if (k != null) {
            j = true;
        }
        for (let l = 0; l < h; l++) {
            let m = new Array(4);
            m[0] = this.qi(l, false, a, g, f);
            m[1] = a.f._inner[(intDivide(l, 2))][1];
            m[2] = this.qi(l, true, a, g, f);
            m[3] = a.f._inner[(intDivide(l, 2))][2];
            i.add(m);
        }
        let n = this.ne.cn.d;
        if (j) {
            let o = new ScalerParams(0, b.bs, b.br, this.px.b8, e);
            this.oj(i, -1, this.valueColumn.count, this.px, o, b.n);
        }
        let p = typeCast(StepAreaSeriesView.$, b);
        let q = p.dj;
        let r = p.dl;
        let s = p.df;
        let t = p.dh;
        this.nd.ae(q, true, false, true, true);
        this.nd.ae(r, true, false, true, true);
        this.nd.ae(s, false, true, false, false);
        this.nd.ae(t, false, true, false, false);
        if (b.cr(a)) {
            p.c9(h, i, false, n, this.eu, (u, v, w, x, y) => this.ph(u, 2 * a.f.count, b), 1, this.ow(i, i.count - 1, b.br, b.bs, true));
            b.cu(a);
        }
        let u = this.fetchYAxis();
        p.df._opacity = this.d6;
        p.dh._opacity = 0.5 * this.d6;
    }
    get currentCategoryMode() {
        return this.preferredCategoryMode(this.px);
    }
    get useHighMarkerFidelity() {
        return this.n1;
    }
}
StepAreaSeries.$t = markType(StepAreaSeries, 'StepAreaSeries', HorizontalAnchoredCategorySeries.$, [IIsCategoryBased_$type]);
/**
 * @hidden
 */
export class StepAreaSeriesView extends AnchoredCategorySeriesView {
    constructor(a) {
        super(a);
        this.c6 = null;
        this.de = new Path();
        this.di = new Path();
        this.dg = new Path();
        this.dk = new Path();
        this.da = new Path();
        this.dc = new Path();
        this.db = new Path();
        this.dd = new Path();
        this.c6 = a;
    }
    ap() {
        super.ap();
        if (!this.n) {
            this.e.bj = 1;
        }
    }
    get df() {
        return this.de;
    }
    get dj() {
        return this.di;
    }
    get dh() {
        return this.dg;
    }
    get dl() {
        return this.dk;
    }
    c7() {
        this.de.aj = null;
        this.dg.aj = null;
        this.di.aj = null;
        this.dk.aj = null;
        this.an();
    }
    c8(a, b, c, d, e, f, g) {
        this.c8(a, b, c, d, e, f, g);
    }
    c9(a, b, c, d, e, f, g, h) {
        this.c6.qg.a = typeCast(ISortingAxis_$type, this.cp.fetchXAxis()) !== null ? true : false;
        this.c6.qg.j(this.de, this.di, this.dg, this.dk, a, b, c, d, e, f, g, h);
        this.an();
    }
    a9() {
        super.a9();
        this.da.aj = this.de.aj;
        this.dc.aj = this.di.aj;
        this.db.aj = this.dg.aj;
        this.dd.aj = this.dk.aj;
        let a = this.bl();
        this.da._fill = a;
        this.da._opacity = 1;
        this.db._fill = a;
        this.db._opacity = 1;
        this.dc._stroke = a;
        this.dc.ac = this.e.ey + 3;
        this.dd._stroke = a;
        this.dd.ac = this.e.ey + 3;
    }
    a3(a, b) {
        super.a3(a, b);
        if (b) {
            a.s(this.da);
            a.s(this.db);
            a.s(this.dc);
            a.s(this.dd);
        }
        else {
            a.s(this.de);
            a.s(this.dg);
            a.s(this.di);
            a.s(this.dk);
        }
    }
    ai(a) {
        super.ai(a);
        this.e.a2.exportPathData(a, this.di, "lowerShape", ["Lower"]);
        this.e.a2.exportPathData(a, this.dk, "upperShape", ["Upper", "Main"]);
        this.e.a2.exportPathData(a, this.dg, "translucentShape", ["Translucent"]);
        this.e.a2.exportPathData(a, this.de, "fillShape", ["Fill"]);
    }
}
StepAreaSeriesView.$t = markType(StepAreaSeriesView, 'StepAreaSeriesView', AnchoredCategorySeriesView.$);
