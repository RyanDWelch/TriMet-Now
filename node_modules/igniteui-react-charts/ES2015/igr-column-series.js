import { ConsolidatedItemsPosition_$type } from "./ConsolidatedItemsPosition";
import { IgrHorizontalAnchoredCategorySeries } from "./igr-horizontal-anchored-category-series";
import { ColumnSeries } from "./ColumnSeries";
import { ensureEnum, toPoint, fromRect } from "igniteui-react-core/ES2015/componentUtil";
/**
 * Represents a IgxDataChartComponent column series.
 * Compare values across categories by using vertical rectangles.Use it when the order of categories is not important or for displaying
 * item counts such as a histogram.
*/
export class IgrColumnSeries extends IgrHorizontalAnchoredCategorySeries {
    createImplementation() {
        return new ColumnSeries();
    }
    /**
                                 * @hidden
                                 */
    get i() {
        return this._implementation;
    }
    constructor(props) {
        super(props);
    }
    /**
     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
    */
    get radiusX() {
        return this.i.qk;
    }
    set radiusX(v) {
        this.i.qk = +v;
    }
    /**
     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
    */
    get radiusY() {
        return this.i.ql;
    }
    set radiusY(v) {
        this.i.ql = +v;
    }
    /**
     * The positioning logic to use for columns which have been consolidated into a single visual element.
    */
    get consolidatedColumnVerticalPosition() {
        return this.i.qi;
    }
    set consolidatedColumnVerticalPosition(v) {
        this.i.qi = ensureEnum(ConsolidatedItemsPosition_$type, v);
    }
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    */
    getSeriesValueBoundingBox(world) {
        let iv = this.i.lt(toPoint(world));
        return fromRect(iv);
    }
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    getItemSpan() {
        let iv = this.i.eg();
        return (iv);
    }
}
