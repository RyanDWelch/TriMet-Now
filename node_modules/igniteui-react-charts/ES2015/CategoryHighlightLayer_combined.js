/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { CategoryHighlightLayerFrame } from "./CategoryHighlightLayerFrame";
import { Type, Base, Number_$type, typeCast, fromEnum, Point_$type, markType, runOn } from "igniteui-react-core/ES2015/type";
import { XamDataChart } from "./XamDataChart";
import { CategoryHighlightFrameRect } from "./CategoryHighlightFrameRect";
import { List$1 } from "igniteui-react-core/ES2015/List$1";
import { Pool$1 } from "igniteui-react-core/ES2015/Pool$1";
import { Rectangle } from "igniteui-react-core/ES2015/Rectangle";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
import { isNaN_, truncate } from "igniteui-react-core/ES2015/number";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { BrushUtil } from "igniteui-react-core/ES2015/BrushUtil";
import { Color } from "igniteui-react-core/ES2015/Color";
/**
 * @hidden
 */
export class CategoryHighlightLayer extends AnnotationLayer {
    constructor() {
        super();
        let a = new CategoryHighlightLayerFrame();
        let b = new CategoryHighlightLayerFrame();
        let c = new CategoryHighlightLayerFrame();
        let d = this.fi / 1000;
        this.l1 = a;
        this.l0 = b;
        this.l2 = c;
        this.ab = CategoryHighlightLayer.$;
    }
    bf() {
        return new CategoryHighlightLayerView(this);
    }
    it(a) {
        super.it(a);
        this.m4 = a;
    }
    get m7() {
        return this.c(CategoryHighlightLayer.ne);
    }
    set m7(a) {
        this.h(CategoryHighlightLayer.ne, a);
    }
    mj(a, b) {
        if (this.m3 == null || this.m3 == a) {
            if (!this.aq.c) {
                this.jc(b);
            }
        }
    }
    m5(a) {
        return a != null && a.cd();
    }
    mm(a, b) {
        super.mm(a, b);
        let c = a;
        c.g.clear();
        let d = this.m6;
        if (isNaN_(this.m0.x) && isNaN_(this.m0.y)) {
            return;
        }
        if (this.m3 != null) {
            if (this.m5(this.m3)) {
                this.nc(this.m3, c, d);
            }
        }
        else {
            if (typeCast(XamDataChart.$, this.bs) !== null) {
                let e = this.bs;
                for (let f of fromEnum(e.axes)) {
                    if (typeCast(CategoryAxisBase.$, f) !== null && this.m5(f)) {
                        this.nc(f, c, d);
                    }
                }
            }
        }
    }
    nc(a, b, c) {
        if (this.bi == null || this.bi.bs.isEmpty || this.bi.br.isEmpty) {
            return;
        }
        let d = this.m0.x;
        if (a.ce && isNaN_(d)) {
            d = 0;
        }
        d = this.bi.br.left + this.bi.br.width * (d - this.bi.bs.left) / this.bi.bs.width;
        let e = this.m0.y;
        if (!a.ce && isNaN_(e)) {
            e = 0;
        }
        e = this.bi.br.top + this.bi.br.height * (e - this.bi.bs.top) / this.bi.bs.height;
        let f = a.kt({ $type: Point_$type, x: d, y: e }, c, this.m7);
        this.nb(f, b, a);
    }
    nb(a, b, c) {
        let d = new CategoryHighlightFrameRect();
        d.b = a.left;
        d.e = a.top;
        d.c = a.right;
        d.a = a.bottom;
        d.g = this.my();
        d.h = this.mz();
        if (d.g == null) {
            d.g = this.m4.b9(c.ih);
        }
        if (d.h == null) {
            d.h = this.m4.b9(c.ih);
        }
        d.d = this.ey;
        d.f = Base.getHashCodeStatic(c);
        if (!a.isEmpty) {
            b.g.addItem(d.f, d);
        }
    }
    mp(a, b) {
        super.mp(a, b);
        let c = this.m4.b2;
        let d = a;
        let e = 0;
        for (let f of fromEnum(d.g.values)) {
            let g = c.item(e);
            this.nd(f, g);
            e++;
        }
        c.count = e;
    }
    c8() {
        return true;
    }
    nd(a, b) {
        if (isNaN_(a.b) || isNaN_(a.e) || isNaN_(a.a) || isNaN_(a.c) || isNaN_(a.d)) {
            b._visibility = 1;
            return;
        }
        this.m4.b4(b, a.b, a.e, a.c - a.b, a.a - a.e);
        b._fill = a.g;
        b._stroke = a.h;
        b.ac = a.d;
        if (this.la != null) {
            b.ai = this.la;
        }
        else {
            b.ai = null;
        }
        b.ad = this.lb;
    }
    iy(a, b, c, d) {
        super.iy(a, b, c, d);
        switch (b) {
            case CategoryHighlightLayer.$$p[0]:
                this.jc(true);
                break;
            case CategoryHighlightLayer.$$p[1]:
                this.jc(true);
                break;
        }
    }
}
CategoryHighlightLayer.$t = markType(CategoryHighlightLayer, 'CategoryHighlightLayer', AnnotationLayer.$);
CategoryHighlightLayer.ne = DependencyProperty.i("BAndHighlightWidth", Number_$type, CategoryHighlightLayer.$, new PropertyMetadata(2, 10, (a, b) => a.raisePropertyChanged("BAndHighlightWidth", b.oldValue, b.newValue)));
Type.dep(DependencyProperty, PropertyMetadata, CategoryHighlightLayer, 'raisePropertyChanged', ['TargetAxis:m3:nf', [CategoryAxisBase.$, null], 'UseInterpolation:m6:ng', [0, false]]);
/**
 * @hidden
 */
export class CategoryHighlightLayerView extends AnnotationLayerView {
    constructor(a) {
        super(a);
        this.b1 = null;
        this.b2 = null;
        this.b3 = null;
        this.b1 = a;
        this.b3 = new List$1(Rectangle.$, 0);
    }
    ap() {
        super.ap();
        this.b2 = ((() => {
            let $ret = new Pool$1(Rectangle.$);
            $ret.create = runOn(this, this.ca);
            $ret.activate = runOn(this, this.b5);
            $ret.disactivate = runOn(this, this.b7);
            $ret.destroy = runOn(this, this.b6);
            return $ret;
        })());
    }
    ca() {
        let a = new Rectangle();
        a.ab = false;
        this.b3.add(a);
        return a;
    }
    b5(a) {
        a._visibility = 0;
    }
    b7(a) {
        a._visibility = 1;
    }
    b6(a) {
        this.b3.remove(a);
    }
    b8(a) {
        if (a == null) {
            return a;
        }
        return BrushUtil.h(a, 0.1);
    }
    b9(a) {
        if (a != null) {
            let b = BrushUtil.h(a, 0.3);
            if (b.isGradient) {
                let c = b;
                if (c.gradientStops != null) {
                    for (let d = 0; d < c.gradientStops.length; d++) {
                        let e = c.gradientStops[d];
                        e.color = Color.u(truncate(Math.round((e.color.l) * 0.2)), e.color.o, e.color.n, e.color.m);
                        e.color = e.color;
                    }
                }
            }
            else {
                b.color = Color.u(truncate(Math.round((b.color.l) * 0.2)), b.color.o, b.color.n, b.color.m);
                b.color = b.color;
            }
            return b;
        }
        else {
            return null;
        }
    }
    b4(a, b, c, d, e) {
        a._visibility = 0;
        a.n = b;
        a.o = c;
        a.width = d;
        a.height = e;
    }
    a3(a, b) {
        super.a3(a, b);
        if (a.d && !b) {
            for (let c = 0; c < this.b3.count; c++) {
                let d = this.b3._inner[c];
                if (d._visibility == 0) {
                    a.v(d);
                }
            }
        }
    }
    ai(a) {
        super.ai(a);
        for (let b = 0; b < this.b3.count; b++) {
            this.e.a2.exportRectangleData(a, this.b3._inner[b], "cihRect", ["Main", "CategoryItem"]);
        }
    }
}
CategoryHighlightLayerView.$t = markType(CategoryHighlightLayerView, 'CategoryHighlightLayerView', AnnotationLayerView.$);
