/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Control } from "igniteui-react-core/ES2015/Control";
import { INotifyPropertyChanged_$type, Type, Base, EventArgs, PropertyChangedEventArgs, IEnumerable_$type, callStaticConstructors, Point_$type, delegateCombine, runOn, delegateRemove, fromEnum, fromEn, typeCast, Boolean_$type, Number_$type, typeGetValue, enumGetBox, toEnum, String_$type, markType, PointUtil, TypeRegistrar, Delegate_$type } from "igniteui-react-core/ES2015/type";
import { ILegendOwner_$type } from "igniteui-react-core/ES2015/ILegendOwner";
import { IInternalLegendOwner_$type } from "igniteui-react-core/ES2015/IInternalLegendOwner";
import { SRProvider } from "igniteui-react-core/ES2015/SRProvider";
import { DVContainer } from "igniteui-react-core/ES2015/DVContainer";
import { DoubleAnimator } from "igniteui-react-core/ES2015/DoubleAnimator";
import { IChartLegend_$type } from "igniteui-react-core/ES2015/IChartLegend";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { DependencyObject } from "igniteui-react-core/ES2015/DependencyObject";
import { Rect } from "igniteui-react-core/ES2015/Rect";
import { ChartHitTestMode_$type } from "./ChartHitTestMode";
import { InteractionState_$type } from "igniteui-react-core/ES2015/InteractionState";
import { WindowResponse_$type } from "./WindowResponse";
import { Visibility_$type } from "igniteui-react-core/ES2015/Visibility";
import { SeriesViewerComponentsFromView } from "./SeriesViewerComponentsFromView";
import { Brush } from "igniteui-react-core/ES2015/Brush";
import { ModifierKeys_$type } from "igniteui-react-core/ES2015/ModifierKeys";
import { DataTemplate } from "igniteui-react-core/ES2015/DataTemplate";
import { HorizontalAlignment_$type } from "igniteui-react-core/ES2015/HorizontalAlignment";
import { CanvasRenderScheduler } from "igniteui-react-core/ES2015/CanvasRenderScheduler";
import { SyncSettings } from "./SyncSettings";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
import { SeriesViewerComponentsForView } from "./SeriesViewerComponentsForView";
import { Dictionary$2 } from "igniteui-react-core/ES2015/Dictionary$2";
import { PropertyUpdatedEventArgs } from "igniteui-react-core/ES2015/PropertyUpdatedEventArgs";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core/ES2015/NotifyCollectionChangedEventArgs";
import { ObservableCollection$1 } from "igniteui-react-core/ES2015/ObservableCollection$1";
import { Size } from "igniteui-react-core/ES2015/Size";
import { List$1 } from "igniteui-react-core/ES2015/List$1";
import { FrameworkElement } from "igniteui-react-core/ES2015/FrameworkElement";
import { MouseEventArgs } from "igniteui-react-core/ES2015/MouseEventArgs";
import { MouseButtonEventArgs } from "igniteui-react-core/ES2015/MouseButtonEventArgs";
import { RectChangedEventArgs } from "igniteui-react-core/ES2015/RectChangedEventArgs";
import { MathUtil } from "igniteui-react-core/ES2015/MathUtil";
import { DeviceUtils } from "igniteui-react-core/ES2015/DeviceUtils";
import { Thickness } from "igniteui-react-core/ES2015/Thickness";
import { AxisTitlePosition_$type } from "./AxisTitlePosition";
import { IFastItemsSource_$type } from "igniteui-react-core/ES2015/IFastItemsSource";
import { CoercionInfo } from "./CoercionInfo";
import { Tuple$2 } from "igniteui-react-core/ES2015/Tuple$2";
import { FastItemsSource } from "igniteui-react-core/ES2015/FastItemsSource";
import { FontUtil } from "igniteui-react-core/ES2015/FontUtil";
import { ChartContentType_$type } from "./ChartContentType";
import { defaultDVDateParse, dateNow } from "igniteui-react-core/ES2015/date";
import { isNaN_, isInfinity, logBase, log10, truncate } from "igniteui-react-core/ES2015/number";
import { stringIsNullOrEmpty, stringEmpty } from "igniteui-react-core/ES2015/string";
import { ISchedulableRender_$type } from "igniteui-react-core/ES2015/ISchedulableRender";
import { Rectangle } from "igniteui-react-core/ES2015/Rectangle";
import { Path } from "igniteui-react-core/ES2015/Path";
import { Line } from "igniteui-react-core/ES2015/Line";
import { RenderingContext } from "igniteui-react-core/ES2015/RenderingContext";
import { TextBlock } from "igniteui-react-core/ES2015/TextBlock";
import { ITileZoomTile_$type } from "./ITileZoomTile";
import { RenderSurface } from "./RenderSurface";
import { PathFigureCollection } from "igniteui-react-core/ES2015/PathFigureCollection";
import { PathFigure } from "igniteui-react-core/ES2015/PathFigure";
import { LineSegment } from "igniteui-react-core/ES2015/LineSegment";
import { PathGeometry } from "igniteui-react-core/ES2015/PathGeometry";
import { GeometryGroup } from "igniteui-react-core/ES2015/GeometryGroup";
import { DataContext } from "igniteui-react-core/ES2015/DataContext";
import { LabelPanelsArrangeState } from "./LabelPanelsArrangeState";
import { MarkerTemplates } from "./MarkerTemplates";
import { DataTemplateRenderInfo } from "igniteui-react-core/ES2015/DataTemplateRenderInfo";
import { DataTemplateMeasureInfo } from "igniteui-react-core/ES2015/DataTemplateMeasureInfo";
import { AxisLabelsLocation_$type } from "./AxisLabelsLocation";
import { IProvidesViewport_$type } from "./IProvidesViewport";
import { ArgumentNullException } from "igniteui-react-core/ES2015/ArgumentNullException";
import { DomWrapper_$type } from "igniteui-react-core/ES2015/dom";
import { PointerTooltipStyle } from "./PointerTooltipStyle";
import { CanvasViewRenderer } from "igniteui-react-core/ES2015/CanvasViewRenderer";
import { BrushCollection } from "igniteui-react-core/ES2015/BrushCollection";
import { DefaultPaletteInfo } from "./DefaultPaletteInfo";
import { CssGradientUtil } from "igniteui-react-core/ES2015/CssGradientUtil";
import { AxisRange } from "./AxisRange";
import { LinearNumericSnapper } from "./LinearNumericSnapper";
import { AxisAnnotationCollection } from "./AxisAnnotationCollection";
import { VerticalAlignment_$type } from "igniteui-react-core/ES2015/VerticalAlignment";
import { Canvas } from "igniteui-react-core/ES2015/Canvas";
import { IFastItemsSourceProvider_$type } from "igniteui-react-core/ES2015/IFastItemsSourceProvider";
import { DoubleCollection } from "igniteui-react-core/ES2015/DoubleCollection";
import { LabelPosition } from "./LabelPosition";
import { LabelFontHeuristics } from "./LabelFontHeuristics";
import { Pool$1 } from "igniteui-react-core/ES2015/Pool$1";
import { AxisComponentsFromView } from "./AxisComponentsFromView";
import { FastReflectionHelper } from "igniteui-react-core/ES2015/FastReflectionHelper";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { RectangleGeometry } from "igniteui-react-core/ES2015/RectangleGeometry";
import { PathRenderingInfo } from "./PathRenderingInfo";
import { LineGeometry } from "igniteui-react-core/ES2015/LineGeometry";
import { BrushUtilCore } from "igniteui-react-core/ES2015/BrushUtilCore";
import { RenderRequestedEventArgs } from "./RenderRequestedEventArgs";
import { ScalerParams } from "./ScalerParams";
import { CategoryMode_$type } from "./CategoryMode";
import { GridMode_$type } from "./GridMode";
import { Panel } from "igniteui-react-core/ES2015/Panel";
import { RectUtil } from "igniteui-react-core/ES2015/RectUtil";
import { TickmarkValues } from "./TickmarkValues";
import { RotateTransform } from "igniteui-react-core/ES2015/RotateTransform";
import { TransformGroup } from "igniteui-react-core/ES2015/TransformGroup";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { AngleSimplifier } from "igniteui-react-core/ES2015/AngleSimplifier";
import { TranslateTransform } from "igniteui-react-core/ES2015/TranslateTransform";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { LogarithmicTickmarkValues } from "./LogarithmicTickmarkValues";
import { LinearTickmarkValues } from "./LinearTickmarkValues";
import { CategoryAxisRenderingParameters } from "./CategoryAxisRenderingParameters";
import { TickmarkValuesInitializationParameters } from "./TickmarkValuesInitializationParameters";
import { NumberAbbreviatorFactory } from "./NumberAbbreviatorFactory";
import { HighlightingState } from "./HighlightingState";
import { Marker } from "./Marker";
import { ContentControl } from "igniteui-react-core/ES2015/ContentControl";
import { ILegendSeries_$type } from "igniteui-react-core/ES2015/ILegendSeries";
import { ILegendTemplateProvider_$type } from "igniteui-react-core/ES2015/ILegendTemplateProvider";
import { PenLineCap_$type } from "igniteui-react-core/ES2015/PenLineCap";
import { Color } from "igniteui-react-core/ES2015/Color";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { SeriesHitTestMode_$type } from "./SeriesHitTestMode";
import { SeriesComponentsForView } from "./SeriesComponentsForView";
import { Binding } from "igniteui-react-core/ES2015/Binding";
import { SeriesComponentsFromView } from "./SeriesComponentsFromView";
import { MarkerType_$type } from "./MarkerType";
import { Style } from "igniteui-react-core/ES2015/Style";
import { FastItemsSourceReference } from "igniteui-react-core/ES2015/FastItemsSourceReference";
import { stringFormat } from "igniteui-react-core/ES2015/stringExtended";
import { EasingFunctions } from "igniteui-react-core/ES2015/EasingFunctions";
import { DataTemplatePassInfo } from "igniteui-react-core/ES2015/DataTemplatePassInfo";
/**
 * @hidden
 */
export class SeriesViewer extends Control {
    constructor() {
        super();
        this._widget = null;
        this.bn = null;
        this.by = null;
        this.a0 = null;
        this.bh = null;
        this.a3 = new SeriesCollection();
        this._skipDataCleanup = false;
        this.bo = null;
        this.al = null;
        this.mh = null;
        this.propertyChanged = null;
        this.propertyUpdated = null;
        this.seriesCursorMouseMove = null;
        this.seriesMouseLeftButtonDown = null;
        this.seriesMouseLeftButtonUp = null;
        this.seriesMouseMove = null;
        this.seriesMouseEnter = null;
        this.seriesMouseLeave = null;
        this.mp = Rect.empty;
        this.mn = Rect.empty;
        this.b1 = true;
        this.mm = null;
        this.cb = false;
        this.ez = 30;
        this.a5 = new SeriesViewerComponentsForView();
        this.an = 0;
        this.am = 1;
        this.seriesAnimating = null;
        this.b3 = false;
        this.bf = 0;
        this.b7 = false;
        this.ch = false;
        this.b2 = false;
        this.g0 = null;
        this.b8 = false;
        this.windowRectChanged = null;
        this.sizeChanged = null;
        this.cn = false;
        this.actualWindowRectChanged = null;
        this.gridAreaRectChanged = null;
        this.cj = false;
        this._syncChannel = null;
        this.a7 = null;
        this.cm = false;
        this.di = false;
        this.e1 = 0;
        this.b9 = false;
        this.dg = false;
        this.mo = Rect.empty;
        this.dn = new Date();
        this.dk = false;
        this.refreshCompleted = null;
        this.fb = null;
        this.fa = null;
        this.l3 = null;
        this.l2 = null;
        this.d7 = NaN;
        this.d5 = NaN;
        this.d6 = NaN;
        this.d4 = NaN;
        this.d3 = NaN;
        this.d1 = NaN;
        this.d2 = NaN;
        this.d0 = NaN;
        this.e8 = null;
        this.ah = null;
        this.ai = null;
        this.ag = null;
        this.b6 = false;
        this.b0 = false;
        this._syncSettings = null;
        this.destroyed = false;
        this.e7 = null;
        this.dl = new Dictionary$2(String_$type, Base.$, 0);
        this.c6 = false;
        this.d8 = NaN;
        this.dx = NaN;
        this.dz = NaN;
        this.dv = NaN;
        this.du = 20;
        this.dt = NaN;
        this.b4 = true;
        this.dy = NaN;
        this.dw = NaN;
        this.e9 = null;
        this.dq = 1;
        this.dp = NaN;
        this.ml = null;
        this.dr = 0;
        this.ds = 0;
        this.kx = null;
        this.ar = null;
        this.cq = false;
        this.cr = false;
        this.co = false;
        this.b5 = false;
        this.e0 = 0;
        this.cf = false;
        this.ct = false;
        this.seriesDataUpdated = null;
        DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
        DVContainer.instance.registerIfLoaded("InteractivityFactoryManager");
        DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
        this.ml = Rect.empty;
        this.mh = { $type: Point_$type, x: NaN, y: NaN };
        this.dn = dateNow();
        this.cq = false;
        this.cr = false;
        this.ah = new CanvasRenderScheduler();
        this.ai = new CanvasRenderScheduler();
        this.ag = new CanvasRenderScheduler();
        SeriesViewer.m0 = new Rect(0, 0, 0, 1, 1);
        this.syncSettings = ((() => {
            let $ret = new SyncSettings();
            $ret.synchronizeHorizontally = true;
            $ret.synchronizeVertically = true;
            return $ret;
        })());
        this.bn = this.bm();
        this.i1(this.bn);
        this.bn.cv();
        this.kb();
        this.hq();
        this.actualSyncLink = new SyncLink();
        this.ki(null, this.actualSyncLink);
        this.al = new ChartContentManager(this);
        this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.jd(a, b.propertyName, b.oldValue, b.newValue));
        let a = this.series;
        a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.j2));
        let b = this.series;
        b.collectionResetting = delegateCombine(b.collectionResetting, runOn(this, this.j3));
        this.bo = new DoubleAnimator(0, 1, this.e5);
        let c = this.bo;
        c.propertyChanged = delegateCombine(c.propertyChanged, runOn(this, this.hp));
        this.bn.bu();
        this.hs();
        this.hr();
    }
    get widget() {
        return this._widget;
    }
    set widget(a) {
        this._widget = a;
    }
    static staticInit() {
        SeriesViewer.m0 = new Rect(0, 0, 0, 1, 1);
    }
    get bz() {
        if (this.by == null) {
            this.by = new SRProvider(this.bn.i.af);
        }
        return this.by;
    }
    get a1() {
        if (this.a0 == null) {
            this.a0 = DVContainer.instance.createInstance(ISeriesViewerInteractionManager_$type, () => this.bz.n);
        }
        return this.a0;
    }
    get cv() {
        return DVContainer.instance.checkLoaded("InteractivityFactoryManager");
    }
    hq() {
        if (this.bh != null && this.bi == null) {
            let a = this.bi;
            a.thumbnailSizeChanged = delegateRemove(a.thumbnailSizeChanged, runOn(this, this.i9));
        }
        if (this.bi != null) {
            let b = this.bi;
            b.thumbnailSizeChanged = delegateCombine(b.thumbnailSizeChanged, runOn(this, this.i9));
        }
        if (this.e9 != null) {
            this.bi.backgroundImageUri = this.e9;
        }
        if (this.bi != null) {
            this.bi.initializeScalingRatio(this.ea);
        }
        if (this.bh == null && this.bi != null) {
            this.h2();
        }
        this.bh = this.bi;
    }
    i9(a, b) {
        this.bi.surfaceIsDirty = true;
        for (let c of fromEnum(this.series)) {
            c.dl = true;
        }
    }
    hr() {
        this.bn.ch();
        if (this.bi != null) {
            this.bi.initializeScalingRatio(this.ea);
        }
    }
    get series() {
        return this.a3;
    }
    j2(a, b) {
        this.cf = this.cl();
        if (b.oldItems != null) {
            for (let c of fromEn(b.oldItems)) {
                c.bn = null;
                c.bs = null;
                this.jw(c);
                this.bn.dn(c);
            }
        }
        if (b.newItems != null) {
            for (let d of fromEn(b.newItems)) {
                if (!this.bn.ao(d)) {
                    this.kc(d);
                    this.bn.bm(d);
                    d.bs = this;
                    d.bn = this.actualSyncLink;
                    d.jq();
                }
            }
        }
        this.h1();
        this.ig();
    }
    get skipDataCleanup() {
        return this._skipDataCleanup;
    }
    set skipDataCleanup(a) {
        this._skipDataCleanup = a;
    }
    jw(a) {
        if (!this.skipDataCleanup) {
            if (typeCast(Series.$, a) !== null) {
                a.itemsSource = null;
            }
            else if (typeCast(CategoryAxisBase.$, a) !== null) {
                a.itemsSource = null;
            }
        }
        this.jy(a.name, true);
    }
    j3(a, b) {
        this.cf = this.cl();
        for (let c of fromEnum(this.series)) {
            c.bn = null;
            c.bs = null;
            this.jw(c);
            this.bn.dn(c);
        }
    }
    hu(a, b, c, d) {
        let e = this.m3;
        let f = e.width;
        let g = e.height;
        let h = f / g;
        let i = a / b;
        if (isNaN_(h)) {
            return {
                p0: a,
                p1: b
            };
        }
        if (isNaN_(i) || c || d || Math.abs(h - i) > 0.0001) {
            if (c && d) {
                if (a > b) {
                    b = a / h;
                }
                else {
                    a = b * h;
                }
            }
            else if (c) {
                b = a / h;
            }
            else {
                a = b * h;
            }
        }
        if (b > 1) {
            let j = 1 / b;
            b = 1;
            a = a * j;
        }
        if (a > 1) {
            let k = 1 / a;
            a = 1;
            b = b * k;
        }
        return {
            p0: a,
            p1: b
        };
    }
    cl() {
        return false;
    }
    get cs() {
        return this.a0 != null;
    }
    get az() {
        return this.a1.f$b;
    }
    hp(a, b) {
        this.ke(this.bo.o);
    }
    ke(a) {
        let b = this.az.tick(a);
        if (a == 1 && b && this.bo.r > 0) {
            this.bo.v();
        }
        let c = this.az.dirtySeries;
        for (let d = 0; d < c.count; d++) {
            let e = c._inner[d];
            e.iw();
        }
        if (!b) {
            this.bo.w();
        }
    }
    ho() {
        this.bn.cd();
        this.hn();
    }
    l6(a) {
        return null;
    }
    mc(a) {
        return null;
    }
    ma(a) {
        return null;
    }
    mb(a) {
        return null;
    }
    get mi() {
        return this.mh;
    }
    set mi(a) {
        if (PointUtil.notEquals(this.mh, a)) {
            let b = this.mh;
            this.mh = a;
            this.jh("CrosshairPoint", b, this.mh);
        }
    }
    get cu() {
        return this.bg == 1 || this.bg == 2;
    }
    get legend() {
        return this.c(SeriesViewer.la);
    }
    set legend(a) {
        this.h(SeriesViewer.la, a);
    }
    get cd() {
        return this.c(SeriesViewer.kz);
    }
    set cd(a) {
        this.h(SeriesViewer.kz, a);
    }
    jh(a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        if (this.propertyUpdated != null) {
            this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
        }
    }
    ii() {
        this.ij(this.series);
    }
    ij(a) {
        for (let b of fromEn(a)) {
            let c = b.aw;
            if (c == null) {
                continue;
            }
            let d = b.jv;
            if (d == null) {
                continue;
            }
            if (c.containsChild(d)) {
                c.removeChild(d);
            }
            if (!c.containsChild(d) && b.ly != 1) {
                c.addChildInOrder(d, b);
            }
        }
    }
    it(a, b, c) {
        this.jm(a, b, typeCast(MouseEventArgs.$, c));
    }
    ix(a, b, c) {
        this.jq(a, b, typeCast(MouseEventArgs.$, c));
    }
    iu(a, b, c) {
        this.jn(a, b, typeCast(MouseEventArgs.$, c));
    }
    iv(a, b, c) {
        this.jo(a, b, typeCast(MouseButtonEventArgs.$, c));
    }
    iw(a, b, c) {
        let d = typeCast(MouseButtonEventArgs.$, c);
        if (d != null) {
            this.jp(a, b, typeCast(MouseButtonEventArgs.$, c));
        }
    }
    iy(a, b, c) {
    }
    iz(a, b, c) {
    }
    jk(a, b) {
        if (this.seriesCursorMouseMove != null && this.ch) {
            this.seriesCursorMouseMove(this, new ChartCursorEventArgs(this, a, b));
        }
    }
    jo(a, b, c) {
        if (this.seriesMouseLeftButtonDown != null) {
            this.seriesMouseLeftButtonDown(this, new DataChartMouseButtonEventArgs(this, a, b, c));
        }
    }
    jp(a, b, c) {
        if (this.seriesMouseLeftButtonUp != null) {
            this.seriesMouseLeftButtonUp(this, new DataChartMouseButtonEventArgs(this, a, b, c));
        }
    }
    jq(a, b, c) {
        if (this.seriesMouseMove != null) {
            this.seriesMouseMove(this, new ChartMouseEventArgs(this, a, b, c));
        }
    }
    jm(a, b, c) {
        if (this.seriesMouseEnter != null) {
            this.seriesMouseEnter(this, new ChartMouseEventArgs(this, a, b, c));
        }
    }
    jn(a, b, c) {
        if (this.seriesMouseLeave != null) {
            this.seriesMouseLeave(this, new ChartMouseEventArgs(this, a, b, c));
        }
    }
    get_m3() {
        return this.mp;
    }
    get m3() {
        return this.get_m3();
    }
    get mu() {
        return this.mn;
    }
    set mu(a) {
        this.mn = a;
    }
    my(a, b, c) {
        let d = c;
        let e = b;
        let f = (d.left - e.left) / e.width;
        let g = (d.top - e.top) / e.height;
        let h = (d.right - e.left) / e.width;
        let i = (d.bottom - e.top) / e.height;
        f = a.left + f * a.width;
        g = a.top + g * a.height;
        h = a.left + h * a.width;
        i = a.top + i * a.height;
        return new Rect(0, f, g, h - f, i - g);
    }
    get_mt() {
        if (this.b1) {
            this.b1 = false;
            let a = this.mw(this.m3, this.mu, this.mq);
            this.mm = a;
        }
        return this.mm;
    }
    get mt() {
        return this.get_mt();
    }
    mw(a, b, c) {
        let d = b;
        let e = c;
        let f = a;
        if (f.isEmpty) {
            return Rect.empty;
        }
        if (d.isEmpty) {
            return a;
        }
        let g = (d.left - f.left) / f.width;
        let h = (d.right - f.left) / f.width;
        let i = (d.top - f.top) / f.height;
        let j = (d.bottom - f.top) / f.height;
        g = f.left + (g - e.left) / e.width * f.width;
        h = f.left + (h - e.left) / e.width * f.width;
        i = f.top + (i - e.top) / e.height * f.height;
        j = f.top + (j - e.top) / e.height * f.height;
        let k = new Rect(0, g, i, h - g, j - i);
        k.intersect(f);
        return k;
    }
    ms(a) {
        this.b1 = true;
        return Rect.empty;
    }
    mx() {
        return this.m3;
    }
    ka(a) {
        a.i0 = this.m3;
    }
    get e2() {
        return this.ez;
    }
    set e2(a) {
        this.ez = a;
    }
    jc(a, b) {
        if (!b.isEmpty) {
            this.mp = b;
            this.mn = this.ms(this.mp);
            this.bn.eg(this.mp);
        }
        if (this.cl()) {
            if (this.actualSyncLink != null) {
                this.kl(this.mq, false);
            }
        }
        this.is(a, b);
    }
    a6() {
        return this.a5;
    }
    get ap() {
        return this.an;
    }
    set ap(a) {
        let b = this.an;
        this.an = a;
        if (b != this.an) {
            this.jh("ContentHitTestMode", enumGetBox(ChartHitTestMode_$type, b), enumGetBox(ChartHitTestMode_$type, this.an));
        }
    }
    js() {
        this.ao = this.aq();
    }
    aq() {
        if (!this.cv) {
            return 1;
        }
        return this.a1.f$a(this);
    }
    get ao() {
        return this.am;
    }
    set ao(a) {
        let b = this.am;
        this.am = a;
        if (b != this.am) {
            this.jh("ActualContentHitTestMode", enumGetBox(ChartHitTestMode_$type, b), enumGetBox(ChartHitTestMode_$type, this.am));
        }
    }
    jj(a) {
        if (this.seriesAnimating != null) {
            this.seriesAnimating(a);
        }
    }
    c2() {
        return this.c3() || this.c4();
    }
    h9() {
        SyncManager.e(this);
    }
    h4() {
        SyncManager.c(this);
    }
    get bg() {
        return this.bf;
    }
    set bg(a) {
        if (this.bg != a) {
            this.bf = a;
            if (this.cv) {
                this.a1.f$ae(this);
            }
        }
    }
    il(a) {
        this.hf(this.mk(a));
    }
    im(a) {
        this.hf({ $type: Point_$type, x: NaN, y: NaN });
    }
    c9(a, b) {
        return this.a1.f$e(this, a, b);
    }
    ia(a) {
        this.a1.f$n(this, a);
    }
    c8(a) {
        return this.a1.f$d(this, a);
    }
    get ce() {
        return this.b2;
    }
    set ce(a) {
        this.b2 = a;
    }
    get_cw() {
        return this.cf || this.dh();
    }
    get cw() {
        return this.get_cw();
    }
    ic(a) {
        this.a1.f$p(this, a);
    }
    get ck() {
        return this.b2;
    }
    ir(a) {
        this.a1.f$ac(this, a);
    }
    id(a, b) {
        this.a1.f$q(this, a, b);
    }
    ib(a) {
        this.a1.f$o(this, a);
    }
    get da() {
        return this.b7;
    }
    set da(a) {
        this.b7 = a;
    }
    i7() {
        this.a1.f$aj(this);
    }
    iq(a) {
        this.a1.f$ab(this, a);
    }
    i8(a, b, c, d) {
        this.a1.f$ak(this, a, b, c, d);
    }
    ip(a) {
        this.a1.f$aa(this, a);
    }
    i4(a, b, c, d) {
        this.a1.f$ag(this, a, b, c, d);
    }
    ik(a) {
        this.a1.f$x(this, a);
    }
    io(a) {
        this.a1.f$z(this, a);
    }
    ie(a) {
        this.a1.f$r(this, a);
    }
    i3(a, b, c, d) {
        this.a1.f$af(this, a, b, c, d);
    }
    ih(a) {
        this.bn.d9(a.height);
    }
    hn() {
        if (this.b2) {
            this.hf({ $type: Point_$type, x: NaN, y: NaN });
            this.bn.ca();
        }
        this.b2 = false;
    }
    h7(a, b) {
        this.a1.f$m(this, a, b);
    }
    bd(a) {
        let b = this.bn.j != null && this.bn.j.ag ? this.be : this.bc;
        if (b != 3) {
            return b;
        }
        return this.bn.k(a);
    }
    i6() {
        this.a1.f$ai(this);
    }
    i5() {
        this.a1.f$ah(this);
    }
    j7() {
        this.a1.f$am(this);
    }
    hj() {
        this.a1.f$j(this);
    }
    he() {
        this.hd();
    }
    hd() {
        if (this.cv) {
            this.a1.f$g(this);
        }
    }
    ja() {
    }
    jv() {
    }
    jt() {
        for (let a = 0; a < this.series.count; a++) {
            this.series._inner[a].jc(false);
        }
        this.hm(false, false);
    }
    h6(a, b) {
        this.a1.f$l(this, a, b);
    }
    get df() {
        return this.b8;
    }
    set df(a) {
        this.b8 = a;
    }
    h5(a, b) {
        this.a1.f$k(this, a, b);
    }
    kj(a, b) {
        if (b.propertyName == SyncSettings.$$p[0]) {
            SyncManager.b(this, b.oldValue, b.newValue);
        }
    }
    ki(a, b) {
        if (a != null) {
            a.ab.remove(this);
            a.propertyUpdated = delegateRemove(a.propertyUpdated, this.propertyUpdated);
        }
        if (b != null) {
            b.ab.add(this);
            b.propertyUpdated = delegateCombine(b.propertyUpdated, this.propertyUpdated);
        }
        for (let c of fromEnum(this.series)) {
            c.bn = this.actualSyncLink;
            c.bs = this;
        }
    }
    hf(a) {
        this.actualSyncLink.ak(this, a);
    }
    kl(a, b) {
        this.km(a, b, false);
    }
    km(a, b, c) {
        if (!b) {
            this.actualSyncLink.ap(this, a, c);
        }
        else {
            if (!this.c3() && !this.c4()) {
                return;
            }
            let d = !a.isEmpty && !isNaN_(a.x) && !isNaN_(a.y) && !isNaN_(a.width) && !isNaN_(a.height);
            let e = a;
            if (d && !this.c3()) {
                e = new Rect(0, 0, a.y, 1, a.height);
            }
            if (d && !this.c4()) {
                e = new Rect(0, a.x, 0, a.width, 1);
            }
            this.actualSyncLink.ao(this, e);
        }
    }
    jb(a, b) {
        if (!b) {
            this.actualSyncLink.al(this, a);
        }
        else {
            if (!this.c3() && !this.c4()) {
                return;
            }
            let c = !a.isEmpty && !isNaN_(a.x) && !isNaN_(a.y) && !isNaN_(a.width) && !isNaN_(a.height);
            let d = a;
            if (c && !this.c3()) {
                d = new Rect(0, 0, a.y, 1, a.height);
            }
            if (c && !this.c4()) {
                d = new Rect(0, a.x, 0, a.width, 1);
            }
            this.actualSyncLink.al(this, d);
        }
    }
    get c0() {
        return this.actualSyncLink != null;
    }
    *_dm() {
        if (this.actualSyncLink == null) {
            return undefined;
        }
        for (let a of fromEnum(this.actualSyncLink.ag)) {
            yield a;
        }
    }
    dm() {
        return toEnum(() => this._dm());
    }
    mk(a) {
        let b = this.m3;
        let c = this.mq.left + this.mq.width * a.x / b.width;
        let d = this.mq.top + this.mq.height * a.y / b.height;
        return { $type: Point_$type, x: c, y: d };
    }
    m2(a) {
        let b = this.m3;
        let c = this.mq.left + this.mq.width * a.left / b.width;
        let d = this.mq.top + this.mq.height * a.top / b.height;
        let e = this.mq.left + this.mq.width * a.right / b.width;
        let f = this.mq.top + this.mq.height * a.bottom / b.height;
        return new Rect(0, c, d, e - c, f - d);
    }
    jr(a, b) {
        if (this.windowRectChanged != null && Rect.l_op_Inequality(a, b)) {
            this.windowRectChanged(this, new RectChangedEventArgs(a, b));
        }
    }
    i2(a, b) {
        this.jr(a, b);
    }
    i0(a, b) {
        if (this.sizeChanged != null && Size.l_op_Inequality(a, b)) {
            this.sizeChanged(this, new RectChangedEventArgs(new Rect(1, 0, 0, a), new Rect(1, 0, 0, b)));
        }
    }
    dc(a, b) {
        if (a.width != b.width || a.height != b.height || a.x != b.x || a.y != b.y) {
            return true;
        }
        return false;
    }
    jf(a, b) {
        if (this.actualWindowRectChanged != null && this.dc(a, b)) {
            this.actualWindowRectChanged(this, new RectChangedEventArgs(a, b));
        }
    }
    j1() {
        this.bn.ds();
    }
    jg(a, b) {
        if (this.gridAreaRectChanged != null && Rect.l_op_Inequality(a, b)) {
            this.gridAreaRectChanged(this, new RectChangedEventArgs(a, b));
        }
    }
    get_cx() {
        return false;
    }
    get cx() {
        return this.get_cx();
    }
    is(a, b) {
        this.jg(a, b);
        if (this.cv) {
            this.a1.f$al(this);
        }
        if (this.cx && (Rect.l_op_Equality(a, null) || a.isEmpty || a.width == 0 || a.height == 0)) {
            this.kl(this.m4, false);
        }
        else {
            this.hs();
        }
    }
    get syncChannel() {
        return this._syncChannel;
    }
    set syncChannel(a) {
        this._syncChannel = a;
    }
    get actualSyncLink() {
        return this.a7;
    }
    set actualSyncLink(a) {
        let b = this.a7;
        this.a7 = a;
        this.jh("ActualSyncLink", b, this.a7);
    }
    ht() {
        this.bn.dt();
    }
    get bi() {
        return this.bn.h().a;
    }
    kf(a) {
        if (this.bi != null) {
            this.bi.mobileMode = a;
        }
    }
    cg() {
        return this.bg == 0 && !this.b7 && !this.b8;
    }
    cc() {
        if (this.actualSyncLink != null && this.actualSyncLink.ag.count > 0) {
            let a = true;
            a = this.cg();
            if (!a) {
                return false;
            }
            for (let b = 0; b < this.actualSyncLink.ag.count; b++) {
                if (!this.actualSyncLink.ag.item(b).cg()) {
                    return false;
                }
            }
            return true;
        }
        else {
            return this.cg();
        }
    }
    notifyCrosshairUpdate() {
    }
    kk(a, b) {
        let c = this.ex;
        this.m4 = new Rect(0, this.eb, this.ec, MathUtil.b(a, c, 1), MathUtil.b(b, c, 1));
    }
    eg() {
        return 1;
    }
    eh() {
        return 1;
    }
    jd(a, b, c, d) {
        switch (b) {
            case SeriesViewer.$$p[25]:
                this.bn.c9();
                break;
            case SeriesViewer.$$p[22]:
                this.bn.c9();
                break;
            case "ActualContentHitTestMode":
                this.h3();
                break;
            case "ContentHitTestMode":
                this.js();
                break;
            case SeriesViewer.$$p[24]:
                this.bn.c7(c, d);
                this.bn.c9();
                break;
            case SeriesViewer.$$p[21]:
                this.bn.c3(c, d);
                this.bn.c9();
                break;
            case "TitleTextStyle":
            case "TitleTextColor":
            case "SubtitleTextStyle":
            case "SubtitleTextColor":
            case "TitleTopMargin":
            case "TitleLeftMargin":
            case "TitleRightMargin":
            case "TitleBottomMargin":
            case "SubtitleTopMargin":
            case "SubtitleLeftMargin":
            case "SubtitleRightMargin":
            case "SubtitleBottomMargin":
                this.bn.c9();
                break;
            case "PixelScalingRatio":
                if (isNaN_(DeviceUtils.a(this.ek))) {
                    this.hr();
                }
                else {
                    this.ea = DeviceUtils.a(this.ek);
                }
                break;
            case "InteractionPixelScalingRatio":
                this.d9 = this.ei;
                break;
            case "ActualPixelScalingRatio":
                this.bn.df();
                break;
            case SeriesViewer.$$p[9]:
                this.bn.ci();
                break;
            case "ActualSyncLink":
                this.ki(typeCast(SyncLink.$, c), typeCast(SyncLink.$, d));
                break;
            case SeriesViewer.$$p[2]:
                if (!this.cm) {
                    this.di = true;
                }
                if (this.m7 == 0) {
                    this.ch = true;
                }
                else {
                    this.ch = this.ca;
                }
                if (this.cv) {
                    this.a1.f$al(this);
                }
                break;
            case "CrosshairPoint":
                if (this.cv) {
                    this.a1.f$al(this);
                }
                this.notifyCrosshairUpdate();
                break;
            case SeriesViewer.$$p[31]:
                if (this.actualSyncLink != null) {
                    this.e1++;
                    this.kl(d, false);
                    this.e1--;
                }
                if (!this.m4.equals1(c) && this.e1 == 0) {
                    this.i2(c, this.m4);
                }
                this.hs();
                break;
            case SeriesViewer.$$p[28]:
                this.eb = this.ev;
                break;
            case SeriesViewer.$$p[29]:
                this.ec = this.ew;
                break;
            case "ActualWindowPositionVertical":
            case "ActualWindowPositionHorizontal":
                if (!this.dg) {
                    this.kk(this.eg(), this.eh());
                }
                break;
            case SeriesViewer.$$p[10]:
                this.bn.cw();
                break;
            case SeriesViewer.$$p[8]:
                this.bo.r = this.e5;
                break;
            case SeriesViewer.$$p[11]:
                this.kh();
                break;
            case "ActualWindowRect":
                this.b1 = true;
                if (!Base.equalsStatic(d, c)) {
                    this.g9();
                }
                if (d.width == 1 && d.height == 1 && c.isEmpty) {
                    this.dk = true;
                }
                this.jf(c, d);
                break;
            case SeriesViewer.$$p[15]:
                this.bn.c1(d);
                break;
            case SeriesViewer.$$p[27]:
                this.cb = this.dj;
                break;
            case SeriesViewer.$$p[33]:
                this.e2 = this.e6;
                this.hd();
                break;
            case SeriesViewer.$$p[17]:
                this.a1.f$ad(this);
                break;
        }
    }
    kh() {
        this.b9 = this.m8 == 0;
        this.bn.de();
        this.kg();
        this.bn.ec();
        this.ht();
    }
    h3() {
        this.bn.co();
    }
    kg() {
        if (this.bi == null) {
            return;
        }
        this.bi.isZoomable = this.c2();
    }
    get mz() {
        return this.mo;
    }
    set mz(a) {
        let b = this.mo;
        this.mo = a;
        if (this.mo.isEmpty) {
            this.bn.cc();
        }
        else {
            this.bn.ed(this.m3, this.m1(this.mz));
            this.bn.d2();
            this.jh("PreviewRect", b, this.mo);
        }
    }
    j9() {
        this.eb = this.mq.x;
        this.ec = this.mq.y;
    }
    g9() {
        this.dk = false;
        this.dn = dateNow();
        if (this.cs) {
            this.az.clear();
        }
        if (this.bo.f()) {
            this.bo.w();
        }
        let a = this.dg;
        this.dg = true;
        this.j9();
        this.dg = a;
        this.bn.cd();
        this.bn.ef(this.mq);
    }
    m1(a) {
        if (this.m3.isEmpty) {
            return Rect.empty;
        }
        let b = this.m3;
        let c = b.left + (b.width * (a.left - this.mq.left) / this.mq.width);
        let d = b.top + (b.height * (a.top - this.mq.top) / this.mq.height);
        let e = b.left + (b.width * (a.right - this.mq.left) / this.mq.width);
        let f = b.top + (b.height * (a.bottom - this.mq.top) / this.mq.height);
        return new Rect(0, c, d, e - c, f - d);
    }
    ji() {
        if (this.refreshCompleted != null && !this.destroyed) {
            this.refreshCompleted(this, new EventArgs());
        }
    }
    i1(a) {
        this.kg();
    }
    get gx() {
        return this.fb;
    }
    set gx(a) {
        let b = this.fb;
        this.fb = a;
        this.jh("TitleTextStyle", b, a);
    }
    get gl() {
        return this.fa;
    }
    set gl(a) {
        let b = this.fa;
        this.fa = a;
        this.jh("SubtitleTextStyle", b, a);
    }
    get mg() {
        return this.l3;
    }
    set mg(a) {
        let b = this.l3;
        this.l3 = a;
        this.jh("TitleTextColor", b, a);
    }
    get mf() {
        return this.l2;
    }
    set mf(a) {
        let b = this.l2;
        this.l2 = a;
        this.jh("SubtitleTextColor", b, a);
    }
    get et() {
        return this.d7;
    }
    set et(a) {
        let b = this.d7;
        this.d7 = a;
        this.jh("TitleTopMargin", b, a);
    }
    get er() {
        return this.d5;
    }
    set er(a) {
        let b = this.d5;
        this.d5 = a;
        this.jh("TitleLeftMargin", b, a);
    }
    get es() {
        return this.d6;
    }
    set es(a) {
        let b = this.d6;
        this.d6 = a;
        this.jh("TitleRightMargin", b, a);
    }
    get eq() {
        return this.d4;
    }
    set eq(a) {
        let b = this.d4;
        this.d4 = a;
        this.jh("TitleBottomMargin", b, a);
    }
    get ep() {
        return this.d3;
    }
    set ep(a) {
        let b = this.d3;
        this.d3 = a;
        this.jh("SubtitleTopMargin", b, a);
    }
    get en() {
        return this.d1;
    }
    set en(a) {
        let b = this.d1;
        this.d1 = a;
        this.jh("SubtitleLeftMargin", b, a);
    }
    get eo() {
        return this.d2;
    }
    set eo(a) {
        let b = this.d2;
        this.d2 = a;
        this.jh("SubtitleRightMargin", b, a);
    }
    get em() {
        return this.d0;
    }
    set em(a) {
        let b = this.d0;
        this.d0 = a;
        this.jh("SubtitleBottomMargin", b, a);
    }
    m5() {
        return this.bn.e6();
    }
    m6() {
        return this.bn.e7();
    }
    aj(a) {
        return this.bn.c(a);
    }
    ak(a) {
        return this.bn.d(a);
    }
    getFontHeight() {
        return this.bn.a7;
    }
    provideContainer(a) {
        this.bn.cs(a);
    }
    h8(a, b) {
        this.bn.ct(a, b);
    }
    notifyContainerResized() {
        this.bn.cn();
    }
    mv() {
        return this.bn.e0();
    }
    hk() {
        this.bn.b1();
    }
    mj() {
        return this.bn.ex();
    }
    bq() {
        return this.bn.r();
    }
    bp() {
        return this.bn.o();
    }
    l7() {
        return this.bn.ep();
    }
    l8() {
        return this.bn.es();
    }
    hb(a) {
        this.bn.bm(a);
    }
    jx(a) {
        this.bn.dn(a);
    }
    get c7() {
        return this.b6;
    }
    set c7(a) {
        let b = this.b6;
        this.b6 = a;
        if (b != this.b6) {
            this.bn.ck(this.b6);
        }
    }
    get ca() {
        return this.b0;
    }
    set ca(a) {
        let b = this.b0;
        this.b0 = a;
        if (b != this.b0) {
            this.bn.bh(this.b0);
        }
    }
    get syncSettings() {
        return this._syncSettings;
    }
    set syncSettings(a) {
        this._syncSettings = a;
    }
    ha(a) {
        this.bn.bk(a);
    }
    jz(a) {
        this.bn.dp(a);
    }
    h0(source_, a, b, c) {
        if (source_.dataView && source_.dataSource) {
            source_ = source_.dataView();
        }
        ;
        let d = this.actualSyncLink.ae(source_);
        if (d == null) {
            return;
        }
        d.handleCollectionChanged(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
    }
    hv(source_) {
        if (source_.dataView && source_.dataSource) {
            source_ = source_.dataView();
        }
        ;
        let a = this.actualSyncLink.ae(source_);
        if (a == null) {
            return;
        }
        a.handleCollectionChanged(new NotifyCollectionChangedEventArgs(0, 4));
    }
    hy(source_, a, b) {
        if (source_.dataView && source_.dataSource) {
            source_ = source_.dataView();
        }
        ;
        let c = this.actualSyncLink.ae(source_);
        if (c == null) {
            return;
        }
        c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 0, b, a));
    }
    hz(source_, a, b) {
        if (source_.dataView && source_.dataSource) {
            source_ = source_.dataView();
        }
        ;
        let c = this.actualSyncLink.ae(source_);
        if (c == null) {
            return;
        }
        c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 1, b, a));
    }
    destroy() {
        this.destroyed = true;
        let a = new List$1(Series.$, 0);
        for (let b = 0; b < this.series.count; b++) {
            a.add(this.series._inner[b]);
        }
        for (let c = 0; c < a.count; c++) {
            if (a._inner[c].bi != null) {
                a._inner[c].bi.ag();
            }
            this.series.remove(a._inner[c]);
            this.jy(a._inner[c].name, true);
            a._inner[c].itemsSource = null;
            a._inner[c].iz(null, null);
        }
        this.hi();
        this.j0();
        this.h9();
        this.bn.cs(null);
    }
    hi() {
    }
    j6(source_) {
        if (source_.dataView && source_.dataSource) {
            source_ = source_.dataView();
        }
        ;
        this.e7 = source_;
        this.kd();
    }
    j0() {
        this.e7 = null;
        this.kd();
    }
    j5(a, source_) {
        if (source_.dataView && source_.dataSource) {
            source_ = source_.dataView();
        }
        ;
        if (stringIsNullOrEmpty(a) == false) {
            if (!this.dl.containsKey(a)) {
                this.dl.addItem(a, source_);
            }
            else {
                this.dl.item(a, source_);
            }
        }
        this.kd();
    }
    jy(a, b) {
        if (stringIsNullOrEmpty(a) == false) {
            if (this.dl.containsKey(a)) {
                this.dl.removeItem(a);
            }
        }
        if (!b) {
            this.kd();
        }
    }
    j4(a, b) {
        if (a.itemsSource != b) {
            a.itemsSource = b;
        }
    }
    kc(a) {
        if (!this.c6) {
            return;
        }
        if (typeCast(Series.$, a) !== null) {
            let b = a;
            if (this.dl.containsKey(b.name)) {
                let c = this.dl.item(b.name);
                this.j4(b, c);
            }
            else {
                this.j4(b, this.e7);
            }
        }
        if (typeCast(CategoryAxisBase.$, a) !== null) {
            let d = a;
            if (this.dl.containsKey(d.name)) {
                let e = this.dl.item(d.name);
                if (d.itemsSource != e) {
                    d.itemsSource = e;
                }
            }
            else {
                if (d.itemsSource != this.e7) {
                    d.itemsSource = this.e7;
                }
            }
        }
    }
    kd() {
        if (!this.c6) {
            return;
        }
        for (let a of fromEnum(this.series)) {
            this.kc(a);
        }
    }
    get eu() {
        return this.d8;
    }
    set eu(a) {
        this.d8 = a;
        this.ht();
    }
    get ej() {
        return this.dx;
    }
    set ej(a) {
        this.dx = a;
        this.ht();
    }
    get el() {
        return this.dz;
    }
    set el(a) {
        this.dz = a;
        this.ht();
    }
    get ef() {
        return this.dv;
    }
    set ef(a) {
        this.dv = a;
        this.ht();
    }
    get ee() {
        return this.du;
    }
    set ee(a) {
        this.du = a;
        this.ht();
    }
    get ed() {
        return this.dt;
    }
    set ed(a) {
        this.dt = a;
        this.ht();
    }
    dd() {
        return false;
    }
    get cp() {
        return this.b4;
    }
    set cp(a) {
        let b = this.b4;
        this.b4 = a;
        this.jh("IsAntiAliasingEnabledDuringInteraction", b, this.b4);
    }
    get ek() {
        return this.dy;
    }
    set ek(a) {
        let b = this.dy;
        this.dy = a;
        this.jh("PixelScalingRatio", b, this.dy);
    }
    get ei() {
        return this.dw;
    }
    set ei(a) {
        let b = this.dw;
        this.dw = a;
        this.jh("InteractionPixelScalingRatio", b, this.dw);
    }
    static bb(a, b) {
        let c = new CoercionInfo();
        c.b = a;
        c.a = null;
        let d = FastItemsSource.f(a);
        if (d.d == null) {
            return c;
        }
        if (b != null) {
            let methods_ = b;
            let key_ = d.d;
            let val_ = null;
            if (typeof methods_[key_] != 'undefined') {
                val_ = methods_[key_];
            }
            ;
            c.b = d.c;
            c.a = val_;
        }
        else if (d.d == "defaultDateParse") {
            let e = defaultDVDateParse;
            c.b = d.c;
            c.a = e;
        }
        return c;
    }
    get f1() {
        return this.e9;
    }
    set f1(a) {
        this.e9 = a;
        if (this.bi == null) {
            return;
        }
        this.bi.backgroundImageUri = this.e9;
    }
    get ea() {
        return this.dq;
    }
    set ea(a) {
        let b = this.dq;
        this.dq = a;
        this.jh("ActualPixelScalingRatio", b, this.dq);
    }
    get d9() {
        return this.dp;
    }
    set d9(a) {
        let b = this.dp;
        this.dp = a;
        this.jh("ActualInteractionPixelScalingRatio", b, this.dp);
    }
    get mq() {
        return this.ml;
    }
    set mq(a) {
        let b = Rect.l_op_Inequality(this.ml, a);
        if (b) {
            let c = this.ml;
            this.ml = a;
            this.jh("ActualWindowRect", c, a);
        }
    }
    hs() {
        this.mq = this.mr();
    }
    mr() {
        return new Rect(0, Math.min(1, Math.max(0, this.m4.left)), Math.min(1, Math.max(0, this.m4.top)), Math.min(1, Math.max(0, this.m4.width)), Math.min(1, Math.max(0, this.m4.height)));
    }
    get eb() {
        return this.dr;
    }
    set eb(a) {
        let b = this.dr;
        this.dr = a;
        this.jh("ActualWindowPositionHorizontal", b, this.dr);
    }
    get ec() {
        return this.ds;
    }
    set ec(a) {
        let b = this.ds;
        this.ds = a;
        this.jh("ActualWindowPositionVertical", b, this.ds);
    }
    h2() {
        if (this.b9 && this.bi != null) {
            this.bi.surfaceIsDirty = true;
            this.bi.doRefresh(false);
        }
        this.he();
    }
    h1() {
        if (this.b9 && this.bi != null) {
            this.bi.surfaceIsDirty = true;
            this.bi.doRefresh(false);
        }
        this.he();
    }
    flush() {
        this.hm(true, true);
    }
    hm(a, b) {
        this.al.x();
        if (a) {
            this.bn.b2();
            this.al.x();
        }
        this.ah.i();
        if (b) {
            this.bn.a.i();
        }
        this.dk = true;
    }
    dh() {
        return false;
    }
    ju(a, b) {
        if (this.kx != null) {
            this.j8(this.kx);
            this.kx = null;
            this.ar = null;
        }
        this.kx = a;
        this.ar = this.al.k(2, a, b);
    }
    j8(a) {
        this.al.ac(2, a);
        this.kx = null;
        this.ar = null;
    }
    hg() {
        this.al.ab(2, this.kx, this.ar, false);
    }
    ig() {
        let a = false;
        let b = false;
        let c = false;
        for (let d = 0; d < this.series.count; d++) {
            let e = this.series._inner[d];
            if (e.cm) {
                a = true;
            }
            if (e.cn) {
                b = true;
            }
            if (e.cj) {
                c = true;
            }
        }
        this.cq = a;
        this.cr = b;
        this.co = c;
    }
    get c1() {
        return this.b9;
    }
    hc() {
        this.bn.bn();
        for (let a = 0; a < this.series.count; a++) {
            this.series._inner[a].im();
        }
    }
    c5() {
        return this.bn.ak();
    }
    e4() {
        let a = this.e0;
        this.e0++;
        return a;
    }
    bt() {
        if (this.gx == null) {
            return null;
        }
        return FontUtil.toFontInfo(this.bn.i.af, this.gx);
    }
    bs() {
        if (this.gl == null) {
            return null;
        }
        return FontUtil.toFontInfo(this.bn.i.af, this.gl);
    }
    kb() {
        let a = false;
        a = this.ca;
        this.cm = true;
        this.ch = (a && !this.di) || this.m7 == 0;
        this.cm = false;
    }
    jl() {
        if (this.seriesDataUpdated != null) {
            this.seriesDataUpdated(this, EventArgs.empty);
        }
    }
}
SeriesViewer.$t = markType(SeriesViewer, 'SeriesViewer', Control.$, [INotifyPropertyChanged_$type, ILegendOwner_$type, IInternalLegendOwner_$type]);
SeriesViewer.la = DependencyProperty.i("Legend", IChartLegend_$type, SeriesViewer.$, new PropertyMetadata(2, null, (a, b) => {
    let c = typeCast(SeriesViewer.$, a);
    c.jh("Legend", b.oldValue, b.newValue);
}));
SeriesViewer.kz = DependencyProperty.i("AnimateSeriesWhenAxisRangeChanges", Boolean_$type, SeriesViewer.$, new PropertyMetadata(2, false, (a, b) => {
    let c = typeCast(SeriesViewer.$, a);
    c.jh("AnimateSeriesWhenAxisRangeChanges", b.oldValue, b.newValue);
}));
SeriesViewer.m0 = Rect.empty;
Type.dep(DependencyProperty, PropertyMetadata, SeriesViewer, 'jh', ['ActualPlotAreaBorderBrush:l4:ky', [Brush.$, null], 'CircleMarkerTemplate:kn:k0', [DataTemplate.$, null], 'CrosshairVisibility:m7:k1', [Visibility_$type, enumGetBox(Visibility_$type, 0)], 'DefaultInteraction:bc:k2', [InteractionState_$type, enumGetBox(InteractionState_$type, 3)], 'DiamondMarkerTemplate:ko:k3', [DataTemplate.$, null], 'DragModifier:l0:k4', [ModifierKeys_$type, enumGetBox(ModifierKeys_$type, 2)], 'HexagonMarkerTemplate:kp:k5', [DataTemplate.$, null], 'HexagramMarkerTemplate:kq:k6', [DataTemplate.$, null], 'HighlightingTransitionDuration:e5:k7', [1, 300], 'IsPagePanningAllowed:cy:k8', [0, true], 'IsSurfaceInteractionDisabled:cz:k9', [0, false], 'OverviewPlusDetailPaneVisibility:m8:lb', [Visibility_$type, enumGetBox(Visibility_$type, 1)], 'PanModifier:l1:lc', [ModifierKeys_$type, enumGetBox(ModifierKeys_$type, 4)], 'PentagonMarkerTemplate:kr:ld', [DataTemplate.$, null], 'PentagramMarkerTemplate:ks:le', [DataTemplate.$, null], 'PlotAreaBackground:md:lf', [Brush.$, null], 'PlotAreaBorderBrush:me:lg', [Brush.$, null], 'PreferHigherResolutionTiles:db:lh', [0, false], 'PyramidMarkerTemplate:kt:li', [DataTemplate.$, null], 'RightButtonDefaultInteraction:be:lj', [InteractionState_$type, enumGetBox(InteractionState_$type, 3)], 'SquareMarkerTemplate:ku:lk', [DataTemplate.$, null], 'SubtitleHorizontalAlignment:ly:ll', [HorizontalAlignment_$type, enumGetBox(HorizontalAlignment_$type, 1)], 'Subtitle:ge:lm', [2, null], 'TetragramMarkerTemplate:kv:ln', [DataTemplate.$, null], 'TitleHorizontalAlignment:lz:lo', [HorizontalAlignment_$type, enumGetBox(HorizontalAlignment_$type, 1)], 'Title:gq:lp', [2, null], 'TriangleMarkerTemplate:kw:lq', [DataTemplate.$, null], 'UseTiledZooming:dj:lr', [0, false], 'WindowPositionHorizontal:ev:ls', [1, NaN], 'WindowPositionVertical:ew:lt', [1, NaN], 'WindowRectMinWidth:ex:lu', [1, 0.0001], 'WindowRect:m4:lv', [Rect.$, new Rect(0, 0, 0, 1, 1)], 'WindowResponse:ba:lw', [WindowResponse_$type, enumGetBox(WindowResponse_$type, 1)], 'ZoomTileCacheSize:e6:lx', [1, 30]]);
/**
 * @hidden
 */
export class SeriesViewerView extends Base {
    constructor(a) {
        super();
        this.n = null;
        this.a = null;
        this.l = null;
        this.m = null;
        this.f = null;
        this.b = null;
        this.ag = false;
        this.e5 = null;
        this.e4 = null;
        this.e3 = null;
        this.e2 = null;
        this.g = new SeriesViewerComponentsFromView();
        this.i = null;
        this.u = null;
        this.x = null;
        this.w = null;
        this.v = null;
        this.al = false;
        this.am = false;
        this.bg = null;
        this.j = null;
        this.a7 = 0;
        this.a6 = 0;
        this.a5 = 0;
        this.ey = Rect.empty;
        this.ah = false;
        this.az = 0;
        this.ax = 0;
        this.ay = 0;
        this.aw = 0;
        this.ai = true;
        this.y = false;
        this.a0 = NaN;
        this.ez = Rect.empty;
        this.z = false;
        this.ad = false;
        this.ac = false;
        this.at = false;
        this.ei = null;
        this.eh = null;
        this.ab = false;
        this.aa = false;
        this.ae = true;
        this.av = null;
        this.ap = false;
        this.be = 0;
        this.af = true;
        this.a6 = 0;
        this.a5 = 0;
        this.n = a;
        this.n.mi = { $type: Point_$type, x: NaN, y: NaN };
        this.n.ba = 1;
        this.i = new SeriesViewerViewManager(this);
        this.e2 = ((() => {
            let $ret = new Line();
            $ret.visibility = 1;
            return $ret;
        })());
        this.e3 = ((() => {
            let $ret = new Line();
            $ret.visibility = 1;
            return $ret;
        })());
    }
    ch() {
        this.i.a9();
    }
    cv() {
        this.n.cm = true;
        this.n.m7 = 1;
        this.n.cm = false;
        this.e4 = new Path();
        this.e5 = new Rectangle();
        this.e5._visibility = 1;
        this.dw();
        this.f = new SeriesCollection();
        this.b = new AxisCollection();
        this.a = new CanvasRenderScheduler();
        this.a.l(this);
        this.a.e.add(this.n.ai);
        if (this.n.m8 == 0) {
            this.cg();
        }
        let a = this.n;
        a.windowRectChanged = delegateCombine(a.windowRectChanged, runOn(this, this.cm));
        let b = this.n;
        b.gridAreaRectChanged = delegateCombine(b.gridAreaRectChanged, runOn(this, this.cl));
        this.m = new OverviewPlusDetailViewportHost(this);
        this.de();
    }
    cg() {
        if (this.l == null) {
            this.l = this.i.g();
        }
        this.n.bi.provideContext(this.x);
        this.n.bi.provideContainer(this.bg);
        this.n.bi.provideEventSource(this.j);
        this.l.world = new Rect(0, 0, 0, 1, 1);
        this.l.window = this.n.m4;
        this.l.surfaceViewer = TypeRegistrar.create("SeriesViewerSurfaceViewer", this.n, this);
        this.l.viewScheduler = this.a;
        this.ec();
        let a = this.l;
        a.windowChanging = delegateCombine(a.windowChanging, runOn(this, this.dd));
        let b = this.l;
        b.windowChanged = delegateCombine(b.windowChanged, runOn(this, this.dc));
    }
    dd(a, b) {
        let c = b.newValue;
        if (this.l != null) {
            c = this.l.changeRect(b.oldValue, b.newValue, this.n.c3(), this.n.c4(), this.l.world);
        }
        if (c.isEmpty) {
            this.l.window = b.oldValue;
        }
        else if (!c.equals1(b.newValue)) {
            this.l.window = c;
        }
        if (this.n.ba == 1) {
            let d = this.n.m3.width / this.n.m3.height;
            c = new Rect(0, c.left / d, c.top, c.width / d, c.height);
            this.n.m4 = c;
        }
    }
    dc(a, b) {
        let c = b.newValue;
        if (this.l != null) {
            c = this.l.changeRect(b.oldValue, b.newValue, this.n.c3(), this.n.c4(), this.l.world);
        }
        if (c.isEmpty) {
            c = b.oldValue;
        }
        else if (!c.equals1(b.newValue)) {
            this.l.window = c;
        }
        let d = this.n.m3.width / this.n.m3.height;
        c = new Rect(0, c.left / d, c.top, c.width / d, c.height);
        this.n.m4 = c;
    }
    ec() {
        if (this.l == null) {
            return;
        }
        if (this.n.m8 != 0) {
            return;
        }
        let a = 1;
        if (this.n.m3.isEmpty == false) {
            a = this.n.m3.width / this.n.m3.height;
        }
        let b = this.l.world;
        let c = new Rect(0, 0, 0, a, 1);
        this.l.world = c;
        if (b.width != c.width || b.height != c.height || b.x != c.x || b.y != c.y) {
            this.l.surfaceViewer.isDirty = true;
        }
        this.l.window = new Rect(0, this.n.m4.left * a, this.n.m4.top, this.n.m4.width * a, this.n.m4.height);
    }
    cm(a, b) {
        this.ec();
    }
    cl(a, b) {
        this.ec();
    }
    b4(a, b, c) {
        let d = true;
        for (let e of fromEnum(this.n.series)) {
            if (d && e.dl) {
                d = false;
                c.a.k(0, 0, a, b);
            }
            e.je(new Rect(0, 0, 0, a, b), c);
        }
    }
    dv() {
        this.i.bj();
    }
    b6() {
    }
    dx() {
        this.i.bk();
    }
    cd() {
        for (let a = 0; a < this.n.series.count; a++) {
            this.n.series._inner[a].bi.am();
        }
    }
    b5() {
    }
    b7() {
    }
    dn(a) {
        let b = this.f.indexOf(a);
        if (b >= 0) {
            this.f.removeAt(b);
        }
        if (a.isStacked) {
            a.h7((c) => {
                c.bs = null;
                b = this.f.indexOf(c);
                if (b >= 0) {
                    this.f.removeAt(b);
                }
                return true;
            });
        }
        this.n.js();
        a.iz(null, null);
        this.c2();
    }
    c2() {
        if (this.n.destroyed) {
            return;
        }
        if (this.f.count == 0) {
            if (this.w != null && Rect.l_op_Inequality(this.n.m3, null) && !this.n.m3.isEmpty) {
                this.w.k(this.n.m3.left, this.n.m3.top, this.n.m3.width, this.n.m3.height);
            }
        }
        this.n.ah.n();
    }
    ao(a) {
        a.iu(a.bi.br, this.ey);
        return this.f.contains(a);
    }
    get as() {
        return this.ag;
    }
    set as(a) {
        this.ag = a;
    }
    bm(a) {
        if (!this.f.contains(a)) {
            this.f.add(a);
            if (a.isStacked) {
                a.h7((b) => {
                    this.f.add(b);
                    return true;
                });
            }
            this.n.js();
        }
        a.iz(this.w, this.v);
        this.n.ht();
    }
    di(a) {
        this.v = a;
        for (let b = 0; b < this.f.count; b++) {
            this.f._inner[b].iz(this.w, this.v);
        }
        for (let c = 0; c < this.b.count; c++) {
            this.b._inner[c].gu(this.w, this.v);
        }
    }
    bu() {
    }
    bq() {
        this.b8();
        this.cd();
    }
    b8() {
        this.e5._visibility = 1;
        this.cj();
    }
    b3() {
    }
    dg() {
    }
    dy() {
        this.e5._visibility = 0;
        this.cj();
    }
    d6(a) {
        this.e5.o = a.top + this.n.m3.top;
        this.e5.n = a.left + this.n.m3.left;
        this.e5.width = a.width;
        this.e5.height = a.height;
        this.e5._stroke = this.i.b0();
        this.e5._fill = null;
        this.e5.ac = 0.5;
        this.cj();
    }
    bt() {
    }
    c5() {
    }
    ee(a, b, c, d) {
        this.e3.aj = a;
        this.e3.al = b;
        this.e3.ak = c;
        this.e3.am = d;
        this.cj();
    }
    d3() {
        this.e3._visibility = 0;
        this.cj();
    }
    ce() {
        if (this.e3._visibility == 0) {
            this.e3._visibility = 1;
            this.cj();
        }
    }
    d7(a, b, c, d) {
        this.e2.aj = a;
        this.e2.al = b;
        this.e2.ak = c;
        this.e2.am = d;
        this.cj();
    }
    dz() {
        this.e2._visibility = 0;
        this.cj();
    }
    b9() {
        if (this.e2._visibility == 0) {
            this.e2._visibility = 1;
            this.cj();
        }
    }
    cc() {
        this.e4._visibility = 1;
        this.cj();
    }
    ev(a) {
        let b = new PathFigureCollection();
        let c = new PathFigure();
        c._isClosed = true;
        c._startPoint = { $type: Point_$type, x: a.left, y: a.top };
        c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.bottom }));
        c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.bottom }));
        c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.top }));
        c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.top }));
        b.add(c);
        return b;
    }
    ew(a) {
        let b = new PathFigureCollection();
        let c = new PathFigure();
        c._isClosed = true;
        c._startPoint = { $type: Point_$type, x: a.left, y: a.top };
        c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.top }));
        c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.bottom }));
        c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.bottom }));
        c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.top }));
        b.add(c);
        return b;
    }
    ed(a, b) {
        b.intersect(a);
        let c = new PathGeometry();
        c.b = this.ew(a);
        let d = new PathGeometry();
        d.b = this.ev(b);
        let e = new GeometryGroup();
        e.c.add(c);
        e.c.add(d);
        this.e4.aj = e;
        this.e4._fill = this.i.b0();
        this.e4._opacity = 0.1;
        this.cj();
    }
    d2() {
        this.e4._visibility = 0;
        this.cj();
    }
    ef(a) {
    }
    dl(a) {
        let b = this.b.indexOf(a);
        this.b.removeAt(b);
        a.gu(null, null);
        this.dt();
        this.n.jy(a.name, true);
    }
    dm(a) {
    }
    bl(a) {
        if (!this.b.contains(a)) {
            this.b.add(a);
        }
        a.gu(this.w, this.v);
        this.dt();
    }
    bi(a) {
    }
    h() {
        this.g.a = this.l;
        return this.g;
    }
    static au(a) {
        let b = a.bs.series;
        let c = new List$1(Series.$, 0);
        for (let d = 0; d < b.count; d++) {
            c.add(b._inner[d]);
            if (b._inner[d].isStacked) {
                b._inner[d].h7((e) => {
                    c.add(e);
                    return true;
                });
            }
        }
        return c;
    }
    ds() {
        this.n.m4 = new Rect(0, 0, 0, 1, 1);
    }
    cs(a) {
        if (a == this.bg) {
            return;
        }
        if (a == null) {
            if (this.j != null) {
                this.j.ao();
            }
            this.i.be(null);
            this.u = null;
            this.x = null;
            this.w = null;
            this.v = null;
            this.j = null;
            if (this.n.bi != null) {
                this.n.bi.provideContext(null);
                this.n.bi.provideContainer(null);
                this.n.bi.provideEventSource(null);
            }
            return;
        }
        this.bg = a;
        if (this.as) {
            this.a.e.add(this.n.ah);
        }
        this.i.be(a);
        this.u = this.i.t;
        this.x = this.i.w;
        this.w = this.i.v;
        this.v = this.i.u;
        this.al = false;
        try {
            this.al = (window.navigator.msPointerEnabled && MSGesture !== undefined);
        }
        catch (b) {
        }
        this.am = false;
        try {
            this.am = (window.navigator.pointerEnabled);
        }
        catch (c) {
        }
        if (this.al || this.am) {
            this.at = true;
        }
        this.j = this.i.f;
        if (this.j != null) {
            this.j.bd = this.n.m3;
            this.j.ai = runOn(this, this.aq);
            let d = this.j;
            d.onContactCompleted = delegateCombine(d.onContactCompleted, runOn(this, this.cp));
            let e = this.j;
            e.onContactMoved = delegateCombine(e.onContactMoved, runOn(this, this.cq));
            let f = this.j;
            f.onContactStarted = delegateCombine(f.onContactStarted, runOn(this, this.cr));
            let g = this.j;
            g.onDragCompleted = delegateCombine(g.onDragCompleted, runOn(this.n, this.n.ib));
            let h = this.j;
            h.onFlingStarted = delegateCombine(h.onFlingStarted, runOn(this, this.aj));
            let i = this.j;
            i.onDragDelta = delegateCombine(i.onDragDelta, (i) => this.n.ic(i));
            let j = this.j;
            j.onDragStarted = delegateCombine(j.onDragStarted, (j) => this.n.id(j, true));
            let k = this.j;
            k.onKeyDown = delegateCombine(k.onKeyDown, runOn(this.n, this.n.c8));
            let l = this.j;
            l.onMouseDown = delegateCombine(l.onMouseDown, runOn(this, this.cx));
            let m = this.j;
            m.onMouseLeave = delegateCombine(m.onMouseLeave, runOn(this, this.cy));
            let n = this.j;
            n.onMouseOver = delegateCombine(n.onMouseOver, runOn(this, this.cz));
            let o = this.j;
            o.onMouseUp = delegateCombine(o.onMouseUp, runOn(this, this.c0));
            let p = this.j;
            p.onMouseWheel = delegateCombine(p.onMouseWheel, runOn(this.n, this.n.c9));
            if (this.j.ah) {
                let q = this.j;
                q.onZoomDelta = delegateCombine(q.onZoomDelta, (q, r, s, t) => this.n.i4(q, r, s, t));
                let r = this.j;
                r.onZoomStarted = delegateCombine(r.onZoomStarted, (r, s, t, u) => this.n.i8(r, s, t, u));
                let s = this.j;
                s.onZoomCompleted = delegateCombine(s.onZoomCompleted, (s, t, u, v) => this.n.i3(s, t, u, v));
            }
            else {
                let t = this.j;
                t.onPinchDelta = delegateCombine(t.onPinchDelta, (t, u) => this.n.ip(u));
                let u = this.j;
                u.onPinchStarted = delegateCombine(u.onPinchStarted, (u, v) => this.n.iq(u));
                let v = this.j;
                v.onGestureCompleted = delegateCombine(v.onGestureCompleted, (v, w) => this.n.ie(v));
            }
            let w = this.j;
            w.onDoubleTap = delegateCombine(w.onDoubleTap, (w) => this.n.ia(w));
            let x = this.j;
            x.onHold = delegateCombine(x.onHold, runOn(this, this.cu));
        }
        if (this.n.bi != null) {
            this.n.bi.provideContext(this.x);
            this.n.bi.provideContainer(a);
            this.n.bi.provideEventSource(this.j);
        }
        for (let y of fromEnum(this.b)) {
            y.a2.aw();
            this.bl(y);
        }
        for (let z of fromEnum(this.f)) {
            this.bm(z);
        }
    }
    aj(a, b, c) {
        if (this.n.ce) {
            return false;
        }
        return true;
    }
    cq(a, b) {
        this.n.h6(a, b);
    }
    cr(a, b) {
        this.n.a1.f$s(this.n, a, b);
    }
    cu(a) {
        this.n.ir(a);
    }
    cp(a, b) {
        this.n.h5(a, b);
    }
    dj(a) {
    }
    get_an() {
        return false;
    }
    get an() {
        return this.get_an();
    }
    d5() {
        this.a7 = FontUtil.getCurrentFontHeight(this.i.af, this.n.getFontInfo());
    }
    e(a, b, c, d) {
        return {
            ret: ((() => { let e = this.n.a1.f$c(this.n, this.f, this.v, a, b, c, d); c = e.p5; return e.ret; })()),
            p2: c
        };
    }
    bb() {
        return this.a6;
    }
    ba() {
        return this.a5;
    }
    cn() {
        this.i.bc();
    }
    ct(a, b) {
        let c = this.a6;
        let d = this.a5;
        if (this.a6 != a) {
            this.ah = true;
        }
        this.a6 = a;
        if (this.a5 != b) {
            this.ah = true;
        }
        this.a5 = b;
        if (this.ah) {
            let e = new Size(1, c, d);
            let f = new Size(1, a, b);
            this.n.i0(e, f);
        }
        this.c9();
        this.dt();
        this.n.ah.n();
    }
    dt() {
        this.ae = true;
        this.n.al.y();
    }
    bz() {
        if (this.a6 == 0 || this.a5 == 0) {
            return;
        }
        this.ae = false;
        this.y = false;
        if (this.ai) {
            this.c8();
            this.c4();
            this.ai = false;
            this.cj();
        }
        let a = this.a6;
        let b = this.a5;
        let c = this.n.ej;
        let d = this.n.el;
        let e = this.n.ef;
        let f = this.n.eu;
        let g = this.n.ed;
        let h = this.n.ee;
        if (isNaN_(g)) {
            g = this.a7 / 2;
        }
        if (isNaN_(h)) {
            h = 0;
        }
        let i = this.n.dd();
        let j = new List$1(AxisLabelPanelBase.$, 0);
        for (let k of fromEnum(this.b)) {
            if (k.at != null) {
                j.add(k.at);
                k.at.bo = () => this.ah;
            }
        }
        if (i) {
            let l = false;
            let m = false;
            let n = false;
            let o = false;
            for (let p of fromEnum(j)) {
                if (LabelPanelArranger.b(p) == 2 && (p.ac.aw == null || p.ac.aw.visibility == 0)) {
                    l = true;
                }
                if (LabelPanelArranger.b(p) == 3 && (p.ac.aw == null || p.ac.aw.visibility == 0)) {
                    m = true;
                }
                if (LabelPanelArranger.b(p) == 0 && (p.ac.aw == null || p.ac.aw.visibility == 0)) {
                    n = true;
                }
                if (LabelPanelArranger.b(p) == 1 && (p.ac.aw == null || p.ac.aw.visibility == 0)) {
                    o = true;
                }
                if (p.ac != null && p.ac.aw != null) {
                    p.ac.aw.c = p.ac.aw.location;
                }
            }
            if (l || m) {
                if (!n && isNaN_(f)) {
                    f = g;
                }
                if (!o && isNaN_(e)) {
                    e = g;
                }
            }
            if (o || n) {
                if (!l && isNaN_(c)) {
                    c = h;
                }
                if (!m && isNaN_(d)) {
                    d = h;
                }
            }
        }
        if (isNaN_(f)) {
            f = 0;
        }
        if (isNaN_(c)) {
            c = 0;
        }
        if (isNaN_(d)) {
            d = 0;
        }
        if (isNaN_(e)) {
            e = 0;
        }
        let q = this.bd();
        f += q;
        let r = this.bc();
        f += r;
        let s = new Rect(0, c, f, a - (c + d), b - (f + e));
        s = LabelPanelArranger.e(j, s);
        let t = new Size(1, Math.max(0, a - (c + d)), Math.max(0, b - (f + e)));
        if (this.n.cl() && s.width != s.height) {
            if (s.width < s.height) {
                f += (s.height - s.width) / 2;
                s.top = s.top + ((s.height - s.width) / 2);
                t.height = t.height - (s.height - s.width);
                s.height = s.width;
            }
            else {
                c += (s.width - s.height) / 2;
                s.left = s.left + ((s.width - s.height) / 2);
                t.width = t.width - (s.width - s.height);
                s.width = s.height;
            }
        }
        this.az = f - (q + r);
        this.ax = c;
        this.ay = d;
        this.aw = e;
        this.ey = s;
        let u = ((() => {
            let $ret = new LabelPanelsArrangeState();
            $ret.f = c;
            $ret.c = c;
            $ret.a = f + t.height;
            $ret.b = f + t.height;
            $ret.g = c + t.width;
            $ret.d = c + t.width;
            $ret.h = f;
            $ret.e = f;
            return $ret;
        })());
        LabelPanelArranger.d(j, u, this.ey, (v, w) => {
            if (!v.cn.equals1(w)) {
                v.cn = w;
                v.ac.a2.ad();
            }
        });
        let v = false;
        if (this.ah) {
            this.ah = false;
            v = true;
        }
        this.n.jc(this.n.m3, this.ey);
        for (let w of fromEnum(this.b)) {
            if (Rect.l_op_Equality(w.i0, null) || w.i0.isEmpty) {
                this.y = true;
            }
            if (w.i0.equals1(this.ey) && !this.i.y()) {
                continue;
            }
            w.go(w.i0, this.ey);
        }
        for (let x of fromEnum(this.f)) {
            if (Rect.l_op_Equality(x.bi.br, null) || x.bi.br.isEmpty) {
                this.y = true;
            }
            if (x.bi.br.equals1(this.ey) && !this.i.y()) {
                continue;
            }
            x.iu(x.bi.br, this.ey);
        }
        this.ea();
        this.dk(this.ey);
        this.i.bb(false);
    }
    ea() {
        if (this.n.bi != null && !this.ey.isEmpty) {
            let a = this.n.bi;
            let b = (this.n.ca) ? this.ey.width : Number.POSITIVE_INFINITY;
            let c = (this.n.ca) ? this.ey.height : Number.POSITIVE_INFINITY;
            let d = a.getDesiredSize(new Size(1, b, c));
            this.n.bi.arrange(new Rect(0, this.ey.right - d.width, this.ey.bottom - d.height, d.width, d.height));
            this.ec();
        }
    }
    t() {
        let a = this.n.getFontInfo();
        let b = this.q();
        if (this.n.bt() != null) {
            a = this.n.bt();
        }
        else if (b != null) {
            a = b;
        }
        return a;
    }
    s() {
        let a = this.n.getFontInfo();
        let b = this.p();
        if (this.n.bs() != null) {
            a = this.n.bs();
        }
        else if (b != null) {
            a = b;
        }
        return a;
    }
    eu() {
        let a = this.n.getFontBrush();
        let b = this.er();
        if (this.n.mg != null) {
            a = this.n.mg;
        }
        else if (b != null) {
            a = b;
        }
        return a;
    }
    et() {
        let a = this.n.getFontBrush();
        let b = this.eq();
        if (this.n.mf != null) {
            a = this.n.mf;
        }
        else if (b != null) {
            a = b;
        }
        return a;
    }
    bd() {
        if (this.n.gq == null || !(typeCast(XamDataChart.$, this.n) !== null)) {
            return 0;
        }
        let a = this.t();
        let b = 0;
        b = FontUtil.getCurrentFontHeight(this.i.af, a);
        let c = this.e9();
        b += c.e + c.b;
        return b;
    }
    bc() {
        if (this.n.ge == null || !(typeCast(XamDataChart.$, this.n) !== null)) {
            return 0;
        }
        if (!isNaN_(this.a0)) {
            return this.a0;
        }
        let a = this.s();
        this.a0 = FontUtil.getCurrentFontHeight(this.i.af, a);
        let b = this.e8();
        this.a0 += b.e + b.b;
        return this.a0;
    }
    e9() {
        let a = this.i.cb();
        let b = isNaN_(this.n.et) ? a.e : this.n.et;
        let c = isNaN_(this.n.er) ? a.c : this.n.er;
        let d = isNaN_(this.n.es) ? a.d : this.n.es;
        let e = isNaN_(this.n.eq) ? a.b : this.n.eq;
        return new Thickness(1, c, b, d, e);
    }
    e8() {
        let a = this.i.ca();
        let b = isNaN_(this.n.ep) ? a.e : this.n.ep;
        let c = isNaN_(this.n.en) ? a.c : this.n.en;
        let d = isNaN_(this.n.eo) ? a.d : this.n.eo;
        let e = isNaN_(this.n.em) ? a.b : this.n.em;
        return new Thickness(1, c, b, d, e);
    }
    dk(a) {
    }
    cj() {
        if (!this.ad) {
            this.ad = true;
            this.a.n();
        }
    }
    dq() {
        if (this.x == null) {
            return;
        }
        if (this.x.d) {
            if (this.n.ea != 1) {
                this.x.z();
                this.x.aa(this.n.ea, this.n.ea);
            }
            if (!this.ez.isEmpty) {
                if (!this.as) {
                    this.x.k(this.ez.left, this.ez.top, this.ez.width, this.ez.height);
                }
            }
        }
        this.dr();
        if (this.x.d) {
            if (this.n.ea != 1) {
                this.x.y();
            }
        }
    }
    isValid() {
        return true;
    }
    preRender() {
        this.i.a5(this.a6, this.a5);
        this.dh();
    }
    dh() {
    }
    dr() {
        if (this.x.d) {
            this.ez = new Rect(0, 0, 0, this.a6, this.a5);
            if (this.av != null && this.av.count > 0) {
                this.cb();
                this.x.z();
                this.x.ae(this.n.m3);
                if (!this.as) {
                    this.x.k(this.n.m3.left, this.n.m3.top, this.n.m3.width, this.n.m3.height);
                }
            }
            this.x.r(this.e2);
            this.x.r(this.e3);
            this.x.s(this.e4);
            this.x.v(this.e5);
            this.x.ac(this.t());
            if (this.ei != null) {
                this.ei.am = this.eu();
                this.x.w(this.ei);
            }
            this.x.ac(this.s());
            if (this.eh != null) {
                this.eh.am = this.et();
                this.x.w(this.eh);
            }
            if (this.av != null && this.av.count > 0) {
                this.i.bi(this.av);
                this.x.y();
            }
            if (this.ap) {
                this.d1();
                this.ap = false;
                this.av.clear();
                this.n.a1.f$h(this.n);
                this.cj();
            }
        }
    }
    e0() {
        return new Rect(0, 0, 0, this.a6, this.a5);
    }
    ex() {
        return this.i.b5();
    }
    dw() {
        this.n.kn = ((() => {
            let $ret = new DataTemplate();
            $ret.render = MarkerTemplates.d;
            $ret.measure = MarkerTemplates.b;
            return $ret;
        })());
        this.n.kw = ((() => {
            let $ret = new DataTemplate();
            $ret.render = MarkerTemplates.m;
            $ret.measure = MarkerTemplates.b;
            return $ret;
        })());
        this.n.kt = ((() => {
            let $ret = new DataTemplate();
            $ret.render = MarkerTemplates.j;
            $ret.measure = MarkerTemplates.b;
            return $ret;
        })());
        this.n.ku = ((() => {
            let $ret = new DataTemplate();
            $ret.render = MarkerTemplates.k;
            $ret.measure = MarkerTemplates.b;
            return $ret;
        })());
        this.n.ko = ((() => {
            let $ret = new DataTemplate();
            $ret.render = MarkerTemplates.e;
            $ret.measure = MarkerTemplates.b;
            return $ret;
        })());
        this.n.kr = ((() => {
            let $ret = new DataTemplate();
            $ret.render = MarkerTemplates.h;
            $ret.measure = MarkerTemplates.b;
            return $ret;
        })());
        this.n.kp = ((() => {
            let $ret = new DataTemplate();
            $ret.render = MarkerTemplates.f;
            $ret.measure = MarkerTemplates.b;
            return $ret;
        })());
        this.n.kv = ((() => {
            let $ret = new DataTemplate();
            $ret.render = MarkerTemplates.l;
            $ret.measure = MarkerTemplates.b;
            return $ret;
        })());
        this.n.ks = ((() => {
            let $ret = new DataTemplate();
            $ret.render = MarkerTemplates.i;
            $ret.measure = MarkerTemplates.b;
            return $ret;
        })());
        this.n.kq = ((() => {
            let $ret = new DataTemplate();
            $ret.render = MarkerTemplates.g;
            $ret.measure = MarkerTemplates.b;
            return $ret;
        })());
    }
    d4() {
        this.i.bm();
        this.du();
        let a = this.a7;
        this.d5();
        if (a != this.a7) {
            this.n.ht();
        }
    }
    de() {
        if (this.n.m8 == 0) {
            this.cg();
            this.n.hq();
        }
        if (this.n.bi != null) {
            let a = this.n.m8;
            this.n.bi.visibility = a;
            this.n.bi.doRefresh(false);
        }
    }
    aq(a) {
        return this.n.a1.f$f(this.n, a);
    }
    cz(a, b, c) {
        this.n.a1.f$v(this.n, this.f, this.v, a, b, c);
    }
    cy(a) {
        this.n.a1.f$u(this.n, a);
    }
    cx(a) {
        this.n.a1.f$t(this.n, this.j, a);
    }
    c0(a) {
        this.n.a1.f$w(this.n, this.j, a);
    }
    du() {
    }
    get eo() {
        return this.j.ba;
    }
    eg(a) {
        if (this.j != null) {
            this.j.bd = this.n.m3;
        }
    }
    ck(a) {
        this.n.a1.f$y(this.n, a);
        this.n.ca = a;
    }
    bh(a) {
        this.n.kb();
        this.i.bt(a);
        if (this.n.bi != null) {
            this.n.bi.mobileMode = a;
        }
        this.eb();
    }
    eb() {
        this.n.kh();
    }
    get isDirty() {
        return this.ad;
    }
    set isDirty(a) {
        this.ad = a;
    }
    undirty(a) {
        this.ad = false;
        this.dq();
    }
    get index() {
        return 10;
    }
    postRender() {
    }
    b2() {
        this.dt();
    }
    ca() {
        this.i.a8();
    }
    d0() {
        this.i.bl();
    }
    bs(a) {
        this.i.ax();
    }
    bj(a) {
        this.i.at(a);
    }
    d8(a) {
        this.i.br(a);
    }
    d9(a) {
        this.i.bs(a);
    }
    bk(a) {
        this.i.au(a);
    }
    dp(a) {
        this.i.bh(a);
    }
    c1(a) {
        this.n.ah.n();
    }
    br(a) {
    }
    k(a) {
        if (this.n.ca) {
            return 2;
        }
        else {
            return 1;
        }
    }
    cw() {
        if (this.j != null) {
            this.j.ab = this.n.cz;
        }
        if (this.l != null) {
            this.l.isSurfaceInteractionDisabled = this.n.cz;
        }
    }
    a9(a, b) {
        if (a == null) {
            return 0;
        }
        this.x.ac(b);
        return this.x.e(a);
    }
    a8(a, b) {
        if (a == null) {
            return 0;
        }
        let c = 0;
        c = FontUtil.getCurrentFontHeight(this.i.af, b);
        return c;
    }
    c9() {
        this.ai = true;
        this.dt();
        this.cj();
    }
    ej(a, b, c, d) {
        if (a == null) {
            return null;
        }
        let e = ((() => {
            let $ret = new TextBlock();
            $ret.ak = a;
            $ret.o = b.e;
            return $ret;
        })());
        let f = this.a9(e, c);
        e.o = b.e;
        let g = this.a8(a, c);
        e.m = f;
        e.l = g;
        switch (d) {
            case 0:
                e.n = b.c;
                break;
            case 2:
                e.n = Math.max((this.a6 - b.d) - f, b.c);
                break;
            default:
            case 1:
            case 3:
                let h = (this.a6 / 2) - (f / 2);
                h += b.c;
                h -= b.d;
                e.n = h;
                break;
        }
        return e;
    }
    c8() {
        this.ei = typeCast(XamDataChart.$, this.n) !== null ? this.ej(this.n.gq, this.e9(), this.t(), this.en()) : null;
    }
    c4() {
        this.a0 = NaN;
        this.eh = typeCast(XamDataChart.$, this.n) !== null ? this.ej(this.n.ge, this.e8(), this.s(), this.em()) : null;
        if (this.eh != null) {
            this.eh.o += this.bd();
        }
    }
    c(a) {
        let b = this.i.c();
        if (b == 0) {
            let c = LabelPanelArranger.b(a.at);
            if (a.ag == null) {
                if (c == 4) {
                    return 4;
                }
                if (c == 5) {
                    return 3;
                }
            }
            else {
                if (c == 4) {
                    return 3;
                }
                if (c == 5) {
                    return 4;
                }
            }
            if (c == 0) {
                return 3;
            }
            return 4;
        }
        return b;
    }
    d(a) {
        let b = this.i.d();
        if (b == 0) {
            let c = LabelPanelArranger.b(a.at);
            if (a.ag == null) {
                if (c == 7) {
                    return 1;
                }
                if (c == 6) {
                    return 2;
                }
            }
            else {
                if (c == 7) {
                    return 2;
                }
                if (c == 6) {
                    return 1;
                }
            }
            if (c == 3) {
                return 2;
            }
            return 1;
        }
        return b;
    }
    da() {
        if (!isNaN_(this.n.d9)) {
            if (!isNaN_(DeviceUtils.a(this.n.ek))) {
                this.n.ea = DeviceUtils.a(this.n.ek);
            }
            else {
                this.ch();
            }
        }
        if (!this.n.cp) {
            this.i.a4();
        }
    }
    db() {
        if (!isNaN_(DeviceUtils.a(this.n.d9))) {
            this.n.ea = DeviceUtils.a(this.n.d9);
        }
        if (!this.n.cp) {
            this.i.a3();
        }
    }
    r() {
        return this.i.r();
    }
    es() {
        return this.i.b4();
    }
    o() {
        return this.i.q();
    }
    ep() {
        return this.i.b3();
    }
    q() {
        return this.i.p();
    }
    p() {
        return this.i.o();
    }
    er() {
        return this.i.b2();
    }
    eq() {
        return this.i.b1();
    }
    get a2() {
        return this.ax;
    }
    get a3() {
        return this.ay;
    }
    get a4() {
        return this.az;
    }
    get a1() {
        return this.aw;
    }
    get el() {
        return this.ei;
    }
    get ek() {
        return this.eh;
    }
    e1() {
        return new Rect(0, 0, 0, this.a6, this.a5);
    }
    e7() {
        return this.i.cd();
    }
    e6() {
        return this.i.cc();
    }
    c3(a, b) {
        this.aa = true;
    }
    c7(a, b) {
        this.ab = true;
    }
    en() {
        if (this.ab) {
            return this.n.lz;
        }
        else {
            let a = 1;
            switch (this.i.as()) {
                case "left":
                    a = 0;
                    break;
                case "right":
                    a = 2;
                    break;
            }
            return a;
        }
    }
    em() {
        if (this.aa) {
            return this.n.ly;
        }
        else {
            let a = 1;
            switch (this.i.ar()) {
                case "left":
                    a = 0;
                    break;
                case "right":
                    a = 2;
                    break;
            }
            return a;
        }
    }
    bn() {
        if (this.ae) {
            this.bz();
            if (this.y) {
                this.n.al.x();
            }
            if (this.ae) {
                this.bz();
            }
        }
    }
    ak() {
        if (this.n.dk) {
            return false;
        }
        if ((dateNow().getTime() - this.n.dn.getTime()) < 300) {
            return true;
        }
        return false;
    }
    b1() {
        this.i.a5(this.a6, this.a5);
    }
    ci() {
        this.i.ba(this.n.cy);
    }
    ar(a) {
        let b = this.n.mq;
        let c = b.top > 0;
        let d = b.left > 0;
        let e = b.right < 1;
        let f = b.bottom < 1;
        let g = a.y < 0;
        let h = a.y > 0;
        let i = a.x < 0;
        let j = a.x > 0;
        if (c && g) {
            return true;
        }
        if (d && i) {
            return true;
        }
        if (f && h) {
            return true;
        }
        if (j && e) {
            return true;
        }
        return false;
    }
    df() {
        this.i.bg();
        this.n.ah.n();
        this.n.ai.n();
        this.n.ag.n();
        this.a.n();
    }
    b0(a, b, c) {
        this.ap = false;
        if (this.av == null) {
            this.av = new List$1(ITileZoomTile_$type, 0);
        }
        for (let d = 0; d < this.av.count; d++) {
            while (d < this.av.count && !a.containsKey(this.av._inner[d].content)) {
                this.av.removeAt(d);
            }
        }
        for (let e = 0; e < b.count; e++) {
            this.av.add(b._inner[e]);
        }
        this.cj();
    }
    bf(a, b, c) {
        return this.i.ao(a, b, c);
    }
    bx() {
        this.i.a1();
    }
    by(a) {
        this.i.a2(a);
    }
    cf() {
        if (this.av == null) {
            return;
        }
        this.ap = true;
        this.cj();
    }
    bv() {
        this.i.az();
    }
    bo() {
        this.i.av();
    }
    bw(a) {
        this.i.a0(a);
    }
    bp() {
        this.i.aw();
    }
    cb() {
        if (this.af) {
            this.af = false;
            this.w.k(this.n.m3.left, this.n.m3.top, this.n.m3.width, this.n.m3.height);
            this.n.ah.c = true;
        }
    }
    d1() {
        if (!this.af) {
            this.af = true;
            this.n.ah.c = false;
            this.n.ah.o(this.w, this.v);
        }
    }
    c6() {
    }
    co() {
        this.i.bd();
    }
}
SeriesViewerView.$t = markType(SeriesViewerView, 'SeriesViewerView', Base.$, [ISchedulableRender_$type]);
/**
 * @hidden
 */
export class OverviewPlusDetailViewportHost extends Base {
    constructor(a) {
        super();
        this.a = null;
        if (a == null) {
            throw new ArgumentNullException(0, "view");
        }
        this.a = a;
    }
    getViewInfo(a, b) {
        a = new Rect(0, 0, 0, this.a.l.worldRectViewport.width, this.a.l.worldRectViewport.height);
        b = SeriesViewer.m0;
        return {
            p0: a,
            p1: b
        };
    }
    getEffectiveViewport() {
        if (!this.a.n.cx) {
            if (this.a.n.mu.isEmpty) {
                return this.a.n.mu;
            }
            return this.a.n.my(this.a.l.previewViewportdRect, this.a.n.m3, this.a.n.mu);
        }
        return Rect.empty;
    }
}
OverviewPlusDetailViewportHost.$t = markType(OverviewPlusDetailViewportHost, 'OverviewPlusDetailViewportHost', Base.$, [IProvidesViewport_$type]);
/**
 * @hidden
 */
export class SeriesViewerViewManager extends Base {
    constructor(a) {
        super();
        this.af = null;
        this.ag = null;
        this.ak = null;
        this.aj = null;
        this.ah = null;
        this.al = null;
        this.t = null;
        this.w = null;
        this.v = null;
        this.u = null;
        this.x = null;
        this.f = null;
        this.j = null;
        this.ai = null;
        this.ae = null;
        this.ab = 0;
        this.aa = 0;
        this.ac = 1;
        this.ad = 0;
        this.l = null;
        this.b7 = new Thickness(0, 0);
        this.aq = null;
        this.ap = stringEmpty();
        this.b6 = new Thickness(0, 0);
        this.bx = null;
        this.bw = null;
        this.k = null;
        this.a = 0;
        this.b = 0;
        this.n = null;
        this.bz = null;
        this.m = null;
        this.by = null;
        this.b8 = new Thickness(0, 0);
        this.b9 = new Thickness(0, 0);
        this.h = null;
        this.z = new Dictionary$2(String_$type, Tuple$2.$.specialize(DomWrapper_$type, RenderingContext.$), 0);
        this.am = -1;
        this.an = -1;
        this.s = null;
        this.j = a;
    }
    bg() {
    }
    be(a) {
        if (a == null) {
            if (this.f != null) {
                this.f.ao();
            }
            this.af = null;
            if (this.ag != null) {
                this.ag.remove();
            }
            this.ag = null;
            if (this.ak != null) {
                this.ak.remove();
            }
            this.ak = null;
            if (this.aj != null) {
                this.aj.remove();
            }
            this.aj = null;
            if (this.ah != null) {
                this.ah.remove();
            }
            this.ah = null;
            if (this.al != null) {
                this.al.remove();
            }
            this.al = null;
            this.t = null;
            this.w = null;
            this.v = null;
            this.u = null;
            if (this.ai != null) {
                this.ai.remove();
            }
            this.ai = null;
            this.f = null;
            this.j.n.bo.u(null);
            this.j.n.ah.j(null);
            this.j.n.ai.j(null);
            this.j.n.ag.j(null);
            this.j.a.j(null);
            if (this.ae != null) {
                let e_ = this.ae;
                window.removeEventListener("resize", e_, false);
                this.ae = null;
            }
            return;
        }
        this.af = a;
        this.j.n.bo.u(this.af);
        this.j.n.ah.j(this.af);
        this.j.n.ai.j(this.af);
        this.j.n.ag.j(this.af);
        this.j.a.j(this.af);
        this.j.n.al.z(this.af);
        this.bf();
        this.af.rootWrapper.setStyleProperty("position", "relative");
        this.ag = this.af.createElement("canvas");
        this.ag.setStyleProperty("position", "absolute");
        this.ag.setStyleProperty("top", "0px");
        this.ag.setStyleProperty("left", "0px");
        this.ak = this.af.createElement("canvas");
        this.ak.setStyleProperty("position", "absolute");
        this.ak.setStyleProperty("top", "0px");
        this.ak.setStyleProperty("left", "0px");
        this.aj = this.af.createElement("canvas");
        this.aj.setStyleProperty("position", "absolute");
        this.aj.setStyleProperty("top", "0px");
        this.aj.setStyleProperty("left", "0px");
        this.ah = this.af.createElement("canvas");
        this.ah.setStyleProperty("position", "absolute");
        this.ah.setStyleProperty("top", "0px");
        this.ah.setStyleProperty("left", "0px");
        this.al = this.af.createElement("canvas");
        this.al.setStyleProperty("position", "absolute");
        this.al.setStyleProperty("top", "0px");
        this.al.setStyleProperty("left", "0px");
        this.af.append(this.ag);
        this.af.append(this.aj);
        this.af.append(this.ak);
        this.t = new RenderingContext(new CanvasViewRenderer(), this.af.get2DCanvasContext(this.ag));
        this.w = new RenderingContext(new CanvasViewRenderer(), this.af.get2DCanvasContext(this.ak));
        this.v = new RenderingContext(new CanvasViewRenderer(), this.af.get2DCanvasContext(this.aj));
        if (this.j.n.ao != 1) {
            this.u = new RenderingContext(new CanvasViewRenderer(), this.af.get2DCanvasContext(this.ah));
            this.s = this.u;
        }
        else {
            this.u = new RenderingContext(null, null);
        }
        this.x = new RenderingContext(new CanvasViewRenderer(), this.af.get2DCanvasContext(this.al));
        this.j.dj(this.t);
        this.j.ct(this.af.rootWrapper.width(), this.af.rootWrapper.height());
        {
            if ((TypeRegistrar.isRegistered('CanvasGestureDOMEventProxy'))) {
                let overlayCanvas_ = this.ak;
                let container_ = this.af;
                this.f = (TypeRegistrar.create('CanvasGestureDOMEventProxy', overlayCanvas_, container_, false));
            }
            else {
                this.f = null;
            }
            if (this.f != null) {
                this.f.aj = runOn(this.j, this.j.ar);
            }
        }
        this.ai = this.af.createElement("div");
        this.ai.hide();
        this.ai.setStyleProperty("position", "absolute");
        this.ai.setStyleProperty("z-index", "10000");
        this.ai.addClass(this.j.n.g0);
        this.af.append(this.ai);
    }
    static bv(a, b) {
        b();
        return;
    }
    bf() {
        this.j.du();
        this.j.d5();
        this.bm();
    }
    a9() {
        if (this.ae == null) {
            this.ae = (a) => {
                let b = this.j.n.ek;
                let c = this.j.n.ea;
                if (!isNaN_(b) && b != 0) {
                    return;
                }
                if (window.devicePixelRatio != undefined && window.devicePixelRatio != c) {
                    this.j.n.ea = window.devicePixelRatio;
                }
            };
            let e_ = this.ae;
            window.addEventListener("resize", e_, false);
        }
        this.ae(null);
    }
    g() {
        if ((TypeRegistrar.isRegistered('XamOverviewPlusDetailPane'))) {
            let overlayCanvas_ = this.ak;
            let container_ = this.af;
            return (TypeRegistrar.create('XamOverviewPlusDetailPane'));
        }
        return null;
    }
    bj() {
        this.ak.setStyleProperty("cursor", "default");
    }
    bk() {
        this.ak.setStyleProperty("cursor", "pointer");
    }
    b0() {
        return ((() => {
            let $ret = new Brush();
            $ret.fill = "#000000";
            return $ret;
        })());
    }
    ay(a, b, c) {
        this.ab = a;
        this.aa = b;
        this.ac = c;
        let d = a;
        let e = b;
        if (c != 1) {
            d = Math.round(a * c);
            e = Math.round(b * c);
        }
        if (this.ag != null) {
            this.ag.setAttribute("width", d.toString());
            this.ag.setAttribute("height", e.toString());
            this.ag.setStyleProperty("width", a.toString() + "px");
            this.ag.setStyleProperty("height", b.toString() + "px");
        }
        if (this.ak != null) {
            this.ak.setAttribute("width", d.toString());
            this.ak.setAttribute("height", e.toString());
            this.ak.setStyleProperty("width", a.toString() + "px");
            this.ak.setStyleProperty("height", b.toString() + "px");
            this.ak.setAttribute("tabindex", "0");
            this.ak.setStyleProperty("outline", "0");
        }
        if (this.aj != null) {
            this.aj.setAttribute("width", d.toString());
            this.aj.setAttribute("height", e.toString());
            this.aj.setStyleProperty("width", a.toString() + "px");
            this.aj.setStyleProperty("height", b.toString() + "px");
        }
        if (this.ah != null) {
            this.ah.setAttribute("width", d.toString());
            this.ah.setAttribute("height", e.toString());
            this.ah.setStyleProperty("width", a.toString() + "px");
            this.ah.setStyleProperty("height", b.toString() + "px");
        }
        if (this.al != null) {
            this.al.setAttribute("width", d.toString());
            this.al.setAttribute("height", e.toString());
            this.al.setStyleProperty("width", a.toString() + "px");
            this.al.setStyleProperty("height", b.toString() + "px");
        }
        this.j.n.ah.n();
        this.j.n.ai.n();
        this.j.n.ag.n();
    }
    b5() {
        if (this.f == null) {
            return { $type: Point_$type, x: 0, y: 0 };
        }
        let a = this.f.bc(this.af.rootWrapper);
        return { $type: Point_$type, x: a.left, y: a.top };
    }
    y() {
        return false;
    }
    bb(a) {
    }
    a7(a, b, c, d, e) {
        let f = this.e();
        a = f.a;
        b = f.f;
        c = f.k;
        d = f.h;
        e = f.i;
        return {
            p0: a,
            p1: b,
            p2: c,
            p3: d,
            p4: e
        };
    }
    e() {
        let a = new DefaultPaletteInfo();
        a.a = new BrushCollection();
        a.f = new BrushCollection();
        a.b = new BrushCollection();
        a.c = new BrushCollection();
        let b = new List$1(String_$type, 0);
        b.add("background-image");
        this.af.startCSSQuery();
        let c = this.af.getCssDefaultValuesForClassCollection("ui-chart-fill-palette-", b.toArray());
        let d = c.length;
        let e = this.af.getCssDefaultValuesForClassCollection("ui-chart-outline-palette-", b.toArray());
        let f = e.length;
        let g = this.af.getCssDefaultValuesForClassCollection("ui-chart-marker-fill-palette-", b.toArray());
        let h = g.length;
        let i = this.af.getCssDefaultValuesForClassCollection("ui-chart-marker-outline-palette-", b.toArray());
        let j = i.length;
        for (let k = 0; k < d; k++) {
            a.a.add(CssGradientUtil.brushFromGradientString(c[k][0]));
        }
        for (let l = 0; l < f; l++) {
            a.f.add(CssGradientUtil.brushFromGradientString(e[l][0]));
        }
        for (let m = 0; m < h; m++) {
            a.b.add(CssGradientUtil.brushFromGradientString(g[m][0]));
        }
        for (let n = 0; n < j; n++) {
            a.c.add(CssGradientUtil.brushFromGradientString(i[n][0]));
        }
        b.clear();
        let o = 0;
        let p = 0;
        let q = Math.min(d, f);
        let r = null;
        if (d == 0) {
            b.add("background-color");
        }
        if (f == 0) {
            b.add("border-top-color");
            p = d == 0 ? 1 : 0;
        }
        if (b.count > 0) {
            r = this.af.getCssDefaultValuesForClassCollection("ui-chart-palette-", b.toArray());
            q = r.length;
        }
        if (d == 0) {
            if (q > 0) {
                for (let s = 0; s < q; s++) {
                    let t = new Brush();
                    t._fill = r[s][o];
                    a.a.add(t);
                }
            }
            else {
                a.a.add(((() => {
                    let $ret = new Brush();
                    $ret.fill = "#50a8be";
                    return $ret;
                })()));
                a.a.add(((() => {
                    let $ret = new Brush();
                    $ret.fill = "#fc6754";
                    return $ret;
                })()));
                a.a.add(((() => {
                    let $ret = new Brush();
                    $ret.fill = "#fec33c";
                    return $ret;
                })()));
                a.a.add(((() => {
                    let $ret = new Brush();
                    $ret.fill = "#3c6399";
                    return $ret;
                })()));
                a.a.add(((() => {
                    let $ret = new Brush();
                    $ret.fill = "#91af49";
                    return $ret;
                })()));
            }
        }
        if (f == 0) {
            if (q > 0) {
                for (let u = 0; u < q; u++) {
                    let v = new Brush();
                    v._fill = r[u][p];
                    a.f.add(v);
                }
            }
            else {
                a.f.add(((() => {
                    let $ret = new Brush();
                    $ret.fill = "#B1BFC9";
                    return $ret;
                })()));
                a.f.add(((() => {
                    let $ret = new Brush();
                    $ret.fill = "#798995";
                    return $ret;
                })()));
                a.f.add(((() => {
                    let $ret = new Brush();
                    $ret.fill = "#4F606C";
                    return $ret;
                })()));
                a.f.add(((() => {
                    let $ret = new Brush();
                    $ret.fill = "#374650";
                    return $ret;
                })()));
                a.f.add(((() => {
                    let $ret = new Brush();
                    $ret.fill = "#162C3B";
                    return $ret;
                })()));
            }
        }
        b.clear();
        let w = Math.min(h, j);
        if (h == 0) {
            b.add("background-color");
        }
        if (j == 0) {
            b.add("border-top-color");
            p = h == 0 ? 1 : 0;
        }
        if (b.count > 0) {
            r = this.af.getCssDefaultValuesForClassCollection("ui-chart-marker-palette-", b.toArray());
            w = r.length;
        }
        if (h == 0) {
            if (w > 0) {
                for (let x = 0; x < w; x++) {
                    let y = ((() => {
                        let $ret = new Brush();
                        $ret.fill = r[x][o];
                        return $ret;
                    })());
                    a.b.add(y);
                }
            }
            else {
                a.b.add(((() => {
                    let $ret = new Brush();
                    $ret.fill = "#FFFFFF";
                    return $ret;
                })()));
            }
        }
        if (j == 0) {
            if (w > 0) {
                for (let z = 0; z < w; z++) {
                    let aa = ((() => {
                        let $ret = new Brush();
                        $ret.fill = r[z][p];
                        return $ret;
                    })());
                    a.c.add(aa);
                }
            }
            else {
                for (let ab of fromEnum(a.a)) {
                    a.c.add(ab);
                }
            }
        }
        let ac = this.af.getCssDefaultPropertyValue("ui-chart-axis", "border-top-color");
        if (ac != null) {
            a.i = new Brush();
            a.i._fill = ac;
        }
        else {
            let ad = new Brush();
            ad._fill = "#989EA3";
            a.i = ad;
        }
        a.k = new Brush();
        a.k._fill = this.af.getCssDefaultPropertyValue("", "color");
        a.j = a.k;
        let ae = this.af.getCssDefaultPropertyValue("ui-chart-crosshair", "border-top-color");
        if (ae != null) {
            a.j = new Brush();
            a.j._fill = ae;
        }
        this.af.endCSSQuery();
        a.h = FontUtil.getFont(this.af);
        let af = ((() => {
            let $ret = new Brush();
            $ret.fill = "#C62828";
            return $ret;
        })());
        a.d = new BrushCollection();
        a.d.add(af);
        a.e = new BrushCollection();
        a.e.add(af);
        return a;
    }
    a6(a, b, c, d, e, f) {
        this.af.startCSSQuery();
        let g = this.af.getCssDefaultPropertyValue("ui-chart-area-fill-opacity", "opacity");
        a = g != null ? parseFloat(g) : 1;
        b = new Array(4);
        let h = this.af.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-top");
        let i = this.af.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-right");
        let j = this.af.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-bottom");
        let k = this.af.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-left");
        b[0] = h != null ? parseFloat(h) : NaN;
        b[1] = i != null ? parseFloat(i) : NaN;
        b[2] = j != null ? parseFloat(j) : NaN;
        b[3] = k != null ? parseFloat(k) : NaN;
        c = d = null;
        let l = this.af.getCssDefaultPropertyValue("ui-chart-axis-stroke", "border-top-color");
        if (l != null) {
            let m = new Brush();
            m._fill = l;
            c = m;
        }
        let n = this.af.getCssDefaultPropertyValue("ui-chart-axis-major-line", "border-top-color");
        if (n != null) {
            let o = new Brush();
            o._fill = n;
            d = o;
        }
        let p = this.af.getCssDefaultPropertyValue("ui-chart-aligned-gridlines", "visibility");
        f = p != null && p == "visible";
        let q = this.af.getCssDefaultPropertyValue("ui-chart-category-axis-tick", "height");
        if (q != null) {
            e = parseFloat(q);
            if (Math.abs(e) > 4000) {
                e = 0;
            }
        }
        else {
            q = this.af.getCssDefaultPropertyValue("ui-chart-category-axis-tick", "width");
            e = q != null ? parseFloat(q) : 0;
        }
        this.af.endCSSQuery();
        return {
            p0: a,
            p1: b,
            p2: c,
            p3: d,
            p4: e,
            p5: f
        };
    }
    ax() {
        this.ai.removeChildren();
    }
    br(x_) {
        let box_ = this.ai;
        let offset_ = this.f.bc(this.ai);
        let a = this.b5();
        x_ = a.x + this.j.n.m3.left + x_;
        box_.setOffset(x_, this.j.n.m3.top + this.ad + a.y);
    }
    bs(y_) {
        this.ad = y_;
        let box_ = this.ai;
        let offset_ = this.ai.getOffset();
        let a = this.b5();
        y_ = this.j.n.m3.top + this.ad + a.y;
        box_.setOffset(offset_.left, y_);
    }
    at(a) {
        let b = a;
        b.show();
        this.ai.append(b);
    }
    a8() {
        this.ai.hide();
    }
    bl() {
        this.ai.show();
    }
    au(a) {
        this.af.appendToBody(a);
    }
    bh(a) {
        a.remove();
    }
    bc() {
        if (this.af == null) {
            return;
        }
        this.j.ct(this.af.rootWrapper.width(), this.af.rootWrapper.height());
    }
    p() {
        return this.l;
    }
    cb() {
        return this.b7;
    }
    as() {
        return this.aq;
    }
    ar() {
        return this.ap;
    }
    ca() {
        return this.b6;
    }
    b2() {
        return this.bx;
    }
    b1() {
        return this.bw;
    }
    o() {
        return this.k;
    }
    c() {
        return this.a;
    }
    d() {
        return this.b;
    }
    r() {
        return this.n;
    }
    b4() {
        return this.bz;
    }
    q() {
        return this.m;
    }
    b3() {
        return this.by;
    }
    cc() {
        return this.b8;
    }
    cd() {
        return this.b9;
    }
    bm() {
        this.af.startCSSQuery();
        this.bo();
        this.bn();
        this.bq();
        this.bp();
        this.bu();
        this.af.endCSSQuery();
    }
    bu() {
        let a = "ui-chart-pointer-tooltip";
        let b = this.af.getCssDefaultPropertyValue(a, "background-color");
        let c = this.af.getCssDefaultPropertyValue(a, "border-top-color");
        let d = this.af.getCssDefaultPropertyValue(a, "border-top-left-radius");
        let e = this.af.getCssDefaultPropertyValue(a, "border-top-width");
        let f = new PointerTooltipStyle();
        f.a = d != null ? parseFloat(d) : 0;
        f.c = b != null ? Brush.create(b) : ((() => {
            let $ret = new Brush();
            $ret.fill = "white";
            return $ret;
        })());
        f.d = c != null ? Brush.create(c) : ((() => {
            let $ret = new Brush();
            $ret.fill = "gray";
            return $ret;
        })());
        f.b = e != null ? parseFloat(e) : 0;
        this.h = f;
    }
    bo() {
        let a = "ui-chart-title";
        this.l = FontUtil.getFontForClass(this.af, a);
        this.bx = ((() => {
            let $ret = new Brush();
            $ret.fill = this.af.getCssDefaultPropertyValue(a, "color");
            return $ret;
        })());
        this.aq = this.af.getCssDefaultPropertyValue(a, "text-align");
        if (this.aq == null) {
            this.aq = "center";
        }
        let b = this.af.getCssDefaultPropertyValue(a, "margin-top");
        let c = this.af.getCssDefaultPropertyValue(a, "margin-bottom");
        let d = this.af.getCssDefaultPropertyValue(a, "margin-left");
        let e = this.af.getCssDefaultPropertyValue(a, "margin-right");
        let f = b != null ? parseFloat(b) : 0;
        let g = c != null ? parseFloat(c) : 0;
        let h = d != null ? parseFloat(d) : 0;
        let i = e != null ? parseFloat(e) : 0;
        this.b7 = new Thickness(1, h, f, i, g);
    }
    bn() {
        let a = "ui-chart-subtitle";
        this.k = FontUtil.getFontForClass(this.af, a);
        this.bw = ((() => {
            let $ret = new Brush();
            $ret.fill = this.af.getCssDefaultPropertyValue(a, "color");
            return $ret;
        })());
        this.ap = this.af.getCssDefaultPropertyValue(a, "text-align");
        if (this.ap == null) {
            this.ap = "center";
        }
        let b = this.af.getCssDefaultPropertyValue(a, "margin-top");
        let c = this.af.getCssDefaultPropertyValue(a, "margin-bottom");
        let d = this.af.getCssDefaultPropertyValue(a, "margin-left");
        let e = this.af.getCssDefaultPropertyValue(a, "margin-right");
        let f = b != null ? parseFloat(b) : 0;
        let g = c != null ? parseFloat(c) : 0;
        let h = d != null ? parseFloat(d) : 0;
        let i = e != null ? parseFloat(e) : 0;
        this.b6 = new Thickness(1, h, f, i, g);
    }
    bp() {
        let a = "ui-chart-horizontal-axis-title";
        this.m = FontUtil.getFontForClass(this.af, a);
        this.by = ((() => {
            let $ret = new Brush();
            $ret.fill = this.af.getCssDefaultPropertyValue(a, "color");
            return $ret;
        })());
        let b = this.af.getCssDefaultPropertyValue(a, "vertical-align");
        if (b == null) {
            this.a = 0;
        }
        else if (b.toLowerCase() == "bottom") {
            this.a = 4;
        }
        else {
            this.a = 3;
        }
        let c = this.af.getCssDefaultPropertyValue(a, "margin-top");
        let d = this.af.getCssDefaultPropertyValue(a, "margin-bottom");
        let e = this.af.getCssDefaultPropertyValue(a, "margin-left");
        let f = this.af.getCssDefaultPropertyValue(a, "margin-right");
        let g = c != null ? parseFloat(c) : 2;
        let h = d != null ? parseFloat(d) : 2;
        let i = e != null ? parseFloat(e) : 2;
        let j = f != null ? parseFloat(f) : 2;
        this.b8 = new Thickness(1, i, g, j, h);
    }
    bq() {
        let a = "ui-chart-vertical-axis-title";
        this.n = FontUtil.getFontForClass(this.af, a);
        this.bz = ((() => {
            let $ret = new Brush();
            $ret.fill = this.af.getCssDefaultPropertyValue(a, "color");
            return $ret;
        })());
        let b = this.af.getCssDefaultPropertyValue(a, "text-align");
        if (b == null) {
            this.b = 0;
        }
        else if (b.toLowerCase() == "right") {
            this.b = 2;
        }
        else {
            this.b = 1;
        }
        let c = this.af.getCssDefaultPropertyValue(a, "margin-top");
        let d = this.af.getCssDefaultPropertyValue(a, "margin-bottom");
        let e = this.af.getCssDefaultPropertyValue(a, "margin-left");
        let f = this.af.getCssDefaultPropertyValue(a, "margin-right");
        let g = c != null ? parseFloat(c) : 0;
        let h = d != null ? parseFloat(d) : 0;
        let i = e != null ? parseFloat(e) : 0;
        let j = f != null ? parseFloat(f) : 0;
        this.b9 = new Thickness(1, i, g, j, h);
    }
    a5(a, b) {
        let c = this.j.n.ea;
        if (a != this.ab || b != this.aa || c != this.ac) {
            this.ay(a, b, this.j.n.ea);
            this.j.n.ah.i();
            this.j.a.i();
        }
    }
    i() {
        return this.h;
    }
    ba(a) {
        if (this.f == null) {
            return;
        }
        this.f.z = a;
        this.f.aj = runOn(this.j, this.j.ar);
    }
    ao(a, b, c) {
        let d;
        if (!((() => { let e = this.z.tryGetValue(b.iD.toString(), d); d = e.p1; return e.ret; })())) {
            let e = this.af.createElement("canvas");
            e.setAttribute("width", c.toString());
            e.setAttribute("height", c.toString());
            e.setStyleProperty("width", c.toString() + "px");
            e.setStyleProperty("height", c.toString() + "px");
            let f = this.af.get2DCanvasContext(e);
            let g = new RenderingContext(new CanvasViewRenderer(), f);
            let h = new Tuple$2(DomWrapper_$type, RenderingContext.$, e, g);
            d = h;
            this.z.addItem(b.iD.toString(), d);
        }
        let i = new Rect(0, 0, 0, c, c);
        let j = new RenderSurface();
        j.a = d.d;
        for (let k = 0; k < this.j.n.series.count; k++) {
            let l = this.j.n.series._inner[k];
            l.jb(i, a, j, "tile", 1);
        }
        this.j.n.ag.i();
        return d.c;
    }
    a2(a) {
        this.z.removeItem(a.iD.toString());
    }
    a1() {
        this.z.clear();
    }
    bi(a) {
        for (let b = 0; b < a.count; b++) {
            let c = a._inner[b];
            let d = c.content;
            this.j.x.m(d.getNativeElement(), 1, c.xPosition + this.j.n.m3.left, c.yPosition + this.j.n.m3.top, c.width, c.height);
        }
    }
    az() {
        if (this.am != -1) {
            this.av();
        }
        if (this.af != null) {
            this.am = this.af.setTimeout(() => this.j.n.a1.f$i(this.j.n), 5000);
        }
        else {
            this.am = window.setTimeout(() => this.j.n.a1.f$i(this.j.n), 5000);
        }
    }
    av() {
        if (this.am != -1) {
            if (this.af != null) {
                this.af.clearTimeout(this.am);
            }
            else {
                window.clearTimeout(this.am);
            }
            this.am = -1;
        }
    }
    a0(a) {
        if (this.an != -1) {
            this.aw();
        }
        if (this.af != null) {
            this.af.setTimeout(() => this.j.n.hj(), a);
        }
        else {
            this.an = window.setTimeout(() => this.j.n.hj(), a);
        }
    }
    aw() {
        if (this.an != -1) {
            if (this.af != null) {
                this.af.clearTimeout(this.an);
            }
            else {
                window.clearTimeout(this.an);
            }
            this.an = -1;
        }
    }
    bd() {
        if (this.j.n.ao != 1) {
            if (this.s == null) {
                this.u = new RenderingContext(new CanvasViewRenderer(), this.af.get2DCanvasContext(this.ah));
                this.s = this.u;
            }
            else {
                this.u = this.s;
            }
        }
        else {
            this.u = new RenderingContext(null, null);
        }
        this.j.di(this.u);
    }
    bt(a) {
        if (this.af != null) {
            let b = "igTouch";
            if (a) {
                this.af.rootWrapper.addClass(b);
            }
            else {
                this.af.rootWrapper.removeClass(b);
            }
        }
    }
    a3() {
    }
    a4() {
    }
}
SeriesViewerViewManager.$t = markType(SeriesViewerViewManager, 'SeriesViewerViewManager');
/**
 * @hidden
 */
export class AutoRangeCalculator extends Base {
    static a(a, b, c, d, e, f, g) {
        f = !isNaN_(b) && !isInfinity(b) ? b : Number.POSITIVE_INFINITY;
        g = !isNaN_(c) && !isInfinity(c) ? c : Number.NEGATIVE_INFINITY;
        let h = f;
        let i = g;
        if (isInfinity(h) || isInfinity(i)) {
            if (a != null) {
                let j = a.ja();
                if (j != null) {
                    h = Math.min(h, j.c);
                    i = Math.max(i, j.b);
                }
            }
        }
        if (!isInfinity(h) && !isInfinity(i)) {
            if (h == i && h != 0) {
                h *= h > 0 ? 0.9 : 1.1;
                i *= i > 0 ? 1.1 : 0.9;
            }
            if (h == i && h == 0) {
                i = 1;
            }
            if (b > c) {
                let k = c;
                c = b;
                b = k;
            }
            let l = isNaN_(b) || isInfinity(b) ? h : b;
            let m = isNaN_(c) || isInfinity(c) ? i : c;
            if (d) {
                if (l <= 0) {
                    if (m > 1) {
                        l = 1;
                    }
                    else {
                        l = Math.pow(e, Math.floor(logBase(m, e)));
                    }
                }
                if (isNaN_(b) || isInfinity(b)) {
                    let n = logBase(l, e);
                    h = Math.pow(e, Math.floor(n));
                }
                else {
                    h = l;
                }
                if (isNaN_(c) || isInfinity(c)) {
                    i = Math.pow(e, Math.ceil(logBase(m, e)));
                }
                else {
                    i = m;
                }
            }
            else {
                let o = Math.pow(10, Math.floor(log10(m - l)) - 1);
                let p = a.du();
                if (a != null && p > 0 && (!a.jr && !a.jq)) {
                    let q = new LinearNumericSnapper(0, h, i, p, a.d8());
                    o = q.g;
                }
                if ((isNaN_(b) || isInfinity(b)) && !isNaN_(h) && !isNaN_(o) && o != 0) {
                    {
                        h = o * Math.floor(h / o);
                    }
                }
                else {
                    h = l;
                }
                if ((isNaN_(c) || isInfinity(c)) && !isNaN_(i) && !isNaN_(o) && o != 0) {
                    let r = Math.ceil(i / o);
                    {
                        i = o * r;
                    }
                }
                else {
                    i = m;
                }
            }
        }
        f = h;
        g = i;
        return {
            p5: f,
            p6: g
        };
    }
}
AutoRangeCalculator.$t = markType(AutoRangeCalculator, 'AutoRangeCalculator');
/**
 * @hidden
 */
export let IAxisAnnotationManager_$type = new Type(null, 'IAxisAnnotationManager');
/**
 * @hidden
 */
export class AxisLabelSettings extends Base {
    constructor() {
        super();
        this.aa = null;
        this.ax = null;
        this.b = 1;
        this.a2 = 0;
        this.h = true;
        this.c = 0;
        this.a = null;
        this.m = 0;
        this.o = NaN;
        this.p = 2;
        this.q = 2;
        this.r = 2;
        this.n = 2;
        this.au = 0;
        this.az = 1;
        this.propertyChanged = null;
        this.propertyUpdated = null;
        this.f = null;
        this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.aq(a, b.propertyName, b.oldValue, b.newValue));
    }
    get textStyle() {
        return this.aa;
    }
    set textStyle(a) {
        let b = this.aa;
        this.aa = a;
        this.ar("TextStyle", b, a);
    }
    get textColor() {
        return this.ax;
    }
    set textColor(a) {
        let b = this.ax;
        this.ax = a;
        this.ar("TextColor", b, a);
    }
    get location() {
        return this.b;
    }
    set location(a) {
        let b = this.b;
        this.b = a;
        this.ar("Location", enumGetBox(AxisLabelsLocation_$type, b), enumGetBox(AxisLabelsLocation_$type, a));
    }
    get visibility() {
        return this.a2;
    }
    set visibility(a) {
        let b = this.a2;
        this.a2 = a;
        this.ar("Visibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, a));
    }
    get showFirstLabel() {
        return this.h;
    }
    set showFirstLabel(a) {
        let b = this.h;
        this.h = a;
        this.ar("ShowFirstLabel", b, a);
    }
    registerAxis(a) {
        this.a = a;
    }
    unregisterAxis(a) {
        this.a = null;
    }
    get angle() {
        return this.m;
    }
    set angle(a) {
        let b = this.m;
        this.m = a;
        this.ar("Angle", b, a);
    }
    get extent() {
        return this.o;
    }
    set extent(a) {
        let b = this.o;
        this.o = a;
        this.ar("Extent", b, a);
    }
    set margin(a) {
        this.topMargin = this.rightMargin = this.bottomMargin = this.leftMargin = a;
    }
    get leftMargin() {
        return this.p;
    }
    set leftMargin(a) {
        let b = this.p;
        this.p = a;
        this.ar("LeftMargin", b, a);
    }
    get rightMargin() {
        return this.q;
    }
    set rightMargin(a) {
        let b = this.q;
        this.q = a;
        this.ar("RightMargin", b, a);
    }
    get topMargin() {
        return this.r;
    }
    set topMargin(a) {
        let b = this.r;
        this.r = a;
        this.ar("TopMargin", b, a);
    }
    get bottomMargin() {
        return this.n;
    }
    set bottomMargin(a) {
        let b = this.n;
        this.n = a;
        this.ar("BottomMargin", b, a);
    }
    get horizontalAlignment() {
        return this.au;
    }
    set horizontalAlignment(a) {
        let b = this.au;
        this.au = a;
        this.ar("HorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, a));
    }
    get verticalAlignment() {
        return this.az;
    }
    set verticalAlignment(a) {
        let b = this.az;
        this.az = a;
        this.ar("VerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, a));
    }
    ar(a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        if (this.propertyUpdated != null) {
            this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
        }
    }
    aq(a, b, c, d) {
        switch (b) {
            case "Location":
                this.c = this.location;
                break;
        }
        if (this.a == null || this.a.bd == null) {
            return;
        }
        switch (b) {
            case "Angle":
                this.a.cf = true;
                this.a.g4();
                break;
            case "TextStyle":
                this.f = null;
                this.a.cf = true;
                if (this.a.bf != null) {
                    this.a.bf.ht();
                }
                this.a.g4();
                break;
            case "Location":
            case "Extent":
            case "Visibility":
            case "HorizontalAlignment":
            case "VerticalAlignment":
            case "TopMargin":
            case "RightMargin":
            case "BottomMargin":
            case "LeftMargin":
            case "ShowFirstLabel":
                this.a.cf = true;
                if (this.a.bf != null) {
                    this.a.bf.ht();
                }
                this.a.g4();
                break;
            case "TextColor":
                this.a.g4();
                break;
        }
    }
    j() {
        return this.m != 0;
    }
    k() {
        return !isNaN_(this.o);
    }
    get i() {
        return this.textStyle != null;
    }
    g(a) {
        if (this.f == null) {
            this.f = FontUtil.toFontInfo(a, this.textStyle);
        }
        return this.f;
    }
}
AxisLabelSettings.$t = markType(AxisLabelSettings, 'AxisLabelSettings', Base.$, [INotifyPropertyChanged_$type]);
AxisLabelSettings.extentPropertyDefault = NaN;
/**
 * @hidden
 */
export class TitleSettings extends AxisLabelSettings {
    constructor() {
        super();
        this.a4 = 0;
        this.horizontalAlignment = 1;
        this.leftMargin = NaN;
        this.rightMargin = NaN;
        this.topMargin = NaN;
        this.bottomMargin = NaN;
    }
    get position() {
        return this.a4;
    }
    set position(a) {
        let b = this.a4;
        this.a4 = a;
        this.ar("AxisTitlePosition", enumGetBox(AxisTitlePosition_$type, b), enumGetBox(AxisTitlePosition_$type, a));
    }
    aq(a, b, c, d) {
        super.aq(a, b, c, d);
        if (this.a == null || this.a.bf == null) {
            return;
        }
        switch (b) {
            case "AxisTitlePosition":
                this.a.cf = true;
                this.a.g4();
                break;
        }
    }
}
TitleSettings.$t = markType(TitleSettings, 'TitleSettings', AxisLabelSettings.$);
/**
 * @hidden
 */
export class Axis extends Control {
    constructor() {
        super();
        this.a2 = null;
        this.bq = null;
        this.a6 = null;
        this.a4 = null;
        this.hi = null;
        this.bk = null;
        this.be = null;
        this.bp = null;
        this.bu = false;
        this.c2 = NaN;
        this.cx = 50;
        this.c8 = 0;
        this.c5 = 150;
        this.ap = 0;
        this.c1 = NaN;
        this.dc = 0;
        this.c7 = 0;
        this.c4 = 180;
        this.bh = null;
        this.bg = null;
        this.e9 = "Verdana";
        this.c3 = NaN;
        this.de = 0;
        this.c9 = 8;
        this.c6 = 16;
        this.eu = -1;
        this.et = 1;
        this.es = 3;
        this.ev = 0;
        this.i6 = 0;
        this.db = 0;
        this.da = 2;
        this.hj = null;
        this.df = 0;
        this.b9 = false;
        this.rangeChanged = null;
        this.ai = new AxisAnnotationCollection();
        this.aj = new AxisAnnotationCollection();
        this.it = Rect.empty;
        this.iz = null;
        this.cu = null;
        this.cv = null;
        this.at = null;
        this.bt = false;
        this.a3 = null;
        this.er = null;
        this._coercionMethods = null;
        this.bs = false;
        this.ci = false;
        this.cp = false;
        this.renderRequested = null;
        this.a9 = null;
        this.cz = NaN;
        this.c0 = -1;
        this.cg = false;
        this.propertyChanged = null;
        this.propertyUpdated = null;
        this.cw = null;
        this.cs = new Dictionary$2(String_$type, String_$type, 0);
        this.cr = new Dictionary$2(String_$type, FastReflectionHelper.$, 0);
        this.i5 = new Size();
        this.am = new AxisComponentsForView();
        this.dh = 0;
        this.cy = 0;
        this.bo = null;
        this.bn = null;
        this.bm = null;
        this.au = new AxisLabelSettings();
        this.eq = null;
        DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
        DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
        this.dh = NaN;
        this.a2 = this.a1();
        this.gr(this.a2);
        this.a2.ag();
        this.bo = ((() => {
            let $ret = new Pool$1(TextBlock.$);
            $ret.create = runOn(this.a2, this.a2.ax);
            $ret.activate = runOn(this.a2, this.a2.aq);
            $ret.disactivate = runOn(this.a2, this.a2.as);
            $ret.destroy = runOn(this.a2, this.a2.ar);
            return $ret;
        })());
        this.bn = ((() => {
            let $ret = new Pool$1(TextBlock.$);
            $ret.create = runOn(this.a2, this.a2.ax);
            $ret.activate = runOn(this.a2, this.a2.aq);
            $ret.disactivate = runOn(this.a2, this.a2.as);
            $ret.destroy = runOn(this.a2, this.a2.ar);
            return $ret;
        })());
        this.bm = ((() => {
            let $ret = new Pool$1(Rectangle.$);
            $ret.create = runOn(this.a2, this.a2.bc);
            $ret.activate = runOn(this.a2, this.a2.p);
            $ret.disactivate = runOn(this.a2, this.a2.r);
            $ret.destroy = runOn(this.a2, this.a2.q);
            return $ret;
        })());
        this.iz = Rect.empty;
        this.cu = new List$1(Base.$, 0);
        this.cv = new List$1(LabelPosition.$, 0);
        this.at = this.as();
        this.at.af = this.aw;
        this.at.ac = this;
        this.cw = new List$1(Series.$, 0);
        let a = this.ai;
        a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.gb));
        let b = this.ai;
        b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.ga));
        let c = this.aj;
        c.collectionResetting = delegateCombine(c.collectionResetting, runOn(this, this.gd));
        let d = this.aj;
        d.collectionChanged = delegateCombine(d.collectionChanged, runOn(this, this.gc));
        this.ab = Axis.$;
        this.propertyUpdated = delegateCombine(this.propertyUpdated, (e, f) => this.gt(e, f.propertyName, f.oldValue, f.newValue));
        this.bp = (e, f) => {
            if (this.bf == null || !this.bf.cn) {
                this.hh(f.oldRect, f.newRect);
            }
        };
        this.a2.v();
    }
    a1() {
        return new AxisView(this);
    }
    gr(a) {
    }
    ge() {
        if (this.b1) {
            this.a5.onAddAnnotations(this);
        }
    }
    get br() {
        if (this.bq == null) {
            this.bq = new SRProvider(this.er);
        }
        if (this.bq.l == null) {
            this.bq.l = this.er;
        }
        return this.bq;
    }
    get a7() {
        if (this.a6 == null) {
            this.a6 = DVContainer.instance.createInstance(IAxisVisualDataManager_$type, () => this.br.q);
        }
        return this.a6;
    }
    du() {
        return this.i0.width;
    }
    e8() {
        return null;
    }
    e7() {
        return null;
    }
    get_b2() {
        return false;
    }
    get b2() {
        return this.get_b2();
    }
    get_ca() {
        return false;
    }
    get ca() {
        return this.get_ca();
    }
    get_b0() {
        return false;
    }
    get b0() {
        return this.get_b0();
    }
    get_cb() {
        return false;
    }
    get cb() {
        return this.get_cb();
    }
    get_ce() {
        return false;
    }
    get ce() {
        return this.get_ce();
    }
    get_cc() {
        return false;
    }
    get cc() {
        return this.get_cc();
    }
    get_b5() {
        return false;
    }
    get b5() {
        return this.get_b5();
    }
    get_b3() {
        return false;
    }
    get b3() {
        return this.get_b3();
    }
    get_b4() {
        return true;
    }
    get b4() {
        return this.get_b4();
    }
    ah() {
        return this.ag;
    }
    get a5() {
        if (this.a4 == null) {
            this.a4 = DVContainer.instance.createInstance(IAxisAnnotationManager_$type, () => this.br.n);
            this.a4.owner = this;
        }
        return this.a4;
    }
    get b1() {
        return DVContainer.instance.checkLoaded("AnnotationFactoryManager");
    }
    gc(a, b) {
        if (!this.b1) {
            return;
        }
        this.a5.onAutoAnnotionsChanged(this, this.aj, b);
    }
    gd(a, b) {
        if (!this.b1) {
            return;
        }
        this.a5.onAutoAnnotionsReset(this, this.aj, b);
    }
    ga(a, b) {
        if (!this.b1) {
            return;
        }
        this.a5.onAnnotionsChanged(this, this.ai, b);
    }
    gb(a, b) {
        if (!this.b1) {
            return;
        }
        this.a5.onAnnotionsReset(this, this.ai, b);
    }
    provideRenderer(a) {
        this.er = a;
        this.gf();
        this.at.af = this.aw;
    }
    go(a, b) {
        if (!a.equals1(b)) {
            this.hg(a, b);
        }
    }
    ac() {
        super.ac();
        this.a2.aj();
    }
    get bl() {
        return this.bk;
    }
    set bl(a) {
        if (this.bl != a) {
            let b = this.bl;
            this.bk = a;
            this.gz("FastItemsSourceProvider", b, this.bk);
        }
    }
    get bf() {
        return this.be;
    }
    set bf(a) {
        if (this.bf != a) {
            let b = this.bf;
            this.be = a;
            this.gz("SeriesViewer", b, this.be);
        }
    }
    get bd() {
        return typeCast(XamDataChart.$, this.bf);
    }
    set bd(a) {
        this.bf = a;
    }
    get co() {
        return this.bu;
    }
    set co(a) {
        if (this.bu == a) {
            return;
        }
        this.bu = a;
        let b = null;
        if (this.at != null && Rect.l_op_Inequality(this.at.cn, null)) {
            b = this.at.cn;
        }
        this.at = this.as();
        this.at.ac = this;
        this.at.af = this.aw;
        if (Rect.l_op_Inequality(b, null)) {
            this.at.cn = b;
        }
        if (this.bf != null && this.bf.bn != null) {
            this.at.ae.ak(this.bf.bn.w);
            this.g3(true);
        }
    }
    get ec() {
        return this.c2;
    }
    set ec(a) {
        let b = this.c2;
        if (b != a) {
            this.c2 = a;
            this.dd = a;
            this.g3(true);
        }
    }
    get dd() {
        return this.cx;
    }
    set dd(a) {
        this.cx = a;
    }
    get ei() {
        return this.c8;
    }
    set ei(a) {
        this.c8 = a;
        this.g3(true);
    }
    get ef() {
        return this.c5;
    }
    set ef(a) {
        this.c5 = a;
        this.g3(true);
    }
    get aq() {
        return this.ap;
    }
    set aq(a) {
        let b = this.ap;
        if (b != a) {
            this.ap = a;
            this.g3(true);
        }
    }
    get eb() {
        return this.c1;
    }
    set eb(a) {
        this.c1 = a;
        this.g2();
    }
    get eh() {
        return this.c7;
    }
    set eh(a) {
        this.c7 = a;
        this.g2();
    }
    get ee() {
        return this.c4;
    }
    set ee(a) {
        this.c4 = a;
        this.g2();
    }
    get bj() {
        if (this.bh == null) {
            if (this.bg == null) {
                this.bg = this.a2.i();
            }
            return this.bg;
        }
        return this.bh;
    }
    set bj(a) {
        this.bh = a;
        this.c3 = FontUtil.getFontSize(this.bh);
        this.g2();
    }
    get fx() {
        return this.e9;
    }
    set fx(a) {
        this.e9 = a;
        let b = this.c3;
        if (isNaN_(b)) {
            b = 12;
        }
        this.bj.n = a;
        this.bj.d = b;
        this.at.bz();
        this.g2();
    }
    get ed() {
        return this.c3;
    }
    set ed(a) {
        this.c3 = a;
        this.bj = FontUtil.getFontWithNewFontSize(this.bj, this.c3);
        this.g2();
    }
    get ej() {
        return this.c9;
    }
    set ej(a) {
        this.c9 = a;
        this.g2();
    }
    get eg() {
        return this.c6;
    }
    set eg(a) {
        this.c6 = a;
        this.g2();
    }
    get ez() {
        return this.eu;
    }
    set ez(a) {
        this.eu = a;
        this.g2();
    }
    get ey() {
        return this.et;
    }
    set ey(a) {
        this.et = a;
        this.g2();
    }
    get ex() {
        return this.es;
    }
    set ex(a) {
        this.es = a;
        this.g2();
    }
    get i9() {
        return this.i6;
    }
    set i9(a) {
        this.i6 = a;
        this.g2();
    }
    get el() {
        return this.db;
    }
    set el(a) {
        this.db = a;
        this.g2();
    }
    get ek() {
        return this.da;
    }
    set ek(a) {
        this.da = a;
        this.g2();
    }
    ha() {
        this.at.ce();
    }
    g2() {
        this.g3(false);
    }
    g3(a) {
        if (a) {
            this.at.cd();
        }
        this.cf = true;
        this.g1();
    }
    hc() {
        if (this.en > 0) {
            this.df = this.en;
            return;
        }
        let a = typeCast(XamDataChart.$, this.bf);
        if (a != null && isNaN_(this.en) && this.b2 && (this.ce || this.az == 0)) {
            this.df = a.nj.fd;
            return;
        }
        this.df = 0;
    }
    get cn() {
        return this.c(Axis.ib);
    }
    set cn(a) {
        this.h(Axis.ib, a);
    }
    dj() {
        return 0;
    }
    ic() {
        if (this.ce) {
            return 2;
        }
        return 0;
    }
    i7() {
        return 1;
    }
    id() {
        return 1;
    }
    i8() {
        return 1;
    }
    dl() {
        if (this.ce) {
            return DeviceUtils.g(5);
        }
        return 0;
    }
    dn() {
        if (!this.ce && !this.b0) {
            return DeviceUtils.g(5);
        }
        return 0;
    }
    dm() {
        if (this.ce) {
            return DeviceUtils.g(5);
        }
        return 0;
    }
    dk() {
        if (!this.ce && !this.b0) {
            return DeviceUtils.g(5);
        }
        return 0;
    }
    dr() {
        return NaN;
    }
    dt() {
        return NaN;
    }
    ds() {
        return NaN;
    }
    dq() {
        return NaN;
    }
    ax() {
        if (this.ce) {
            return 2;
        }
        if (this.cb) {
            return 5;
        }
        return 1;
    }
    ay() {
        return 1;
    }
    g0(a) {
        if (this.rangeChanged != null) {
            this.rangeChanged(this, a);
        }
    }
    dp() {
        if (this.ce) {
            return -90;
        }
        return 0;
    }
    di() {
        return NaN;
    }
    get ak() {
        return this.ai;
    }
    get al() {
        return this.aj;
    }
    get i0() {
        if (this.iz.isEmpty) {
            return this.it;
        }
        return this.iz;
    }
    set i0(a) {
        this.it = a;
    }
    hd() {
        let a = 0;
        let b = typeCast(XamDataChart.$, this.bf);
        if (b != null && b.ng == 0) {
            a = 1;
        }
        this.a2.av(a);
    }
    cq(a, b, c) {
        return this.bf != null;
    }
    cd() {
        let a = Rect.empty;
        if (this.bf != null) {
            a = this.bf.m4;
        }
        return this.cq(this.i0, a, this.a2);
    }
    hg(a, b) {
        this.i0 = b;
        this.cf = true;
        this.ck();
        this.g5(false);
        if (this.bf != null) {
            this.bf.al.ad(1, this, this.a3, b);
        }
    }
    get cf() {
        return this.bt;
    }
    set cf(a) {
        this.bt = a;
    }
    ix() {
        if (this.bf == null || this.bf.mu.isEmpty) {
            return Rect.empty;
        }
        let a = this.bf.mu;
        let b = this.i0;
        let c = (a.left - b.left) / b.width;
        let d = (a.top - b.top) / b.height;
        let e = (a.right - b.left) / b.width;
        let f = (a.bottom - b.top) / b.height;
        return new Rect(0, c, d, e - c, f - d);
    }
    hh(a, b) {
        this.cf = true;
        this.g5(true);
    }
    g1() {
        this.g5(false);
    }
    gt(a, b, c, d) {
        switch (b) {
            case "SeriesViewer":
                let e = typeCast(SeriesViewer.$, c);
                if (e != null) {
                    this.er = null;
                    e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, this.bp);
                    e.al.ac(1, this);
                    this.a2.aa(e);
                }
                let f = typeCast(SeriesViewer.$, d);
                if (f != null) {
                    this.er = f.bn.i.af;
                    f.actualWindowRectChanged = delegateCombine(f.actualWindowRectChanged, this.bp);
                    this.a3 = f.al.k(1, this, runOn(this, this.gj));
                    if (this.aw == null && this.er != null) {
                        this.provideRenderer(this.er);
                    }
                    this.a2.u(f);
                    if (this.cg && !this.a3.e) {
                        this.cg = false;
                        this.ck();
                    }
                    this.hb();
                    this.hc();
                }
                break;
            case Axis.$$p[7]:
                this.g5(false);
                break;
            case Axis.$$p[8]:
                this.b9 = this.b8;
                let g = new AxisRangeChangedEventArgs(0, 0, 0, 1, 1);
                this.gi(g);
                for (let h of fromEnum(this.cw)) {
                    h.ia();
                    if (h.bs != null) {
                        h.ij();
                    }
                }
                break;
            case Axis.$$p[9]:
                this.a2.ah();
                if (typeCast(DataTemplate.$, d) !== null) {
                    this.cp = true;
                }
                else {
                    this.cp = false;
                }
                this.cf = true;
                this.g8();
                this.g5(false);
                break;
            case Axis.$$p[13]:
            case Axis.$$p[16]:
            case Axis.$$p[20]:
                this.g5(false);
                break;
            case Axis.$$p[10]:
                let i = typeCast(AxisLabelSettings.$, d);
                if (i != null) {
                    i.registerAxis(this);
                    this.au = i;
                }
                else {
                    this.au = new AxisLabelSettings();
                }
                if (this.at != null) {
                    this.at.af = this.au;
                }
                if (this.a2.m()) {
                    this.a2.w(this.au);
                }
                this.cf = true;
                this.g5(false);
                break;
            case Axis.$$p[25]:
                this.a2.ak();
                break;
            case Axis.$$p[26]:
                let j = typeCast(TitleSettings.$, d);
                if (j != null) {
                    j.registerAxis(this);
                }
                else {
                    j = new TitleSettings();
                }
                if (this.hj != null) {
                    this.hj.dataContext = j;
                }
                this.a2.ak();
                this.g5(false);
                break;
            case Axis.$$p[21]:
                this.cf = true;
                this.hc();
                this.a2.ad();
                this.g5(false);
                break;
            case Axis.$$p[5]:
            case "UseEnhancedIntervalManagement":
                this.cf = true;
                this.g5(false);
                break;
            case Axis.$$p[3]:
                if (this.bf != null) {
                    this.bf.ht();
                }
                break;
            case Axis.$$p[15]:
                this.hb();
                if (d != null) {
                    this.ci = true;
                    this.g5(false);
                }
                else {
                    this.ci = false;
                }
                break;
            case Axis.$$p[4]:
                if (this.ag != null) {
                    this.ag.g4();
                }
                break;
            case Axis.$$p[19]:
            case Axis.$$p[12]:
                this.hb();
                this.g5(false);
                break;
            case Axis.$$p[18]:
            case Axis.$$p[11]:
            case Axis.$$p[14]:
            case Axis.$$p[6]:
            case Axis.$$p[23]:
            case Axis.$$p[24]:
            case Axis.$$p[22]:
            case Axis.$$p[2]:
            case Axis.$$p[0]:
            case Axis.$$p[1]:
            case Axis.$$p[17]:
                this.g5(false);
                break;
            case "MinExtent":
                this.a2.ad();
                break;
        }
    }
    get coercionMethods() {
        return this._coercionMethods;
    }
    set coercionMethods(a) {
        this._coercionMethods = a;
    }
    get_expectFunctions() {
        return this.bs;
    }
    set_expectFunctions(a) {
        this.bs = a;
    }
    get expectFunctions() {
        return this.get_expectFunctions();
    }
    set expectFunctions(a) {
        this.set_expectFunctions(a);
    }
    g8() {
        this.bo.count = 0;
        this.bn.count = 0;
        this.bm.count = 0;
        if (this.a2.m()) {
            this.a2.an();
        }
    }
    gq(a, b, c, d) {
        let e = Math.min(b, c);
        let f = Math.max(b, c);
        if (e < d.bottom && f > d.top) {
            let g = new RectangleGeometry();
            g.d = new Rect(0, d.left, e, d.width, f - e);
            a.add(g);
        }
    }
    gp(a, b, c, d, e) {
        let f = b <= c.bottom && b >= c.top;
        if (!e && f) {
            f = !this.b7(b, d.c, c, false);
        }
        if (f) {
            if (d.a) {
                b = this.dg(b, c.top, c.bottom, d);
            }
            let g = new LineGeometry();
            g.c = { $type: Point_$type, x: c.left, y: b };
            g.b = { $type: Point_$type, x: c.right, y: b };
            a.add(g);
        }
    }
    hf(a, b, c, d) {
        let e = Math.min(b, c);
        let f = Math.max(b, c);
        if (f > d.left && e < d.right) {
            let g = new RectangleGeometry();
            g.d = new Rect(0, e, d.top, f - e, d.height);
            a.add(g);
        }
    }
    he(a, b, c, d, e) {
        let f = b >= c.left && b <= c.right;
        if (!f) {
            let g = truncate(Math.round(b));
            let h = truncate(Math.round(c.left));
            let i = truncate(Math.round(c.right));
            if (g >= h && g <= i) {
                f = true;
            }
        }
        if (!e && f) {
            f = !this.b7(b, d.c, c, true);
        }
        if (f) {
            if (d.a) {
                b = this.dg(b, c.left, c.right, d);
            }
            let j = new LineGeometry();
            j.c = { $type: Point_$type, x: b, y: c.top };
            j.b = { $type: Point_$type, x: b, y: c.bottom };
            a.add(j);
        }
    }
    b7(a, b, c, d) {
        let e = false;
        let f = typeCast(XamDataChart.$, this.bf);
        if (f != null && f.nu && !c.isEmpty) {
            for (let g of fromEnum(f.axes)) {
                if (g._visibility != 0 || g.em < 1 || g.ih == null || BrushUtilCore.a(g.ih) || g.i0.isEmpty) {
                    continue;
                }
                if (g.ag != null && g.by()) {
                    let h = this.ce ? c.left : c.top;
                    let i = 0;
                    let j = g.g9(h, i, g.bf.m4, c, g.iv(), d ? c.left : c.top, d ? c.right : c.bottom);
                    h = j.p0;
                    i = j.p1;
                    let k = Rect.empty;
                    let l = Rect.empty;
                    if (d && g.ce) {
                        k = new Rect(0, h - (g.em / 2), g.i0.top, g.em, g.i0.height);
                        l = new Rect(0, a - (b / 2), c.top, b, c.height);
                    }
                    else if (!d && !g.ce) {
                        k = new Rect(0, g.i0.left, h - (g.em / 2), g.i0.width, g.em);
                        l = new Rect(0, c.left, a - (b / 2), c.width, b);
                    }
                    if (k.left <= l.right && l.left <= k.right && k.top <= l.bottom && l.top <= k.bottom) {
                        e = true;
                        break;
                    }
                }
                else {
                    let m = Rect.empty;
                    let n = Rect.empty;
                    if (d && g.ce) {
                        m = new Rect(0, g.i0.left, g.i0.top, g.em, g.i0.height);
                        n = new Rect(0, a - (b / 2), c.top, b, c.height);
                    }
                    else if (!d && !g.ce) {
                        m = new Rect(0, g.i0.left, g.i0.bottom - (g.em / 2), g.i0.width, g.em);
                        n = new Rect(0, c.left, a - (b / 2), c.width, b);
                    }
                    if (m.left <= n.right && n.left <= m.right && m.top <= n.bottom && n.top <= m.bottom) {
                        e = true;
                        break;
                    }
                }
            }
        }
        return e;
    }
    g9(a, b, c, d, e, f, g) {
        let h = Math.abs(f - g);
        a = this.e1;
        a = this.ag.ea(a);
        let i = typeCast(CategoryAxisBase.$, this.ag);
        if (i != null && i.categoryMode == 2) {
            let j = 0.5 * i.getCategorySize(c, d, e);
            let k = i.az == 0;
            if (i.b8 == k) {
                j = -j;
            }
            a = a + j;
        }
        b = a - f;
        if (a < f) {
            a = f;
        }
        else if (a > g) {
            a = g;
        }
        if (b < 0) {
            b = 0;
        }
        else if (b > h) {
            b = h;
        }
        return {
            p0: a,
            p1: b
        };
    }
    dg(a, b, c, d) {
        let e = a;
        if (d != null && d.c > 0) {
            let f = d.c % 2;
            if (f == 0 || f == 1) {
                let g = 1;
                e = Math.floor(a);
                if (e + 0.5 < a) {
                    g = -1;
                    e = Math.ceil(a);
                }
                if (f == 1) {
                    e += 0.5 * g;
                }
                if (e >= c) {
                    e -= 1;
                }
                else if (e <= b) {
                    e += 1;
                }
            }
        }
        return e;
    }
    gh(a) {
        this.a2.z(a);
    }
    gg() {
        this.bo.count = 0;
        this.bn.count = 0;
        this.bm.count = 0;
        this.a2.x();
        this.cu.clear();
        this.cv.clear();
    }
    g4() {
        this.g5(false);
    }
    g5(a) {
        if (this.bf != null) {
            this.bf.al.ab(1, this, this.a3, a);
            if (this.renderRequested != null) {
                let b = new RenderRequestedEventArgs();
                b.animate = a;
                this.renderRequested(this, b);
                a = b.animate;
            }
        }
    }
    d9() {
        if (this.a9 == null) {
            return -1;
        }
        if (isNaN_(this.a9.a)) {
            return -1;
        }
        if (this.aw != null && (this.aw.angle != 0)) {
            return -1;
        }
        return Math.max(Axis.d4, this.a9.a);
    }
    d7() {
        if (this.a9 == null) {
            return -1;
        }
        if (isNaN_(this.a9.c) && isNaN_(this.cz)) {
            return -1;
        }
        if (this.aw != null && (this.aw.angle != 0)) {
            return -1;
        }
        let a = this.a9.c;
        if (!isNaN_(this.cz) && this.ew == -1) {
            return this.cz;
        }
        return Math.max(Axis.d4, this.a9.c);
    }
    d8() {
        if (this.ce) {
            return this.d9();
        }
        else {
            return this.d7();
        }
    }
    get cj() {
        return this.ew == -1;
    }
    gj(a) {
        if (this.a2.l()) {
            return;
        }
        let b = 0;
        let c = 0;
        if (this.cv != null && this.cv.count > 0) {
            b = this.cv._inner[this.cv.count - 1].c;
            c = this.cv.count;
        }
        if (this.cf && this.cn) {
            this.a9 = this.a8();
        }
        this.g6(a);
        if (!this.ce && this.cf && this.cn && this.cj) {
            if (this.bw()) {
                this.g6(a);
            }
        }
        let d = 1;
        let e = 0;
        if (this.cv != null && this.cv.count > 0) {
            d = this.cv._inner[this.cv.count - 1].c;
            e = this.cv.count;
        }
        if (this.co) {
            this.cf = true;
        }
        let f = false;
        if (d != b || e != c || this.cf) {
            this.cf = false;
            if (this.a2.m()) {
                this.a2.ad();
                f = true;
            }
        }
        this.a2.ac();
        if (!f) {
            this.gk();
        }
    }
    bw() {
        if (!isNaN_(this.cz) || this.cu == null || this.cu.count == 0) {
            return false;
        }
        let a = this.bi();
        if (a == null) {
            return false;
        }
        let b = -1.7976931348623157E+308;
        for (let c = 0; c < this.cu.count; c++) {
            let d = this.cu._inner[c];
            if (typeof d === 'string') {
                let e = FontUtil.measureStringWidth(d, a, this.a2.j);
                b = Math.max(e, b);
            }
        }
        b += 5;
        if (this.aw != null) {
            b += this.aw.leftMargin + this.aw.rightMargin;
        }
        this.cz = b;
        return true;
    }
    g7() {
        this.cz = NaN;
        this.g5(false);
    }
    a8() {
        let a = this.bi();
        if (a == null) {
            return null;
        }
        let b = "W";
        let c = FontUtil.measureStringWidth(b, a, this.a2.j);
        if (this.c0 != c || this.a9 == null) {
            this.c0 = c;
            let d = FontUtil.getCurrentFontHeight(this.bf.bn.i.af, a);
            if (this.a9 == null) {
                this.a9 = new LabelFontHeuristics();
            }
            this.a9.a = d;
            this.a9.b = this.ew;
            this.a9.d = c;
            this.a9.c = this.a9.d * this.a9.b;
        }
        return this.a9;
    }
    bi() {
        let a = null;
        if (this.bf != null) {
            a = this.bf.getFontInfo();
        }
        if (this.aw != null && this.aw.i) {
            if (this.bf != null) {
                a = this.aw.g(this.bf.bn.i.af);
            }
        }
        return a;
    }
    gk() {
        if (!this.a2.m()) {
            return;
        }
        if (!this.bz()) {
            this.a2.ab();
        }
    }
    ck() {
        return this.cl(false);
    }
    cl(a) {
        if (a || this.bf == null) {
            let b = this.cm();
            if (b) {
                this.cf = true;
            }
            this.cg = false;
            return b;
        }
        if (!this.cg) {
            this.cg = true;
            this.bf.al.aa(this, this.a3);
        }
        return false;
    }
    cm() {
        return false;
    }
    g6(a) {
        if (this.hj != null) {
            if ((this.bc == null || this.bc.visibility == 0) && (this.aw == null || this.aw.visibility == 0) && this.f6 != null) {
                this.hj._visibility = 0;
            }
            else {
                this.hj._visibility = 1;
            }
        }
    }
    hb() {
        let a = typeCast(XamDataChart.$, this.bf);
        if (a == null) {
            return;
        }
        let b = null, c = null, d = null;
        if (this.b2 && !this.b0) {
            b = a.po;
            for (let e of fromEnum(this.cw)) {
                if (e.c4 || e.c2 || e.c0 || e.c2) {
                    c = a.pm;
                    d = a.pn;
                    break;
                }
            }
        }
        else if (this.ca && !this.b0) {
            c = a.pm;
            d = a.pn;
            b = this.ag != null ? a.po : null;
            for (let f of fromEnum(this.cw)) {
                if (f.c4 || f.c2 || f.c0 || f.c2) {
                    b = a.po;
                    break;
                }
            }
        }
        else if (this.b0 || this.az == 3) {
            b = a.po;
            c = a.pm;
            d = a.pn;
        }
        this.ih = this.il != null ? this.il : b;
        this.ie = this.ii != null ? this.ii : c;
        this.ig = this.ij != null ? this.ij : d;
    }
    gz(a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        if (this.propertyUpdated != null) {
            this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
        }
    }
    ch(a) {
        let b = this.cw.contains(a);
        if (!b) {
            this.cw.add(a);
        }
        this.hb();
        return !b;
    }
    bv(a) {
        let b = this.cw.contains(a);
        if (b) {
            this.cw.remove(a);
        }
        this.hb();
        return b;
    }
    e3(a, b) {
        let c = this.fu(b);
        if (c == Axis.$$p[9]) {
            return this.e4(a, b, this.e6);
        }
        return null;
    }
    fu(a) {
        if (!this.cs.containsKey(a)) {
            let b = a.charAt(0).toUpperCase() + a.substr(1);
            this.cs.addItem(a, b);
        }
        return this.cs.item(a);
    }
    e4(a, b, c) {
        let d = null;
        if (!this.cr.containsKey(b)) {
            d = new FastReflectionHelper(false, c);
            this.cr.addItem(b, d);
        }
        else {
            d = this.cr.item(b);
        }
        d.propertyName = c;
        return d.getPropertyValue(a);
    }
    e5(a) {
        return this.a2.n(a);
    }
    fi(a) {
        return this.a2.o(a);
    }
    d6() {
        return NaN;
    }
    dv(a, b) {
        return 0;
    }
    dw(a, b, c) {
        return 0;
    }
    iw(a) {
        if (this.bf == null) {
            return Rect.empty;
        }
        if (!a.equals1(this.i0)) {
            return Rect.empty;
        }
        return this.bf.mu;
    }
    iv() {
        if (this.bf == null) {
            return Rect.empty;
        }
        return this.bf.mu;
    }
    iu() {
        if (this.bf == null || this.bf.mt.isEmpty) {
            return this.i0;
        }
        return this.bf.mt;
    }
    iy(a, b) {
        if (b.isEmpty) {
            return a;
        }
        return b;
    }
    dx(a, b, c) {
        let d = this.iw(c);
        let e = new ScalerParams(0, b, c, this.b8, d);
        return this.dv(a, e);
    }
    gm(a, b, c, d) {
    }
    gl(a, b, c, d, e) {
    }
    dy(a, b) {
        return 0;
    }
    dz(a, b, c) {
        return 0;
    }
    d0(a, b, c) {
        let d = this.iw(c);
        let e = new ScalerParams(0, b, c, this.b8, d);
        return this.dy(a, e);
    }
    gn(a, b, c, d) {
    }
    ea(a) {
        let b = this.iv();
        let c = new ScalerParams(0, this.bf.m4, this.i0, this.b8, b);
        return this.dv(a, c);
    }
    gs() {
        this.iz = new Rect(0, 0, 0, this.i5.width, this.i5.height);
    }
    an() {
        this.am.a = this.at;
        return this.am;
    }
    get d3() {
        return this.cy;
    }
    set d3(a) {
        let b = this.d3;
        if (a != b) {
            this.cy = a;
            this.gz("MinExtent", b, this.d3);
        }
    }
    bz() {
        if (!isNaN_(this.dh)) {
            return true;
        }
        if (this.aw == null) {
            return false;
        }
        else {
            return this.aw.k();
        }
    }
    d1() {
        if (!isNaN_(this.dh)) {
            return this.dh;
        }
        if (this.aw == null) {
            return 50;
        }
        return this.aw.extent;
    }
    gf() {
        this.a2.t();
    }
    gi(a) {
        this.g0(a);
    }
    get i1() {
        return this.ao().a;
    }
    get i2() {
        return this.ao().b;
    }
    get i4() {
        return this.a2.c().d;
    }
    get i3() {
        return this.ao().c;
    }
    bb() {
        return SyncManager.a(this.be);
    }
    ao() {
        return this.a2.c();
    }
    get av() {
        return this.au;
    }
    gu(a, b) {
        if (this.at != null) {
            this.at.b9(a);
        }
        this.a2.af(a, b);
    }
    by() {
        return this.e1 != null;
    }
    e2() {
        return this.a7.exportVisualData(this);
    }
    *_ct() {
        for (let a = 0; a < this.cw.count; a++) {
            let b = this.cw._inner[a];
            yield b;
        }
    }
    ct() {
        return toEnum(() => this._ct());
    }
    gv(a) {
    }
    gy(a) {
    }
    gx(a) {
    }
    is(a, b, c, d = null, e = null) {
        if (this.ce) {
            let f = new LineGeometry();
            f.c = { $type: Point_$type, x: c.left, y: a };
            f.b = { $type: Point_$type, x: c.right, y: a };
            return f;
        }
        else {
            let g = new LineGeometry();
            g.c = { $type: Point_$type, x: a, y: c.bottom };
            g.b = { $type: Point_$type, x: a, y: c.top };
            return g;
        }
    }
}
Axis.$t = markType(Axis, 'Axis', Control.$, [INotifyPropertyChanged_$type]);
Axis.ib = DependencyProperty.i("UseEnhancedIntervalManagement", Boolean_$type, Axis.$, new PropertyMetadata(2, false, (a, b) => a.gz("UseEnhancedIntervalManagement", b.oldValue, b.newValue)));
Axis.d4 = 7;
Type.dep(DependencyProperty, PropertyMetadata, Axis, 'gz', ['ActualMajorStroke:ie:hk', [Brush.$], 'ActualMinorStroke:ig:hl', [Brush.$], 'ActualStroke:ih:hm', [Brush.$], 'CrossingAxis:ag:hn', [Axis.$], 'CrossingValue:e1:ho', [4, null], 'EnhancedIntervalMinimumCharacters:ew:hp', [1, -1], 'FormatLabel:ar:hq', [Delegate_$type], 'IsDisabled:b6:hr', [0, false], 'IsInverted:b8:hs', [0, false], 'Label:e6:ht', [4, null], 'LabelSettings:aw:hu', [AxisLabelSettings.$, null], 'MajorStrokeDashArray:io:hv', [DoubleCollection.$], 'MajorStroke:ii:hw', [Brush.$], 'MajorStrokeThickness:d2:hx', [1, 1], 'MinorStrokeDashArray:ip:hy', [DoubleCollection.$], 'MinorStroke:ij:hz', [Brush.$], 'MinorStrokeThickness:d5:h0', [1, 1], 'Strip:ik:h1', [Brush.$], 'StrokeDashArray:iq:h2', [DoubleCollection.$], 'Stroke:il:h3', [Brush.$], 'StrokeThickness:em:h4', [1, DeviceUtils.g(2)], 'TickLength:en:h5', [1, NaN], 'TickStrokeDashArray:ir:h6', [DoubleCollection.$], 'TickStroke:im:h7', [Brush.$], 'TickStrokeThickness:eo:h8', [1, DeviceUtils.g(2)], 'Title:f6:h9', [2], 'TitleSettings:bc:ia', [TitleSettings.$, null]]);
/**
 * @hidden
 */
export class AxisCollection extends ObservableCollection$1 {
    constructor() {
        super(Axis.$, 0);
        this.collectionResetting = null;
        this.propertyChanged = delegateCombine(this.propertyChanged, (a, b) => {
            if (b.propertyName == "Name") {
                for (let c = 0; c < this.count; ++c) {
                    if (this._inner[c].name == b.propertyName) {
                        this.ac(new NotifyCollectionChangedEventArgs(2, 2, this._inner[c], this._inner[c], c));
                    }
                }
            }
        });
    }
    p() {
        if (this.collectionResetting != null) {
            this.collectionResetting(this, null);
        }
        super.p();
    }
}
AxisCollection.$t = markType(AxisCollection, 'AxisCollection', ObservableCollection$1.$.specialize(Axis.$));
/**
 * @hidden
 */
export class AxisLabelManager extends Base {
    constructor() {
        super();
        this.e = null;
        this.f = null;
        this.b = null;
        this.a = null;
        this.c = null;
        this.c = (a) => {
        };
    }
    m(a, b) {
        this.e.clear();
        this.f.clear();
        this.b.ac = this.a;
        this.b.cp = a;
        this.b.co = b;
        if (b.isEmpty || a.isEmpty) {
            this.r(0);
            this.a.bn.count = 0;
            this.a.bm.count = 0;
        }
        if (this.a.bo.count == 0 && this.a.bn.count == 0) {
            this.b.ab.clear();
        }
    }
    i(a, b) {
        this.e.add1(a);
        this.f.add(b);
    }
    s() {
        this.b.a1 = this.e;
        this.b.a2 = this.f;
    }
    static j(a) {
        AxisLabelManager.k(a, false);
    }
    static k(a, b) {
    }
    static l(a) {
        AxisLabelManager.k(a, true);
    }
    h(a) {
        this.b.ab.add(a);
    }
    q(a) {
        this.b.bn = a;
    }
    n(a) {
        this.c(a);
    }
    t(a) {
        let b = this.a.bo.item(a);
        return b;
    }
    r(a) {
        if (this.a == null) {
            return;
        }
        this.a.bo.count = a;
    }
    get d() {
        if (this.a == null || this.a.aw == null) {
            return false;
        }
        return this.a.aw.visibility != 0;
    }
    p() {
        this.a.bo.count = 0;
        this.a.bn.count = 0;
        this.a.bm.count = 0;
        this.a.at.a3.clear();
    }
    o() {
        this.a.cf = true;
    }
    g() {
        this.a.ge();
    }
}
AxisLabelManager.$t = markType(AxisLabelManager, 'AxisLabelManager');
/**
 * @hidden
 */
export class AxisLabelPanelBase extends Panel {
    constructor() {
        super();
        this.cl = null;
        this.bn = 0;
        this.ac = null;
        this.aj = false;
        this.ax = null;
        this.a2 = null;
        this.co = null;
        this.ck = Rect.empty;
        this.cj = null;
        this.a4 = 0;
        this.bo = null;
        this.a3 = null;
        this.a0 = null;
        this.af = null;
        this.am = false;
        this.ap = false;
        this.aq = false;
        this.ar = false;
        this.bq = null;
        this.ak = false;
        this.a5 = 50;
        this.a6 = 0;
        this.a7 = 0;
        this.a6 = NaN;
        this.co = Rect.empty;
        this.cn = Rect.empty;
        this.ae = this.ad();
        this.b8(this.ae);
        this.ae.am();
        this.a3 = new List$1(FrameworkElement.$, 0);
        this.a2 = new List$1(LabelPosition.$, 0);
        this.a0 = new List$1(Rect.$, 0);
        this.aq = false;
        this.ap = false;
        this.ar = false;
        this.am = false;
        this.aj = false;
    }
    ad() {
        return new AxisLabelPanelBaseView(this);
    }
    b8(a) {
    }
    bz() {
    }
    ce() {
    }
    cd() {
    }
    get at() {
        return this.aj;
    }
    set at(a) {
        this.aj = a;
    }
    get a1() {
        return this.ax;
    }
    set a1(a) {
        let b = this.ax;
        this.ax = a;
        if (b == null && b != a) {
            this.b5();
        }
    }
    get cp() {
        return this.ck;
    }
    set cp(a) {
        let b = this.ck;
        this.ck = a;
        this.ch(b, this.ck);
    }
    get cn() {
        return this.cj;
    }
    set cn(a) {
        let b = this.cj;
        this.cj = a;
        this.b4(b, this.cj);
    }
    get a8() {
        return this.a4;
    }
    set a8(a) {
        this.a4 = a;
    }
    al(a, b) {
        for (let c = 0; c < a.count - 1; c++) {
            if (b._inner[c]) {
                continue;
            }
            for (let d = c; d < a.count - 1; d++) {
                if (b._inner[d + 1]) {
                    continue;
                }
                if (a._inner[c].intersectsWith(a._inner[d + 1])) {
                    return true;
                }
            }
        }
        return false;
    }
    bp(a, b, c) {
        return {
            ret: 0,
            p1: b
        };
    }
    ay() {
        return null;
    }
    bx() {
    }
    bt(a) {
    }
    bd() {
        return this.af != null ? this.af.angle : 0;
    }
    bh() {
        return this.ac.bc != null ? this.ac.bc.angle : 0;
    }
    ao(a, b) {
        if (a == 0 && !this.ac.b0 && this.af != null) {
            if (this.ac.ce) {
                if (!this.af.showFirstLabel && this.ac.bf.eh() == 1) {
                    return false;
                }
            }
            else {
                if (!this.af.showFirstLabel && this.ac.bf.eg() == 1) {
                    return false;
                }
            }
        }
        return true;
    }
    bc(a) {
        return this.ae.m(a);
    }
    bm(a) {
        return this.ae.w(a);
    }
    be(a) {
        return this.ae.n(a);
    }
    bb(a) {
        return this.ae.l(a);
    }
    an() {
        return false;
    }
    ch(a, b) {
    }
    b4(a, b) {
    }
    az() {
        if (this.ab.count < 1 || this.a2.count == 0) {
            return new List$1(Rect.$, 0);
        }
        this.a3 = new List$1(FrameworkElement.$, 0);
        this.a0 = new List$1(Rect.$, 0);
        this.bx();
        this.ae.ae();
        let a = this.bd();
        if (a % 360 == 0) {
            this.ap = false;
        }
        if (this.a3.count == 0) {
            return new List$1(Rect.$, 0);
        }
        this.a0 = this.ay();
        this.aj = true;
        return this.a0;
    }
    bg(a, b) {
        let c = a * (Math.PI / 180);
        let d = Math.abs(b.width * Math.cos(c)) + Math.abs(b.height * Math.sin(c));
        return d;
    }
    bf(a, b) {
        let c = a * (Math.PI / 180);
        let d = Math.abs(b.height * Math.cos(c)) + Math.abs(b.width * Math.sin(c));
        return d;
    }
    bk() {
        let a = this.ae.k();
        return a;
    }
    bi() {
        let a = this.ae.j();
        return a;
    }
    bj() {
        if (this.ac.f6 == null || (this.ac.bc != null && this.ac.bc.visibility == 1)) {
            return 0;
        }
        let a = this.bi();
        let b = this.bk();
        let c = new Rect(0, 0, 0, b, a);
        let d = this.bh();
        let e = RectUtil.w(c, d);
        return e.height + this.ae.v() + this.ae.s();
    }
    bl() {
        if (this.ac.f6 == null || (this.ac.bc != null && this.ac.bc.visibility == 1)) {
            return 0;
        }
        let a = this.bi();
        let b = this.bk();
        let c = new Rect(0, 0, 0, b, a);
        let d = this.bh();
        let e = RectUtil.w(c, d);
        return e.width + this.ae.t() + this.ae.u();
    }
    cq(a) {
        if (this.ac == null || this.ab.count == 0) {
            return a;
        }
        this.bw(a);
        this.b0();
        this.bv(a);
        this.a0 = this.az();
        if (this.a3.count != this.a0.count) {
            return a;
        }
        let b = this.ae.p();
        let c = this.ae.r();
        let d = this.ae.q();
        let e = this.ae.o();
        if (this.ap) {
            for (let f = 0; f < this.a3.count; f++) {
                if (this.ao(f, this.a0._inner[f])) {
                    this.ae.aa(this.a3._inner[f], this.a0._inner[f], b, c, d, e);
                }
                this.cb(this.a3._inner[f], this.bd());
            }
        }
        for (let g = 0; g < this.a3.count; g++) {
            if (!this.ap) {
                this.ae.ad(this.a3._inner[g]);
            }
            if (this.ao(g, this.a0._inner[g])) {
                this.ae.aa(this.a3._inner[g], this.a0._inner[g], b, c, d, e);
            }
            else {
                this.ae.aa(this.a3._inner[g], new Rect(0, 0, 0, 0, 0), b, c, d, e);
            }
        }
        if (this.ac.bn.count > 0) {
            this.ac.a5.arrangeAnnotations(this.ac, this.ae, this.a3, this.a0, this.ap, this.bd(), b, c, d, e);
        }
        this.bt(a);
        return a;
    }
    cm() {
        return Rect.empty;
    }
    bw(a) {
        if (this.ac.hj == null) {
            return;
        }
        this.ae.ah(this.ac.hj, new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
        let b = Math.abs(this.bh() - 0) > 1E-06;
        let c = this.cm();
        let d = c.left + (c.width / 2);
        let e = c.top + (c.height / 2);
        let f = this.bk() + this.ae.t() + this.ae.u();
        let g = this.bi() + this.ae.v() + this.ae.s();
        let h = f / 2;
        let i = g / 2;
        let j = new Rect(0, d - h, e - i, f, g);
        if (b) {
            this.cc(this.ac.hj);
        }
        else {
            this.ae.ad(this.ac.hj);
        }
        this.ae.aa(this.ac.hj, j, this.ae.t(), this.ae.v(), this.ae.u(), this.ae.s());
        if ((this.ac.bc == null || this.ac.bc.visibility == 0) && (this.ac.aw == null || this.ac.aw.visibility == 0) && this.ac.f6 != null) {
            this.ac.hj._visibility = 0;
        }
        else {
            this.ac.hj._visibility = 1;
            this.ae.aa(this.ac.hj, new Rect(0, 0, 0, 0, 0), 0, 0, 0, 0);
        }
    }
    bv(a) {
        this.ae.ab(a);
    }
    b0() {
    }
    aw() {
        if (typeCast(CategoryAxisBase.$, this.ac) !== null) {
            return this.ac.jl;
        }
        if (typeCast(NumericAxisBase.$, this.ac) !== null) {
            let a = new List$1(Number_$type, 0);
            let d = this.ac.jj.j();
            for (let c = 0; c < d.length; c++) {
                let b = d[c];
                let e = this.ac.iv();
                let f = new ScalerParams(0, this.ac.bf.m4, this.ac.i0, this.ac.b9, e);
                a.add(this.ac.dv(b, f));
            }
            return a;
        }
        return null;
    }
    get ag() {
        let a = this.af != null ? this.af.c : this.ah();
        if (this.ac.ag == null) {
            if (a == 4) {
                a = 5;
            }
            else if (a == 5) {
                a = 4;
            }
            else if (a == 6) {
                a = 7;
            }
            else if (a == 7) {
                a = 6;
            }
        }
        return a;
    }
    cg(a, b, c, d, e, f) {
        let g = b;
        let h = b;
        if (f != null) {
            let i = f.c / 2;
            g -= i;
            h += i;
        }
        if (h >= e.left && g <= e.right) {
            if (f.a) {
                b = this.ac.dg(b, e.left, e.right, f);
            }
            let j = new LineGeometry();
            j.c = { $type: Point_$type, x: b, y: c };
            j.b = { $type: Point_$type, x: b, y: d };
            a.add(j);
        }
    }
    b3(a, b, c, d, e, f) {
        if (b <= e.bottom && b >= e.top) {
            if (f.a) {
                b = this.ac.dg(b, e.top, e.bottom, f);
            }
            let g = new LineGeometry();
            g.c = { $type: Point_$type, x: c, y: b };
            g.b = { $type: Point_$type, x: d, y: b };
            a.add(g);
        }
    }
    cb(a, b) {
        let c = this.bd();
        this.ae.ai(a, c);
    }
    cc(a) {
        let b = this.bh();
        this.b2(a, b);
    }
    b2(a, b) {
        let c = typeCast(FrameworkElement.$, a);
        let d = this.bi();
        let e = this.bk();
        let f = 0.5 * e;
        let g = 0.5 * d;
        let h = ((() => {
            let $ret = new RotateTransform();
            $ret.j = b;
            $ret.k = f;
            $ret.l = g;
            return $ret;
        })());
        let i = new TransformGroup();
        i.j.add(h);
        c.j = i;
    }
    cr(a) {
        if ((this.ab.contains(this.ac.hj) == false) && this.ac.hj != null) {
            this.ab.add(this.ac.hj);
            AxisLabelManager.l(this.ac.hj);
        }
        for (let b of fromEnum(this.ab)) {
            if (b != this.ac.hj && b != this.ae.av) {
                this.ae.ag(b);
            }
        }
        let c = (this.ac == null || this.a5 <= 0 || isNaN_(this.a5)) ? 50 : this.a5;
        if (this.ac != null && (this.ac.cw == null || this.ac.cw.count == 0)) {
            if (this.ac.bz()) {
                c = this.ac.d1();
            }
        }
        let d = this.an();
        c = Math.min(c, d ? a.height : a.width);
        c = isInfinity(c) ? 50 : c;
        return d ? new Size(1, 50, c) : new Size(1, c, 50);
    }
    get a9() {
        return this.c(AxisLabelPanelBase.ci);
    }
    set a9(a) {
        this.h(AxisLabelPanelBase.ci, a);
    }
    ai(a) {
        if (a == null) {
            return this.ac.bf.aj(this.ac);
        }
        if (a.position == 0) {
            if (this.ac != null && this.ac.bf != null) {
                return this.ac.bf.aj(this.ac);
            }
            return 4;
        }
        return a.position;
    }
    ah() {
        return 1;
    }
    as(a) {
        return true;
    }
    *_au() {
        for (let a of fromEnum(this.ab)) {
            if (a != this.ac.hj && a != this.ae.av) {
                yield a;
            }
        }
    }
    au() {
        return toEnum(() => this._au());
    }
    bs(a, b, c, d, e) {
        let f = this.ae.x(b, c, d, e);
        return f;
    }
    by(a) {
        if (this.bq == null || this.bc(this.bq) < this.bc(a)) {
            this.bq = a;
        }
    }
    b7(a) {
        this.a3.add(a);
    }
    *_av() {
        for (let a = 0; a < this.ac.bo.count; a++) {
            yield this.ac.bo.item(a);
        }
        for (let b = 0; b < this.ac.bn.count; b++) {
            yield this.ac.bn.item(b);
        }
    }
    av() {
        return toEnum(() => this._av());
    }
    b1() {
        this.ae.af();
        this.cf();
    }
    cf() {
        this.a0 = this.az();
    }
    b5() {
    }
    ba(a) {
        return this.a5;
    }
    b6() {
        this.ae.aj();
    }
    b9(a) {
        this.ae.ak(a);
    }
    bu() {
        this.ae.y();
    }
    ca() {
        this.ae.an();
    }
}
AxisLabelPanelBase.$t = markType(AxisLabelPanelBase, 'AxisLabelPanelBase', Panel.$);
AxisLabelPanelBase.ci = DependencyProperty.i("Extent", Number_$type, AxisLabelPanelBase.$, new PropertyMetadata(2, 50, (a, b) => a.a5 = b.newValue));
/**
 * @hidden
 */
export class CategoryAxisBase extends Axis {
    constructor() {
        super();
        this.jl = null;
        this.jd = null;
        this.jw = 0;
        this.jx = 0;
        this.jb = 0;
        this.jz = 0;
        this.jf = false;
        this.jl = new List$1(Number_$type, 0);
    }
    a1() {
        return new CategoryAxisBaseView(this);
    }
    get_b4() {
        return false;
    }
    gr(a) {
        super.gr(a);
        this.ja = a;
    }
    cq(a, b, c) {
        let d = super.cq(a, b, c);
        if (!d) {
            return false;
        }
        return this.itemsSource != null && this.jx > 0;
    }
    ki() {
        if (this.je != null && this.bl != null && this.itemsSource != null) {
            this.je = this.bl.releaseFastItemsSource(this.itemsSource);
        }
    }
    kh() {
        if (this.je == null && this.bl != null && this.itemsSource != null) {
            this.je = this.bl.getFastItemsSource(this.itemsSource);
        }
    }
    get_b2() {
        return true;
    }
    kt(a, b, c) {
        if (this.b0) {
            return Rect.empty;
        }
        return this.ku(a, b, c, this.ce);
    }
    ku(a, b, c, d) {
        let e = 0;
        let f = a.x;
        let g = this.i0.left;
        let h = this.i0.right;
        if (d) {
            f = a.y;
            g = this.i0.top;
            h = this.i0.bottom;
        }
        let i = this.jl;
        if ((d && !this.b8) || (!d && this.b8)) {
            i = new List$1(Number_$type, 0);
            for (let j = this.jl.count - 1; j >= 0; j--) {
                i.add(this.jl._inner[j]);
            }
        }
        if (this.categoryMode == 0) {
            if (b) {
                let k;
                if (d) {
                    k = new Rect(0, this.i0.left, a.y - c / 2, this.i0.width, c);
                }
                else {
                    k = new Rect(0, a.x - c / 2, this.i0.top, c, this.i0.height);
                }
                k.intersect(this.i0);
                return k;
            }
            else {
                if (f > h) {
                    return Rect.empty;
                }
                if (f < g) {
                    return Rect.empty;
                }
                let l = 1.7976931348623157E+308;
                let m = -1;
                for (e = 0; e < i.count; e++) {
                    let n = Math.abs(i._inner[e] - f);
                    if (n < l) {
                        l = n;
                        m = e;
                    }
                }
                if (m == -1) {
                    return Rect.empty;
                }
                let o = i._inner[m];
                let p;
                if (d) {
                    p = new Rect(0, this.i0.left, o - c / 2, this.i0.width, c);
                }
                else {
                    p = new Rect(0, o - c / 2, this.i0.top, c, this.i0.height);
                }
                p.intersect(this.i0);
                return p;
            }
        }
        else {
            for (e = 0; e < i.count; e++) {
                if (i._inner[e] > f) {
                    break;
                }
            }
            if (e == 0) {
                return Rect.empty;
            }
            if (f > h) {
                return Rect.empty;
            }
            if (f < g) {
                return Rect.empty;
            }
            let q = this.i0.right;
            if (d) {
                q = this.i0.bottom;
            }
            if (e < i.count) {
                q = i._inner[e];
            }
            if (d) {
                return new Rect(0, this.i0.left, i._inner[e - 1], this.i0.width, q - i._inner[e - 1]);
            }
            else {
                return new Rect(0, i._inner[e - 1], this.i0.top, q - i._inner[e - 1], this.i0.height);
            }
        }
    }
    get itemsSource() {
        return this.c(CategoryAxisBase.kq);
    }
    set itemsSource(a) {
        this.h(CategoryAxisBase.kq, a);
    }
    get jy() {
        return this.jw;
    }
    set jy(a) {
        this.jw = a;
        this.jx = this.jw;
    }
    get categoryMode() {
        return this.jb;
    }
    set categoryMode(a) {
        if (this.jb != a) {
            let b = this.jb;
            this.jb = a;
            this.gz("CategoryMode", enumGetBox(CategoryMode_$type, b), enumGetBox(CategoryMode_$type, a));
        }
    }
    get j0() {
        return this.jz;
    }
    set j0(a) {
        if (a != this.jz) {
            let b = this.jz;
            this.jz = a;
            this.gz("GroupCount", b, this.jz);
        }
    }
    dy(a, b) {
        return NaN;
    }
    getUnscaledValue3(a, b, c, d) {
        return NaN;
    }
    getCategorySize(a, b, c) {
        return NaN;
    }
    jq(a, b, c) {
        return NaN;
    }
    getGroupCenter(a, b, c, d) {
        return NaN;
    }
    jv(a) {
        let b = this.bf.m4;
        let c = this.i0;
        let d = this.iv();
        let e = new ScalerParams(0, b, c, this.b8, d);
        return this.dy(a, e);
    }
    *_jk() {
        for (let a of fromEnum(this.cw)) {
            yield a;
        }
        if (this.bf != null && this.bf.c0 && this.jh(this.bf)) {
            for (let b of fromEnum(this.bf.dm())) {
                if (b != this.bf) {
                    for (let c of fromEnum(b.series)) {
                        yield c;
                    }
                }
            }
        }
    }
    jk() {
        return toEnum(() => this._jk());
    }
    jg(a) {
        return this.cw.contains(a);
    }
    jh(a) {
        return false;
    }
    *_jj() {
        let a = typeCast(XamDataChart.$, this.bf);
        if (a != null && a.c0 && this.jh(a)) {
            for (let b of fromEnum(a.dm())) {
                if (b != this.bf) {
                    let c = typeCast(XamDataChart.$, b);
                    if (c != null) {
                        for (let d of fromEnum(c.axes)) {
                            if (typeCast(CategoryAxisBase.$, d) !== null) {
                                yield typeCast(CategoryAxisBase.$, d);
                            }
                        }
                    }
                }
            }
        }
    }
    jj() {
        return toEnum(() => this._jj());
    }
    km(a) {
        if (this.jf) {
            return;
        }
        try {
            this.jf = true;
            let b = 0;
            let c = 0;
            let d = false;
            for (let e of fromEnum(this.jk())) {
                if (!e.cl && !e.c2 && !e.cr) {
                    continue;
                }
                let f = e;
                let g = f.preferredCategoryMode(this);
                if (g == 2) {
                    b = 2;
                    d = true;
                    if (this.jg(e)) {
                        c++;
                    }
                }
                if (g == 1 && !d) {
                    b = 1;
                }
            }
            let h = this.ji;
            for (let i of fromEnum(this.jj())) {
                if (i.ji) {
                    h = true;
                }
                if (a) {
                    i.km(false);
                }
            }
            if (b == 0 && h) {
                b = 2;
                if (c == 0) {
                    c = 1;
                }
            }
            this.categoryMode = b;
            this.j0 = c;
        }
        finally {
            this.jf = false;
        }
    }
    gt(a, b, c, d) {
        super.gt(a, b, c, d);
        switch (b) {
            case "FastItemsSourceProvider":
                if ((typeCast(IFastItemsSourceProvider_$type, c)) != null) {
                    this.je = c.releaseFastItemsSource(this.itemsSource);
                }
                if ((typeCast(IFastItemsSourceProvider_$type, d)) != null) {
                    this.je = d.getFastItemsSource(this.itemsSource);
                }
                this.jy = 0;
                if (this.je != null) {
                    this.jy = this.je.count;
                }
                this.km(true);
                break;
            case "ItemsSource":
                if (this.bl != null) {
                    this.je = this.bl.getFastItemsSource(this.itemsSource);
                }
                break;
            case CategoryAxisBase.$$p[0]:
                let e = typeCast(IFastItemsSource_$type, c);
                this.j9();
                this.cf = true;
                if (e != null) {
                    e.event = delegateRemove(e.event, runOn(this, this.kc));
                }
                this.jy = 0;
                if (this.je != null) {
                    this.jy = this.je.count;
                }
                if (this.je != null) {
                    let f = this.je;
                    f.event = delegateCombine(f.event, runOn(this, this.kc));
                    this.g5(false);
                    for (let g of fromEnum(this.ct())) {
                        g.jc(false);
                        if (g.bs != null) {
                            g.ij();
                        }
                    }
                }
                else {
                    this.gg();
                    for (let h of fromEnum(this.ct())) {
                        h.hv(true, h.bi);
                        if (h.bs != null) {
                            h.ij();
                        }
                    }
                }
                break;
            case "ItemsCount":
                this.g0(new AxisRangeChangedEventArgs(0, 0, 0, typeGetValue((c)) - 1, typeGetValue((d)) - 1));
                this.g5(false);
                break;
            case CategoryAxisBase.$$p[3]:
                this.cf = true;
                this.kn();
                this.g5(false);
                this.ka();
                break;
            case "CategoryMode":
                this.cf = true;
                this.g5(false);
                this.kk();
                this.ka();
                break;
            case CategoryAxisBase.$$p[2]:
            case CategoryAxisBase.$$p[1]:
                this.cf = true;
                for (let i of fromEnum(this.ct())) {
                    i.dl = true;
                    let j = typeCast(IHasCategoryModePreference_$type, i);
                    if (j != null && j.preferredCategoryMode(this) == 2) {
                        i.jc(false);
                    }
                }
                this.g5(false);
                if (this.bf != null) {
                    this.bf.h1();
                }
                break;
            case Axis.$$p[4]:
            case Axis.$$p[3]:
                this.cf = true;
                this.g5(true);
                break;
        }
    }
    ka() {
        for (let a of fromEnum(this.ct())) {
            a.jc(false);
        }
    }
    kc(a, b) {
        this.kj(b);
    }
    kj(a) {
        switch (a.action) {
            case 3:
            case 0:
            case 1:
            case 2:
            case 4:
                if (this.je != null) {
                    this.jy = this.je.count;
                }
                this.g5(false);
                break;
        }
        if (this.je != null) {
            this.jy = this.je.count;
        }
    }
    kn() {
        let a = false, b = false;
        for (let c of fromEnum(this.cw)) {
            let d = typeCast(IHasCategoryModePreference_$type, c);
            if (d == null) {
                continue;
            }
            let e = d.preferredCategoryMode(this);
            a = a || e == 1;
            b = b || e == 2;
        }
        let f = b ? 2 : a ? 1 : 0;
        if (f == 0 && this.ji) {
            f = 1;
            if (this.j0 == 0) {
                this.j0 = 1;
            }
        }
        this.categoryMode = f;
    }
    ch(a) {
        let b = super.ch(a);
        if (b) {
            this.km(true);
            let c = typeCast(IHasCategoryModePreference_$type, a);
            if (c != null && c.preferredCategoryMode(this) == 2) {
                for (let d of fromEnum(this.ct())) {
                    let e = typeCast(IHasCategoryModePreference_$type, d);
                    if (e != null && e != c && e.preferredCategoryMode(this) == 2) {
                        d.jc(false);
                    }
                }
            }
            this.g5(false);
            this.ck();
        }
        return b;
    }
    bv(a) {
        let b = super.bv(a);
        if (b) {
            this.km(true);
            let c = typeCast(IHasCategoryModePreference_$type, a);
            if (c != null && c.preferredCategoryMode(this) != 0) {
                for (let d of fromEnum(this.ct())) {
                    let e = typeCast(IHasCategoryModePreference_$type, d);
                    if (e != null) {
                        d.jc(false);
                    }
                }
            }
            this.g5(false);
        }
        return b;
    }
    kk() {
        let a = null;
        for (let b of fromEnum(this.ct())) {
            if (b.cl) {
                let c = b.am(this);
                if (c != null && c.ag == this) {
                    a = c;
                }
            }
        }
        if (a != null) {
            a.g4();
        }
    }
    j9() {
        this.jd = this.je;
    }
    kl() {
        let a = this.aw;
        if (a == null) {
            a = new AxisLabelSettings();
        }
        if (a.visibility == 1) {
            this.bo.count = 0;
            this.bn.count = 0;
            this.bm.count = 0;
        }
        else {
            let b = 0;
            b = this.ja.bf(this.cu);
            this.bo.count = b;
        }
    }
    kb(a) {
        if (this.je != null) {
            this.je.handleCollectionChanged(a);
        }
    }
    kg(a, b, c) {
        this.kb(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
    }
    kd() {
        this.kb(new NotifyCollectionChangedEventArgs(0, 4));
    }
    ke(a, b) {
        this.kb(new NotifyCollectionChangedEventArgs(1, 0, b, a));
    }
    kf(a, b) {
        this.kb(new NotifyCollectionChangedEventArgs(1, 1, b, a));
    }
    jr(a, b, c, d) {
        return this.js(a, b, c, d, this.categoryMode);
    }
    js(a, b, c, d, e) {
        let f = 0;
        let g = e;
        if (g == 0 && this.categoryMode != 0) {
            g = 1;
        }
        switch (g) {
            case 0:
                f = 0;
                break;
            case 1:
                f = 0.5 * this.getCategorySize(a, b, c);
                break;
            case 2:
                f = this.getGroupCenter(d, a, b, c);
                break;
        }
        if (this.ce != this.b8) {
            f *= -1;
        }
        return f;
    }
    getSeriesOffset(a, b, c, d, e) {
        return this.js(a, b, c, d, e);
    }
    get isVertical() {
        return this.ce;
    }
    j$c(a, b) {
        return this.dy.apply(this, arguments);
    }
    j$b(a, b) {
        return this.dv.apply(this, arguments);
    }
    j$d(a, b, c, d, e) {
        this.gl.apply(this, arguments);
    }
    j$e(a, b, c, d) {
        this.gm.apply(this, arguments);
    }
    j$f(a, b, c, d) {
        this.gn.apply(this, arguments);
    }
    get j$a() {
        return this.b8;
    }
}
CategoryAxisBase.$t = markType(CategoryAxisBase, 'CategoryAxisBase', Axis.$, [ICategoryScaler_$type]);
CategoryAxisBase.kq = DependencyProperty.i("ItemsSource", IEnumerable_$type, CategoryAxisBase.$, new PropertyMetadata(2, null, (a, b) => {
    let c = typeCast(CategoryAxisBase.$, a);
    if (c.bl != null) {
        c.bl.releaseFastItemsSource(b.oldValue);
    }
    a.gz("ItemsSource", b.oldValue, b.newValue);
}));
Type.dep(DependencyProperty, PropertyMetadata, CategoryAxisBase, 'gz', ['FastItemsSource:je:ko', [IFastItemsSource_$type], 'Gap:jn:kp', [1, 0.2], 'Overlap:ju:kr', [1, 0], 'UseClusteringMode:ji:ks', [0, false]]);
/**
 * @hidden
 */
export class HorizontalAxisLabelPanelBase extends AxisLabelPanelBase {
    constructor() {
        super(...arguments);
        this.c4 = 0;
        this.c1 = 0;
        this.c3 = 0;
        this.c2 = 0;
    }
    ad() {
        return new HorizontalAxisLabelPanelBaseView(this);
    }
    b8(a) {
        super.b8(a);
        this.cs = a;
    }
    bx() {
        this.cs.az();
    }
    cu() {
        return this.af != null && this.af.j() && this.bd() % 360 != 0;
    }
    cv() {
        return this.am && !this.ap;
    }
    an() {
        return true;
    }
    ay() {
        let a = new List$1(Rect.$, 0);
        let b = new List$1(Boolean_$type, 0);
        this.aq = false;
        this.ap = false;
        this.ar = false;
        let c = this.af != null ? (this.af.angle) : 0;
        let d = c * Math.PI / 180;
        if (this.cu()) {
            this.ap = true;
        }
        this.am = false;
        this.c6(a, b, d);
        this.am = this.am || this.al(a, b);
        if (this.am) {
            this.c8(a, b);
        }
        else {
            this.c9();
        }
        let e = this.ac.bz();
        if (!e) {
            this.c5(c);
        }
        else {
            this.ae.ac();
        }
        if (this.ap) {
            for (let f = 0; f < a.count; f++) {
                let g = a._inner[f];
                g.x = this.a2._inner[f].c;
                a._inner[f] = g;
            }
        }
        let h = 0;
        if (this.cv()) {
            h = ((() => { let i = this.bp(this.c1, a, b); a = i.p1; return i.ret; })());
        }
        if (this.am && !this.aq) {
            if (h > 0) {
                if (this.cs.ay()) {
                    this.ar = true;
                }
            }
        }
        if (this.am && this.ct()) {
            let i = this.cn.width;
            let j = this.cz();
            let k = this.cy();
            let l = this.a2.count > 1 ? this.a2._inner[1].c - this.a2._inner[0].c : i;
            let m = Math.abs(l * 0.8);
            let n = 0;
            let o = Math.abs(Math.atan(this.c1 / l) * 180 / Math.PI);
            let p = this.ae.p();
            let q = this.ae.q();
            for (let r = 0; r < a.count; r++) {
                if (this.ak) {
                    if (r > 0 && r < a.count - 1) {
                        let s = this.a2.count > 1 ? this.a2._inner[r].c - (a._inner[r - 1].x + a._inner[r - 1].width) : i;
                        let t = this.a2.count > 1 ? a._inner[r + 1].x - this.a2._inner[r].c : i;
                        m = Math.abs(Math.min(Math.abs(s * 2), Math.abs(t * 2)) * 0.8);
                    }
                    else {
                        if (r == 0) {
                            let u = this.a2.count > 1 ? a._inner[r + 1].x - this.a2._inner[r].c : i;
                            m = Math.abs((l * 2) * 0.8);
                        }
                        if (r == a.count - 1) {
                            let v = this.a2.count > 1 ? this.a2._inner[r].c - (a._inner[r - 1].x + a._inner[r - 1].width) : i;
                            m = Math.abs((v * 2) * 0.8);
                        }
                    }
                }
                let w = Math.min(a._inner[r].width, m);
                n = this.ap ? this.a2._inner[r].c : this.a2._inner[r].c - w / 2;
                let x = AngleSimplifier.a(c);
                let y = (x >= o && x <= 180 - o) || (x >= 180 + o && x <= 360 - o);
                let z = a._inner[r];
                if (this.ap && y) {
                    let aa = this.bm(this.a3._inner[r]);
                    m = Math.min(j / Math.abs(Math.sin(d)), aa);
                }
                z.x = n;
                z.width = Math.min(m, z.width);
                a._inner[r] = z;
                if (!(typeCast(TextBlock.$, this.a3._inner[r]) !== null)) {
                    this.a3._inner[r].width = Math.min(m, z.width);
                }
                let ab = typeCast(TextBlock.$, this.a3._inner[r]);
                if (ab != null) {
                    let ac = this.bs(r, ab, m, p, q);
                    if (this.ar) {
                        ab.height = k;
                    }
                    else if (!Base.equalsStatic(ab.ak, ac)) {
                        ab.ak = ac;
                        this.a3._inner[r].width = Math.min(m, this.bc(this.a3._inner[r]));
                        this.c3 = Math.min(this.c3, this.a3._inner[r].width);
                    }
                }
            }
            if (!e) {
                this.c5(c);
            }
        }
        if (this.cw()) {
            this.c7(a);
        }
        return a;
    }
    c6(a, b, c) {
        let d = this.bj();
        let e = this.c0();
        this.c1 = -1.7976931348623157E+308;
        this.c4 = -1.7976931348623157E+308;
        this.c2 = -1.7976931348623157E+308;
        this.c3 = -1.7976931348623157E+308;
        let f = this.ae.p();
        let g = this.ae.q();
        let h = this.ae.r();
        let i = this.ae.o();
        let j = this.cn.top;
        let k = (this.cn.height - d);
        let l = false;
        for (let m = 0; m < this.a3.count; m++) {
            if (!this.a2._inner[m].a) {
                l = true;
            }
        }
        for (let n = 0; n < this.a3.count; n++) {
            if (this.a2 == null || n >= this.a2.count) {
                break;
            }
            let o, p, q, r, s, t;
            let u = this.a3._inner[n];
            s = this.bc(u);
            t = this.bb(u);
            r = s + this.ae.p() + this.ae.q();
            q = t + h + i;
            let v = this.a2._inner[n].a;
            if (this.ap) {
                o = this.a2._inner[n].c;
            }
            else {
                o = this.a2._inner[n].c - r / 2;
            }
            p = j + e;
            if (!v || !l) {
                this.c1 = Math.max(q, this.c1);
                this.c4 = Math.max(r, this.c4);
                this.c2 = Math.max(t, this.c2);
                this.c3 = Math.max(s, this.c3);
            }
            let w = new Rect(0, o, p, r, q);
            a.add(w);
            b.add(v);
            let x = r * Math.abs(Math.sin(c));
            this.am = this.am || x > k;
        }
    }
    c5(a) {
        let b = a * (Math.PI / 180);
        let c = Math.abs(this.c3 * Math.sin(b)) + Math.abs(this.c2 * Math.cos(b));
        c += this.ae.r() + this.ae.o();
        let d = this.bj();
        this.a9 = (c) + (d) + this.ac.df;
    }
    c7(a) {
        this.cs.a0(a);
    }
    c8(a, b) {
    }
    c9() {
    }
    cb(a, b) {
        let c = a.l;
        let d = a.m;
        let e = 0;
        let f = c / 2;
        let g = new TransformGroup();
        let h = AngleSimplifier.a(this.bd());
        let i = ((() => {
            let $ret = new RotateTransform();
            $ret.j = h;
            $ret.k = e;
            $ret.l = f;
            return $ret;
        })());
        let j = 0;
        let k = 0;
        if (h != 0 && h != 360) {
            if (h > 0 && h < 180) {
                j = -Math.sin(MathUtil.k(h)) * (c / 2);
            }
            else {
                i.k = d;
                k = -d;
                j = -Math.sin(MathUtil.k(h - 180)) * (c / 2);
            }
        }
        let l = ((() => {
            let $ret = new TranslateTransform();
            $ret.k = j;
            $ret.j = k;
            return $ret;
        })());
        g.j.add(i);
        g.j.add(l);
        a.j = g;
    }
    cw() {
        return !this.aq && !this.ap;
    }
    ct() {
        return true;
    }
    bp(a, b, c) {
        let d = 0;
        let e = new List$1(Rect.$, 0);
        let f = this.c0() + this.cn.top;
        let g = this.cz();
        let h = f + g;
        if (a * 3 <= this.a5) {
            d = 3;
        }
        else if (a * 2 <= this.a5) {
            d = 2;
        }
        else {
            return {
                ret: d,
                p1: b
            };
        }
        let i = 0;
        for (let j = 0; j < b.count; j++) {
            let k = RectUtil.p(b._inner[j]);
            if (!c._inner[j]) {
                if (i % d == 0) {
                    k.y = f;
                }
                else if (i % d == d - 1) {
                    k.y = h - k.height;
                }
                else {
                    k.y = (f + (g / 2)) - k.height / 2;
                }
                i++;
            }
            e.add(k);
        }
        this.am = this.al(e, c);
        if (!this.am) {
            this.aq = true;
            b = e;
        }
        return {
            ret: d,
            p1: b
        };
    }
    cm() {
        let a = this.ai(this.ac.bc);
        let b = this.bj();
        let c = this.ag;
        let d = 0;
        if (a == 3) {
            d += this.cn.top;
            if (c == 1 || c == 5) {
                d += this.ac.df;
            }
        }
        else {
            d = this.cn.bottom - b;
            if (c == 4 || c == 0) {
                d -= this.ac.df;
            }
        }
        let e = this.bl();
        let f = 0;
        let g = this.ac.bc == null ? 1 : this.ac.bc.horizontalAlignment;
        if (g == 0) {
            f = this.cn.left;
        }
        else if (g == 2) {
            f = this.cn.right - e;
        }
        else {
            f = (this.cn.left + (this.cn.width / 2)) - (e / 2);
        }
        return new Rect(0, f, d, e, b);
    }
    c0() {
        let a = 0;
        let b = this.ai(this.ac.bc);
        if (b == 3) {
            a += this.bj();
        }
        let c = this.ag;
        if (c == 1 || c == 5) {
            a += this.ac.df;
        }
        return a;
    }
    cx() {
        let a = 0;
        let b = this.ai(this.ac.bc);
        if (b == 4) {
            a += this.bj();
        }
        let c = this.ag;
        if (c == 0 || c == 4) {
            a += this.ac.df;
        }
        return a;
    }
    cz() {
        let a = (this.a5 - this.c0()) - this.cx();
        if (a < 0) {
            a = 0;
        }
        return a;
    }
    cy() {
        let a = ((this.cz() - this.ae.r()) - this.ae.o());
        if (a < 0) {
            a = 0;
        }
        return a;
    }
    b0() {
        let a = this.ae.at();
        this.ac.gh(a);
        if (this.af != null && this.af.visibility != 0) {
            return;
        }
        let b = this.ac.df;
        if (b == 0) {
            return;
        }
        let c = this.aw();
        if (c == null) {
            return;
        }
        let d = this.cn.top;
        let e;
        let f = this.ag;
        if (f == 0 || f == 4) {
            d = this.cn.bottom;
            e = d - this.ac.df;
        }
        else {
            e = d + this.ac.df;
        }
        let g = this.ae.b();
        for (let h of fromEnum(c)) {
            this.cg(a, h, d, e, this.co, g);
        }
        if (!this.ab.contains(this.ae.av)) {
            this.ab.add(this.ae.av);
        }
    }
}
HorizontalAxisLabelPanelBase.$t = markType(HorizontalAxisLabelPanelBase, 'HorizontalAxisLabelPanelBase', AxisLabelPanelBase.$);
/**
 * @hidden
 */
export class HorizontalAxisLabelPanel extends HorizontalAxisLabelPanelBase {
    ah() {
        return 1;
    }
    as(a) {
        return a == 5 || a == 4 || a == 1 || a == 0;
    }
}
HorizontalAxisLabelPanel.$t = markType(HorizontalAxisLabelPanel, 'HorizontalAxisLabelPanel', HorizontalAxisLabelPanelBase.$);
/**
 * @hidden
 */
export class NumericAxisBase extends Axis {
    constructor() {
        super();
        this.jx = 0;
        this.j9 = 0;
        this.j0 = 0;
        this.jw = 0;
        this.j8 = 0;
        this.jz = 0;
        this.jv = 0;
        this.jy = 0;
        this.jm = false;
        this.kg = 0;
        this.je = null;
        this.ju = false;
        this.ji = null;
        this.jl = false;
        this.kg = 10;
    }
    a1() {
        return new NumericAxisBaseView(this);
    }
    gr(a) {
        super.gr(a);
        this.jb = a;
    }
    get_ca() {
        return true;
    }
    get j3() {
        return this.jx;
    }
    set j3(a) {
        if (this.j3 != a) {
            let b = this.jx;
            this.jx = a;
            this.j9 = Math.log(this.j3);
            this.gz("ActualMinimumValue", b, this.j3);
        }
    }
    e8() {
        return this.kb;
    }
    get j6() {
        return this.j0;
    }
    set j6(a) {
        if (this.j6 != a) {
            let b = this.j0;
            this.j0 = a;
            this.gz("ActualVisibleMinimumValue", b, this.j6);
        }
    }
    get j2() {
        return this.jw;
    }
    set j2(a) {
        if (this.j2 != a) {
            let b = this.jw;
            this.jw = a;
            this.j8 = Math.log(this.j2);
            this.gz("ActualMaximumValue", b, this.j2);
        }
    }
    e7() {
        return this.j2;
    }
    get j5() {
        return this.jz;
    }
    set j5(a) {
        if (this.j5 != a) {
            let b = this.jz;
            this.jz = a;
            this.gz("ActualVisibleMaximumValue", b, this.j5);
        }
    }
    get j1() {
        return this.jv;
    }
    set j1(a) {
        if (this.j1 != a) {
            let b = this.jv;
            this.jv = a;
            this.gz("ActualInterval", b, this.j1);
        }
    }
    d6() {
        return this.j1;
    }
    get j4() {
        return this.jy;
    }
    set j4(a) {
        if (this.j4 != a) {
            let b = this.jy;
            this.jy = a;
            this.gz("ActualMinorInterval", b, this.j4);
        }
    }
    get jo() {
        return this.jm;
    }
    set jo(a) {
        if (this.jo != a) {
            let b = this.jm;
            if (b != a) {
                this.jm = a;
                this.gz("ActualIsLogarithmic", b, this.jo);
            }
        }
    }
    get jt() {
        return this.jo && this.j3 > 0 && this.kg > 1;
    }
    g6(a) {
        super.g6(a);
        if (this.jt && this.bf != null) {
            let b = this.iv();
            let c = this.iu();
            let d = this.jf(this.i0, this.bf.mq, b, c);
            if (d == null) {
                return;
            }
            for (let e = 0; e < d.k.count; e++) {
                let f = this.kf;
                let g = d.k._inner[e];
                let h = Math.min(g.d, g.c);
                let i = Math.max(g.d, g.c);
                let j = Math.floor(logBase(h, f));
                let k = Math.ceil(logBase(i, f));
                if (k - j < 2) {
                    if (typeCast(LogarithmicTickmarkValues.$, this.ji) !== null) {
                        this.ji = new LinearTickmarkValues();
                    }
                }
                else {
                    this.ji = this.jk != null ? this.jk : ((() => {
                        let $ret = new LogarithmicTickmarkValues();
                        $ret.x = f;
                        return $ret;
                    })());
                }
            }
        }
    }
    gy(a) {
        super.gy(a);
        this.kb = a;
    }
    gx(a) {
        super.gy(a);
        this.ka = a;
    }
    gt(a, b, c, d) {
        super.gt(a, b, c, d);
        switch (b) {
            case NumericAxisBase.$$p[4]:
                this.ck();
                this.g5(false);
                break;
            case NumericAxisBase.$$p[3]:
                this.ck();
                this.g5(false);
                break;
            case NumericAxisBase.$$p[1]:
                this.ju = true;
                this.jo = this.js;
                break;
            case Axis.$$p[4]:
            case Axis.$$p[3]:
            case NumericAxisBase.$$p[0]:
            case NumericAxisBase.$$p[5]:
                this.cf = true;
                this.g5(false);
                break;
            case NumericAxisBase.$$p[2]:
                this.ju = true;
                this.kg = this.kf;
                if (this.jo) {
                    this.ck();
                    this.k0();
                    this.g5(false);
                }
                break;
            case NumericAxisBase.$$p[6]:
                let e = new AxisRangeChangedEventArgs(0, this.j3, this.j3, this.j2, this.j2);
                this.g0(e);
                this.cf = true;
                this.g5(false);
                break;
            case Axis.$$p[10]:
                this.je = this.jc();
                this.cf = true;
                this.g5(false);
                break;
            case "TickmarkValues":
                this.k2();
                break;
            case "ActualIsLogarithmic":
                this.ck();
                this.k0();
                this.cf = true;
                this.k2();
                this.g5(false);
                break;
            case "ActualTickmarkValues":
                this.cf = true;
                this.g5(false);
                break;
            case "AbbreviateLargeNumbers":
                this.g5(false);
                break;
        }
    }
    k0() {
        for (let a of fromEnum(this.ct())) {
            a.jc(false);
        }
    }
    ja() {
        let a = new AxisRange(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
        let b = false;
        if (this.bf != null) {
            for (let c of fromEnum(this.ct())) {
                let d = c.an(this);
                if (d != null) {
                    b = true;
                    a = new AxisRange(Math.min(a.c, d.c), Math.max(a.b, d.b));
                }
            }
        }
        if (b) {
            return a;
        }
        return null;
    }
    ky(a, b, c, d, e, f, g) {
        let h = AutoRangeCalculator.a(a, b, c, d, e, f, g);
        f = h.p5;
        g = h.p6;
        return {
            p5: f,
            p6: g
        };
    }
    cm() {
        let a = this.jo && !isNaN_(this.kf) && !isInfinity(this.kf) && this.kf > 1;
        let b;
        let c;
        let d = this.ky(this, this.kb, this.ka, a, this.kf, b, c);
        b = d.p5;
        c = d.p6;
        if (b != this.j3 || c != this.j2 || this.ju) {
            this.ju = false;
            let e = new AxisRangeChangedEventArgs(0, this.j3, b, this.j2, c);
            this.j3 = b;
            this.j2 = c;
            this.g0(e);
            this.k1(e);
            this.g5(true);
            return true;
        }
        return false;
    }
    k1(a) {
    }
    ch(a) {
        let b = super.ch(a);
        if (b) {
            this.ck();
        }
        return b;
    }
    bv(a) {
        let b = super.bv(a);
        if (b) {
            this.ck();
        }
        return b;
    }
    jd(a) {
        return new NumericAxisRenderer(a);
    }
    jc() {
        let a = ((() => {
            let $ret = new AxisLabelManager();
            $ret.a = this;
            $ret.f = this.cv;
            $ret.e = this.cu;
            $ret.b = this.at;
            return $ret;
        })());
        if (this.aw != null) {
            this.aw.registerAxis(this);
        }
        let b = this.jd(a);
        b.u = () => {
            let c = this.a2.ay();
            let d = this.a2.a1();
            let e = this.a2.az();
            let f = this.a2.a0();
            this.hd();
            this.gh(c);
            this.gh(d);
            this.gh(e);
            this.gh(f);
        };
        b.o = (c, d) => !d.isEmpty && !c.isEmpty;
        b.d = (c, d, e, f) => this.jf(c, d, e, f);
        b.g = (c) => this.e5(c);
        return b;
    }
    jg() {
        return new NumericAxisRenderingParameters();
    }
    kz() {
    }
    jh() {
        return null;
    }
    jf(a, b, c, d) {
        let e = this.jg();
        let f = this.a2.ay();
        let g = this.a2.a1();
        let h = this.a2.az();
        let i = this.a2.a0();
        let j = this.a2.e();
        let k = this.a2.f();
        let l = this.a2.g();
        e.t = f;
        e.w = g;
        e.u = h;
        e.v = i;
        e.a = j;
        e.c = k;
        e.d = l;
        e.l = this.j2;
        e.m = this.j3;
        e.h = this.jq;
        e.f = this.jj;
        e.z = a;
        e.y = c;
        e.x = d;
        e.aa = b;
        e.o = this.d8();
        e.g = this.jp();
        e.p = this.j7;
        e.q = this.kc;
        e.s = this.e6;
        if (this.e6 == null && this.ar != null) {
            e.s = "Format";
        }
        e.j = this.ci;
        e.ab = this.jn;
        return e;
    }
    ke(a) {
        let b = this.iv();
        let c = new ScalerParams(0, this.bf.mq, this.i0, this.b8, b);
        return this.dy(a, c);
    }
    jp() {
        return !isNaN_(this.j7);
    }
    get jr() {
        return !isNaN_(this.kb);
    }
    get jq() {
        return !isNaN_(this.ka);
    }
    k2() {
        if (this.jk != null) {
            this.jj = this.jk;
        }
        else if (this.jo) {
            this.jj = new LogarithmicTickmarkValues();
            this.jb.bf();
        }
        else {
            this.jj = new LinearTickmarkValues();
        }
    }
    get jk() {
        return typeCast(TickmarkValues.$, this.c(NumericAxisBase.la));
    }
    set jk(a) {
        this.h(NumericAxisBase.la, a);
    }
    get jj() {
        if (this.ji == null) {
            this.k2();
        }
        return this.ji;
    }
    set jj(a) {
        let b = this.ji;
        let c = b != a;
        if (c) {
            this.ji = a;
            this.gz("ActualTickmarkValues", b, a);
        }
    }
    get jn() {
        return this.jl;
    }
    set jn(a) {
        let b = this.jn;
        if (a != b) {
            this.jl = a;
            this.gz("AbbreviateLargeNumbers", b, this.jn);
        }
    }
}
NumericAxisBase.$t = markType(NumericAxisBase, 'NumericAxisBase', Axis.$);
NumericAxisBase.la = DependencyProperty.i("TickmarkValues", TickmarkValues.$, NumericAxisBase.$, new PropertyMetadata(1, (a, b) => a.gz("TickmarkValues", b.oldValue, b.newValue)));
Type.dep(DependencyProperty, PropertyMetadata, NumericAxisBase, 'gz', ['Interval:j7:k3', [1, NaN], 'IsLogarithmic:js:k4', [0, false], 'LogarithmBase:kf:k5', [1, 10], 'MaximumValue:ka:k6', [1, NaN], 'MinimumValue:kb:k7', [1, NaN], 'MinorInterval:kc:k8', [1, NaN], 'ReferenceValue:kd:k9', [1, 0]]);
/**
 * @hidden
 */
export class NumericScaler extends DependencyObject {
    constructor() {
        super(...arguments);
        this.o = 0;
        this.n = 0;
        this.m = 0;
    }
    y(a) {
        this.l = a;
    }
    x(a) {
        this.k = a;
    }
    w(a, b, c) {
        switch (a) {
            case NumericScaler.$$p[1]:
                this.o = this.l;
                this.z();
                break;
            case NumericScaler.$$p[0]:
                this.n = this.k;
                this.z();
                break;
        }
    }
    z() {
        if (isNaN_(this.l) || isNaN_(this.k) || isInfinity(this.l) || isInfinity(this.k) || this.l < (-7.9228162514264338E+28) || this.k > (7.9228162514264338E+28)) {
            this.m = this.k - this.l;
        }
        else {
            this.m = this.k - this.l;
        }
    }
    j(a, b, c, d) {
        let e = new List$1(Number_$type, 2, a.count);
        for (let f = b; f < c; f++) {
            e.add(this.q(a.item(f), d));
        }
        return e;
    }
    v(a, b, c, d) {
        for (let e = b; e < c; e++) {
            a.item(e, this.p(a.item(e), d));
        }
    }
    u(a, b, c, d, e) {
        for (let f = 0; f < b.count; f++) {
            let g = b.item(f);
            for (let h = c; h < d; h++) {
                a.item(h)[g] = this.p(a.item(h)[g], e);
            }
        }
    }
}
NumericScaler.$t = markType(NumericScaler, 'NumericScaler', DependencyObject.$);
NumericScaler.ac = new Rect(0, 0, 0, 1, 1);
Type.dep(DependencyProperty, PropertyMetadata, NumericScaler, 'w', ['ActualMaximumValue:k:aa', [1, NaN], 'ActualMinimumValue:l:ab', [1, NaN]]);
/**
 * @hidden
 */
export class AxisRendererBase extends Base {
    constructor(a) {
        super();
        this.u = null;
        this.o = null;
        this.v = null;
        this.m = null;
        this.l = null;
        this.k = null;
        this.q = null;
        this.n = null;
        this.j = null;
        this.e = null;
        this.p = null;
        this.h = null;
        this.t = null;
        this.b = null;
        this.g = null;
        this.d = null;
        this.r = null;
        this.a = null;
        this.f = null;
        this.i = null;
        this.u = () => {
        };
        this.o = (b, c) => false;
        this.v = () => {
        };
        this.m = (b, c) => c;
        this.l = (b, c, d, e) => {
        };
        this.k = (b, c, d) => {
        };
        this.q = (b, c) => false;
        this.n = (b, c) => this.q(b, c);
        this.j = (b) => {
        };
        this.e = (b) => {
        };
        this.p = (b, c, d) => false;
        this.h = (b, c) => new LabelPosition(c);
        this.t = (b, c) => c;
        this.g = (b) => null;
        this.r = (b, c, d, e) => c;
        this.a = (b, c, d, e) => c;
        this.b = a;
        this.d = (b, c, d, e) => null;
    }
    c(a, b, c, d, e) {
        this.x(c, b);
        if (this.o(b, c)) {
            this.v();
            let f = this.d(b, c, d, e);
            this.x(c, b);
            if (f == null) {
                this.aa();
                return null;
            }
            if (f.k.count > 1 && !f.g) {
                this.ab(f);
            }
            for (let g of fromEnum(f.k)) {
                f.e = g;
                if (isNaN_(g.c) || isInfinity(g.c) || isNaN_(g.d) || isInfinity(g.d)) {
                    continue;
                }
                if (g.d == g.c) {
                    continue;
                }
                this.e(f);
                this.b.n(f.r);
                let h = 0;
                let i = 0;
                let j = false;
                let k = (l) => l;
                if (this.f != null) {
                    k = this.i;
                }
                if (typeCast(CategoryAxisRenderingParameters.$, f) !== null) {
                    h = f.ab;
                    i = f.af;
                    j = f.ac;
                }
                f.f = this.s(f);
                f.f.s(((() => {
                    let $ret = new TickmarkValuesInitializationParameters();
                    $ret.n = f.e.d;
                    $ret.m = f.e.c;
                    $ret.g = f.m;
                    $ret.f = f.l;
                    $ret.k = f.e.b;
                    $ret.d = f.g;
                    $ret.l = f.p;
                    $ret.j = f.q;
                    $ret.h = f.o;
                    $ret.i = f.e.a;
                    $ret.p = f.e.e;
                    $ret.a = h;
                    $ret.q = i;
                    $ret.s = f.aa;
                    $ret.r = f.z;
                    $ret.e = j;
                    $ret.c = k;
                    return $ret;
                })()));
                this.y(f);
            }
            this.z();
            return f;
        }
        return null;
    }
    aa() {
        this.b.p();
    }
    ab(a) {
        let b = -1.7976931348623157E+308;
        let c = -2147483648;
        let d = 0;
        let e = 0;
        let f = false;
        let g = (h) => h;
        if (this.f != null) {
            g = this.i;
        }
        if (typeCast(CategoryAxisRenderingParameters.$, a) !== null) {
            d = a.ab;
            e = a.af;
            f = a.ac;
        }
        for (let h of fromEnum(a.k)) {
            a.e = h;
            a.f.s(((() => {
                let $ret = new TickmarkValuesInitializationParameters();
                $ret.n = h.d;
                $ret.m = h.c;
                $ret.g = a.m;
                $ret.f = a.l;
                $ret.k = h.b;
                $ret.d = a.g;
                $ret.l = a.p;
                $ret.i = h.a;
                $ret.p = h.e;
                $ret.h = a.o;
                $ret.j = a.q;
                $ret.a = d;
                $ret.q = e;
                $ret.s = a.aa;
                $ret.r = a.z;
                $ret.e = f;
                $ret.c = g;
                return $ret;
            })()));
            h.a = a.f.m;
            h.e = a.f.r;
            if (!isNaN_(a.f.m)) {
                b = Math.max(b, a.f.m);
                c = Math.max(c, a.f.r);
            }
        }
        for (let i of fromEnum(a.k)) {
            if (i.a == b) {
                i.a = -1;
                i.e = -1;
            }
            else {
                i.a = b;
                i.e = c;
            }
        }
    }
    x(a, b) {
        this.u();
        this.b.m(a, b);
        this.b.s();
    }
    z() {
        this.b.s();
        let a = false;
        if (this.b.d) {
            this.b.r(0);
        }
        else {
            let b = 0;
            for (let c of fromEnum(this.b.e)) {
                let d = typeCast(FrameworkElement.$, c);
                if (d == null) {
                    d = this.b.t(b);
                    let e = d.ak;
                    let f = c.toString();
                    let g = 0;
                    let h = 0;
                    if (e != null) {
                        g = e.length;
                    }
                    if (f != null) {
                        h = f.length;
                    }
                    if (g != h) {
                        a = true;
                    }
                    d.ak = f;
                    b++;
                }
                else {
                    this.b.h(d);
                }
            }
            if (a) {
                this.b.o();
            }
            this.b.g();
            this.b.r(b);
        }
    }
    s(a) {
        return a.f;
    }
    y(a) {
        let b = a.f.j();
        let c = a.f.k();
        this.b.q(this.m(a, a.f.m));
        this.j(a);
        for (let d = 0; d < b.length; d++) {
            let e = a.f.p + d;
            let f = b[d];
            let g = f;
            let h = 0;
            if (d < b.length - 1) {
                h = b[d + 1];
            }
            else {
                h = Number.POSITIVE_INFINITY;
            }
            g = this.r(a, g, e, a.f.m);
            h = this.r(a, h, e, a.f.m);
            let i = this.m(a, g);
            let j = this.m(a, h);
            if (this.q(a, i)) {
                if (e % 2 == 0 && this.n(a, j) && !isInfinity(j)) {
                    this.l(a, a.w, i, j);
                }
                a.b = a.c;
                this.k(a, a.u, i);
                a.b = null;
            }
            i = this.a(a, i, e, a.f.m);
            if (!isNaN_(i) && !isInfinity(i) && this.p(a, i, d == b.length - 1)) {
                let k = this.w(a, g, e, a.f.m);
                if (k != null) {
                    this.b.i(k, this.h(a, i));
                }
            }
        }
        if (a.j) {
            for (let l = 0; l < c.length; l++) {
                let m = c[l];
                let n = this.m(a, m);
                a.b = a.d;
                this.k(a, a.v, n);
                a.b = null;
            }
        }
    }
    w(a, b, c, d) {
        return null;
    }
}
AxisRendererBase.$t = markType(AxisRendererBase, 'AxisRendererBase');
/**
 * @hidden
 */
export class NumericAxisRenderer extends AxisRendererBase {
    constructor(a) {
        super(a);
        this.ac = null;
        this.ad = false;
    }
    w(a, b, c, d) {
        let e;
        if (a.s != null) {
            e = this.g(b);
        }
        else {
            b = Math.round(b * 1000000) / 1000000;
            if (a.i() && a.ab) {
                return this.ae(b);
            }
            e = b.toString();
        }
        return e;
    }
    ae(a) {
        if (this.ad) {
            return a.toString();
        }
        if (this.ac == null) {
            this.ac = NumberAbbreviatorFactory.a(this.b.a.br);
            if (this.ac == null) {
                this.ad = true;
                return a.toString();
            }
        }
        return this.ac.abbreviate(a);
    }
}
NumericAxisRenderer.$t = markType(NumericAxisRenderer, 'NumericAxisRenderer', AxisRendererBase.$);
/**
 * @hidden
 */
export class VerticalAxisLabelPanel extends AxisLabelPanelBase {
    constructor() {
        super(...arguments);
        this.c1 = 0;
        this.cy = 0;
        this.c0 = 0;
        this.cz = 0;
    }
    ad() {
        return new VerticalAxisLabelPanelView(this);
    }
    b8(a) {
        super.b8(a);
        this.cs = a;
    }
    bx() {
        this.cs.ay();
    }
    bh() {
        return this.ac.bc != null ? this.ac.bc.angle : -90;
    }
    cu() {
        let a = 0;
        let b = this.ai(this.ac.bc);
        if (b == 1) {
            a += this.bl();
        }
        let c = this.ag;
        if (c == 3 || c == 7) {
            a += this.ac.df;
        }
        return a;
    }
    cw() {
        let a = 0;
        let b = this.ai(this.ac.bc);
        if (b == 2) {
            a += this.bl();
        }
        let c = this.ag;
        if (c == 2 || c == 6) {
            a += this.ac.df;
        }
        return a;
    }
    cx() {
        let a = (this.a5 - this.cu()) - this.cw();
        if (a < 0) {
            a = 0;
        }
        return a;
    }
    cv() {
        let a = ((this.cx() - this.ae.p()) - this.ae.q());
        if (a < 0) {
            a = 0;
        }
        return a;
    }
    ay() {
        let a = new List$1(Rect.$, 0);
        this.aq = false;
        this.ap = false;
        if (this.af != null && this.af.j() && this.bd() % 360 != 0) {
            this.ap = true;
        }
        this.c1 = -1.7976931348623157E+308;
        this.cy = -1.7976931348623157E+308;
        this.c0 = -1.7976931348623157E+308;
        this.cz = -1.7976931348623157E+308;
        let b = this.ae.p();
        let c = this.ae.r();
        let d = this.ae.q();
        let e = this.ae.o();
        let f = this.cu();
        let g = false;
        if (!isNaN_(this.a6)) {
            this.c1 = Math.max(this.a6, this.c1);
            this.c0 = Math.max(this.a7, this.c0);
        }
        for (let h = 0; h < this.a3.count; h++) {
            let i = this.a3._inner[h];
            let j = this.a2._inner[h].a;
            let k = this.bb(i);
            let l = this.bc(i);
            let m = k + c + e;
            let n = l + b + d;
            let o = this.cn.left + f;
            let p = this.a2._inner[h].c - m / 2;
            if (j) {
                let q = this.a6;
                if ((isNaN_(this.a6) || n > this.a6 || this.a2._inner[h].b) && !g) {
                    if (this.a2._inner[h].b) {
                        g = true;
                    }
                    this.a2._inner[h].b = false;
                    this.a6 = n;
                    this.a7 = l;
                }
                this.c1 = Math.max(this.a6, this.c1);
                this.cy = Math.max(m, this.cy);
                this.c0 = Math.max(this.a7, this.c0);
                this.cz = Math.max(k, this.cz);
            }
            else {
                this.c1 = Math.max(n, this.c1);
                this.cy = Math.max(m, this.cy);
                this.c0 = Math.max(l, this.c0);
                this.cz = Math.max(k, this.cz);
            }
            let r = new Rect(0, o, p, n, m);
            a.add(r);
        }
        let s = 0;
        if (this.ap) {
            s = this.bd() % 360;
            if (s < 0) {
                s += 360;
            }
        }
        let t = this.ac.bz();
        if (!t) {
            this.c2(s, b, d);
        }
        else {
            this.ae.ac();
        }
        if (this.ap) {
            for (let u = 0; u < a.count; u++) {
                let v = a._inner[u];
                v.y = this.a2._inner[u].c - this.cy / 2;
                a._inner[u] = v;
            }
        }
        let w = false;
        if (!this.ap && this.c1 <= this.a5) {
            w = true;
        }
        if (!w) {
            let x = this.cn.height;
            let y = this.cx();
            let z = y;
            let aa = this.a2.count > 1 ? Math.abs(this.a2._inner[1].c - this.a2._inner[0].c) : x;
            let ab = Math.abs(Math.asin(aa / this.c1) * (180 / Math.PI));
            let ac = (s >= ab && s <= 180 - ab) || (s - 180 >= ab && s - 180 <= 180 - ab);
            for (let ad = 0; ad < a.count; ad++) {
                if (this.ap) {
                    let ae = s * (Math.PI / 180);
                    let af = this.bm(this.a3._inner[ad]);
                    z = Math.min(y / Math.abs(Math.cos(ae)), af);
                    if (ac) {
                        let ag;
                        if (s > 0 && s < 90) {
                            ag = (Math.PI / 180) * (90 - s);
                        }
                        else if (s > 270 && s < 360) {
                            ag = (Math.PI / 180) * (s - 270);
                        }
                        else {
                            ag = 0;
                        }
                        z = aa / Math.cos(ag);
                    }
                }
                let ah = a._inner[ad];
                ah.width = Math.min(ah.width, z);
                a._inner[ad] = ah;
                if (!(typeCast(TextBlock.$, this.a3._inner[ad]) !== null)) {
                    this.a3._inner[ad].width = z;
                }
                let ai = typeCast(TextBlock.$, this.a3._inner[ad]);
                if (ai != null) {
                    let aj = this.bs(ad, ai, z, b, d);
                    if (!Base.equalsStatic(ai.ak, aj)) {
                        ai.ak = aj;
                        this.a3._inner[ad].width = z;
                    }
                }
            }
            if (!t) {
                this.c2(s, b, d);
            }
        }
        if (this.ct()) {
            this.c3(a);
        }
        return a;
    }
    c2(a, b, c) {
        let d = a * (Math.PI / 180);
        let e = Math.abs(this.c0 * Math.cos(d)) + Math.abs(this.cz * Math.sin(d));
        let f = this.bl();
        let g = (e + b + c) + (f) + this.ac.df;
        this.a9 = Math.max(this.ac.d3, g);
    }
    c3(a) {
        this.cs.az(a, this.c1);
    }
    cb(a, b) {
        let c = 0;
        let d = this.cz / 2;
        let e = new TransformGroup();
        let f = AngleSimplifier.a(this.bd());
        let g = ((() => {
            let $ret = new RotateTransform();
            $ret.j = f;
            $ret.k = c;
            $ret.l = d;
            return $ret;
        })());
        let h = 0;
        let i = 0;
        if (f != 0 && f != 360) {
            f -= 90;
            if (f > 0 && f < 180) {
                g.k = this.c0;
                h = -this.c0 + this.cz / 2;
                h = h + Math.sin(MathUtil.k(f - 180)) * (this.cz / 2);
            }
            else {
                if (f >= 180) {
                    h = h - Math.cos(MathUtil.k(f)) * (this.cz / 2);
                }
                else {
                    h = h + Math.cos(MathUtil.k(f)) * (this.cz / 2);
                }
            }
        }
        let j = ((() => {
            let $ret = new TranslateTransform();
            $ret.j = h;
            $ret.k = i;
            return $ret;
        })());
        e.j.add(g);
        e.j.add(j);
        a.j = e;
    }
    ct() {
        return !this.aq && !this.ap;
    }
    cm() {
        let a = this.ai(this.ac.bc);
        let b = this.bl();
        let c = this.ag;
        let d = 0;
        if (a == 1) {
            d += this.cn.left;
            if (c == 3 || c == 7) {
                d += this.ac.df;
            }
        }
        else {
            d = this.cn.right - b;
            if (c == 6 || c == 2) {
                d -= this.ac.df;
            }
        }
        let e = this.bj();
        let f = 0;
        let g = this.ac.bc == null ? 1 : this.ac.bc.verticalAlignment;
        if (g == 0) {
            f = this.cn.top;
        }
        else if (g == 2) {
            f = this.cn.bottom - e;
        }
        else {
            f = (this.cn.top + (this.cn.height / 2)) - (e / 2);
        }
        return new Rect(0, d, f, b, e);
    }
    ai(a) {
        if (a == null) {
            return this.ac.bf.ak(this.ac);
        }
        if (a.position == 0) {
            if (this.ac != null && this.ac.bf != null) {
                return this.ac.bf.ak(this.ac);
            }
            return 1;
        }
        return a.position;
    }
    ah() {
        return 2;
    }
    as(a) {
        return a == 2 || a == 3 || a == 6 || a == 7;
    }
    b0() {
        let a = this.ae.at();
        this.ac.gh(a);
        if (this.af != null && this.af.visibility != 0) {
            return;
        }
        let b = this.ac.df;
        if (b == 0) {
            return;
        }
        let c = this.aw();
        if (c == null) {
            return;
        }
        let d = this.cn.left;
        let e;
        let f = this.ag;
        if (f == 2 || f == 6) {
            d = this.cn.right;
            e = d - b;
        }
        else {
            e = d + b;
        }
        let g = this.ae.b();
        for (let h of fromEnum(c)) {
            this.b3(a, h, d, e, this.co, g);
        }
        if (!this.ab.contains(this.ae.av)) {
            this.ab.add(this.ae.av);
        }
    }
}
VerticalAxisLabelPanel.$t = markType(VerticalAxisLabelPanel, 'VerticalAxisLabelPanel', AxisLabelPanelBase.$);
/**
 * @hidden
 */
export let IHasCategoryAxis_$type = new Type(null, 'IHasCategoryAxis');
/**
 * @hidden
 */
export let IHasCategoryModePreference_$type = new Type(null, 'IHasCategoryModePreference', null, [IHasCategoryAxis_$type]);
/**
 * @hidden
 */
export let IHighlightingManager_$type = new Type(null, 'IHighlightingManager');
/**
 * @hidden
 */
export class HighlightingInfo extends Base {
    constructor() {
        super();
        this.f = 0;
        this.e = 0;
        this.a = 0;
        this.d = 0;
        this.c = false;
        this.b = null;
        this.a = HighlightingState.outward;
        this.d = 0;
        this.c = false;
    }
}
HighlightingInfo.$t = markType(HighlightingInfo, 'HighlightingInfo');
/**
 * @hidden
 */
export let ISeriesInteractionManager_$type = new Type(null, 'ISeriesInteractionManager');
/**
 * @hidden
 */
export let ISeriesViewerInteractionManager_$type = new Type(null, 'ISeriesViewerInteractionManager');
/**
 * @hidden
 */
export let IDataChartVisualDataManager_$type = new Type(null, 'IDataChartVisualDataManager');
/**
 * @hidden
 */
export let IAxisVisualDataManager_$type = new Type(null, 'IAxisVisualDataManager');
/**
 * @hidden
 */
export let ISeriesVisualDataManager_$type = new Type(null, 'ISeriesVisualDataManager');
/**
 * @hidden
 */
export class XamDataChart extends SeriesViewer {
    constructor() {
        super();
        this._xsr = null;
        this.nh = null;
        this.nx = 1;
        this.ny = 1;
        this.nd = new AxisCollection();
        this.axisRangeChanged = null;
        this.nk = null;
        this.n0 = 0;
        this.n2 = 0;
        this.n1 = 0;
        this.nz = 0;
        this.ab = XamDataChart.$;
        let a = this.axes;
        a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.oz));
        let b = this.axes;
        b.collectionResetting = delegateCombine(b.collectionResetting, runOn(this, this.o0));
    }
    get XSRP() {
        if (this._xsr == null) {
            this._xsr = new SRProvider(this.bn.i.af);
        }
        return this._xsr;
    }
    get ni() {
        if (this.nh == null) {
            this.nh = DVContainer.instance.createInstance(IDataChartVisualDataManager_$type, () => this.XSRP.q);
        }
        return this.nh;
    }
    static staticInit() {
        XamDataChart.n6 = -1.7976931348623157E+308;
        XamDataChart.n5 = 1.7976931348623157E+308;
    }
    static od(a) {
        if (a.bs == null) {
            return -1;
        }
        if (!a.cw) {
            return -1;
        }
        let b = XamDataChartView.au(a);
        if (b.count == 0) {
            return -1;
        }
        let c = -1;
        for (let d = 0; d < b.count; d++) {
            c = Math.max(c, b._inner[d].fh);
        }
        let e = c + 1;
        if (a.cs) {
            e = a.e7();
            if (e == -1) {
                return -1;
            }
            let f = a.a6();
            e = f.fh + e;
        }
        return e;
    }
    jd(a, b, c, d) {
        super.jd(a, b, c, d);
        switch (b) {
            case XamDataChart.$$p[15]:
                this.n3 = this.ob;
                break;
            case XamDataChart.$$p[16]:
                this.n4 = this.oc;
                break;
            case "ActualWindowScaleHorizontal":
            case "ActualWindowScaleVertical":
                if (!this.dg) {
                    this.kk(this.eg(), this.eh());
                }
                break;
            case XamDataChart.$$p[5]:
                this.bn.fe(d);
                {
                    for (let e of fromEnum(this.axes)) {
                        e.g4();
                    }
                }
                break;
            case XamDataChart.$$p[6]:
                this.nr = this.nq;
                break;
            case XamDataChart.$$p[14]:
                this.nt = this.nv;
                break;
            case XamDataChart.$$p[7]:
            case XamDataChart.$$p[9]:
                this.kg();
                break;
            case XamDataChart.$$p[0]:
            case XamDataChart.$$p[13]:
                if (c != d) {
                    for (let f of fromEnum(this.axes)) {
                        f.cf = true;
                        f.g4();
                    }
                }
                break;
            case XamDataChart.$$p[4]:
            case XamDataChart.$$p[2]:
            case XamDataChart.$$p[3]:
                for (let g of fromEnum(this.axes)) {
                    g.hb();
                }
                break;
        }
    }
    o2() {
        this.mu = this.ms(this.m3);
        for (let a of fromEnum(this.axes)) {
            a.cf = true;
            a.g4();
        }
        for (let b of fromEnum(this.series)) {
            b.jc(false);
        }
    }
    eg() {
        return this.n3;
    }
    eh() {
        return this.n4;
    }
    j9() {
        super.j9();
        this.n3 = this.mq.width;
        this.n4 = this.mq.height;
    }
    get n3() {
        return this.nx;
    }
    set n3(a) {
        let b = this.nx;
        this.nx = a;
        this.jh("ActualWindowScaleHorizontal", b, this.nx);
    }
    get n4() {
        return this.ny;
    }
    set n4(a) {
        let b = this.ny;
        this.ny = a;
        this.jh("ActualWindowScaleVertical", b, this.ny);
    }
    c3() {
        return this.nr;
    }
    c4() {
        return this.nt;
    }
    get axes() {
        return this.nd;
    }
    oz(a, b) {
        if (b.oldItems != null) {
            for (let c of fromEn(b.oldItems)) {
                if (c != null) {
                    c.bl = null;
                    c.bf = null;
                    this.jw(c);
                    this.bn.dl(c);
                    c.rangeChanged = delegateRemove(c.rangeChanged, runOn(this, this.o1));
                    this.bn.dm(c);
                    if (c.cw != null) {
                        for (let d of fromEnum(c.ct())) {
                            d.jc(false);
                        }
                    }
                }
            }
            if (this.axes.count == 0) {
                this.j1();
            }
        }
        if (b.newItems != null) {
            for (let e of fromEn(b.newItems)) {
                if (e != null) {
                    this.kc(e);
                    e.bl = this.actualSyncLink;
                    e.bf = this;
                    e.a2.aw();
                    this.bn.bl(e);
                    e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.o1));
                    this.bn.bi(e);
                }
            }
        }
        this.h1();
    }
    o0(a, b) {
        let c = new List$1(Series.$, 0);
        for (let d of fromEnum(this.axes)) {
            if (d.cw != null) {
                for (let e of fromEnum(d.ct())) {
                    if (!c.contains(e)) {
                        c.add(e);
                    }
                }
            }
            d.bl = null;
            d.bf = null;
            this.jw(d);
            this.bn.dl(d);
            d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.o1));
            this.bn.dm(d);
            this.j1();
        }
        for (let f of fromEnum(this.series)) {
            if (!c.contains(f)) {
                c.add(f);
            }
        }
        for (let g of fromEnum(c)) {
            g.jc(false);
        }
    }
    o1(a, b) {
        let c = typeCast(Axis.$, a);
        if (c == null) {
            return;
        }
        this.h1();
        if (this.axisRangeChanged != null) {
            this.axisRangeChanged(this, new ChartAxisRangeChangedEventArgs(this, c, b.oldMinimumValue, b.minimumValue, b.oldMaximumValue, b.maximumValue));
        }
        if (c.ag != null) {
            c.ag.g1();
        }
        c.g1();
        let d = this.cd;
        if (typeCast(CategoryAxisBase.$, c) !== null) {
            d = true;
        }
        for (let e of fromEnum(c.ct())) {
            e.dl = true;
            this.h1();
            e.jc(d);
        }
        if (c.bf != null) {
            for (let f of fromEnum(c.bf.series)) {
                XamDataChart.o3(c, d, f);
            }
        }
        for (let g of fromEnum(this.axes)) {
            if (g != c && g.ag != null && g.ag == c) {
                g.g1();
            }
        }
    }
    static o3(a, b, c) {
    }
    ki(a, b) {
        super.ki(a, b);
        if (this.axes == null) {
            return;
        }
        for (let c of fromEnum(this.axes)) {
            c.bl = this.actualSyncLink;
            c.bf = this;
        }
    }
    getFontInfo() {
        this.nk = this.nj.fb;
        return this.nk;
    }
    o4() {
        this.bn.d4();
        for (let a of fromEnum(this.axes)) {
            a.g5(false);
        }
        for (let b of fromEnum(this.series)) {
            b.bi.bg();
            b.jc(false);
        }
    }
    getFontBrush() {
        return this.nj.fj;
    }
    hi() {
        super.hi();
        let a = new List$1(Axis.$, 0);
        for (let b = 0; b < this.axes.count; b++) {
            a.add(this.axes._inner[b]);
        }
        for (let c = 0; c < a.count; c++) {
            this.axes.remove(a._inner[c]);
            if (typeCast(CategoryAxisBase.$, a._inner[c]) !== null) {
                let d = a._inner[c];
                this.jy(d.name, true);
                d.itemsSource = null;
            }
            a._inner[c].gu(null, null);
        }
    }
    l5() {
        return this.nj.ff;
    }
    dd() {
        return true;
    }
    kd() {
        super.kd();
        if (!this.c6) {
            return;
        }
        for (let a of fromEnum(this.axes)) {
            this.kc(a);
        }
    }
    l6(a) {
        return this.pp(a, this.m9);
    }
    pp(a, b) {
        if (b != null && b.count > 0) {
            return b.item(a % b.count);
        }
        else {
            return null;
        }
    }
    ma(a) {
        return this.pp(a, this.na);
    }
    mb(a) {
        return this.pp(a, this.nb);
    }
    mc(a) {
        return this.pp(a, this.nc);
    }
    cl() {
        if (this.ns) {
            return true;
        }
        return this.np();
    }
    np() {
        for (let a = 0; a < this.series.count; a++) {
            if (this.series._inner[a].c2 || this.series._inner[a].c0) {
                return true;
            }
        }
        for (let b = 0; b < this.axes.count; b++) {
            if (this.axes._inner[b].b0 || this.axes._inner[b].cb) {
                return true;
            }
        }
        return false;
    }
    bm() {
        return new XamDataChartView(this);
    }
    i1(a) {
        super.i1(a);
        this.nj = a;
    }
    jt() {
        for (let a = 0; a < this.nd.count; a++) {
            this.nd._inner[a].cf = true;
            this.nd._inner[a].g5(false);
        }
        super.jt();
    }
    get n8() {
        return this.n0;
    }
    set n8(a) {
        this.n0 = a;
        this.o2();
    }
    get oa() {
        return this.n2;
    }
    set oa(a) {
        this.n2 = a;
        this.o2();
    }
    get n9() {
        return this.n1;
    }
    set n9(a) {
        this.n1 = a;
        this.o2();
    }
    get n7() {
        return this.nz;
    }
    set n7(a) {
        this.nz = a;
        this.o2();
    }
    ms(a) {
        let b = super.ms(a);
        if (a.isEmpty) {
            return Rect.empty;
        }
        if (this.n8 == 0 && this.oa == 0 && this.n9 == 0 && this.n7 == 0) {
            return Rect.empty;
        }
        if (this.n8 + this.n9 >= a.width || this.oa + this.n7 >= a.height) {
            return Rect.empty;
        }
        let c = new Rect(0, a.left + this.n8, a.top + this.oa, a.width - this.n8 - this.n9, a.height - this.oa - this.n7);
        return c;
    }
    mx() {
        let a = this.m3;
        let b = this.m4;
        let c = this.mu;
        if (c.isEmpty || a.isEmpty) {
            return a;
        }
        if (c.containsRect(a)) {
            return a;
        }
        if (a.containsRect(c)) {
            return c;
        }
        return a;
    }
    oe() {
        return this.ni.exportVisualData(this);
    }
    om() {
        let cvd_ = this.oe();
        cvd_.scaleByViewport();
        return (cvd_.serialize());
    }
    ja() {
        super.ja();
        for (let a = 0; a < this.axes.count; a++) {
            let b = this.axes._inner[a];
            let c = 50;
            if (!isNaN_(b.at.a9)) {
                c = b.at.a9;
            }
            b.dh = c;
        }
    }
    jv() {
        super.jv();
        for (let a = 0; a < this.axes.count; a++) {
            let b = this.axes._inner[a];
            b.dh = NaN;
            b.cf = true;
            b.g5(false);
        }
    }
    nw(a) {
        let b = new List$1(Axis.$, 0);
        for (let c of fromEnum(this.series)) {
            let d = c.am(a);
            if (d != null) {
                b.add(d);
            }
        }
        return b;
    }
}
XamDataChart.$t = markType(XamDataChart, 'XamDataChart', SeriesViewer.$);
XamDataChart.n6 = 0;
XamDataChart.n5 = 0;
Type.dep(DependencyProperty, PropertyMetadata, XamDataChart, 'jh', ['AlignsGridLinesToPixels:nn:o5', [0, true], 'Brushes:m9:o6', [BrushCollection.$, null], 'DefaultAxisMajorStroke:pm:o7', [Brush.$, null], 'DefaultAxisMinorStroke:pn:o8', [Brush.$, null], 'DefaultAxisStroke:po:o9', [Brush.$, null], 'GridMode:ng:pa', [GridMode_$type, enumGetBox(GridMode_$type, 2)], 'HorizontalZoomable:nq:pb', [0, false], 'IsHorizontalZoomEnabled:nr:pc', [0, false], 'IsSquare:ns:pd', [0, false], 'IsVerticalZoomEnabled:nt:pe', [0, false], 'MarkerBrushes:na:pf', [BrushCollection.$, null], 'MarkerOutlines:nb:pg', [BrushCollection.$, null], 'Outlines:nc:ph', [BrushCollection.$, null], 'ShouldClipGridlines:nu:pi', [0, true], 'VerticalZoomable:nv:pj', [0, false], 'WindowScaleHorizontal:ob:pk', [1, NaN], 'WindowScaleVertical:oc:pl', [1, NaN]]);
/**
 * @hidden
 */
export class LabelPanelArranger extends Base {
    static e(a, b) {
        for (let c of fromEnum(a)) {
            let d = c.ac;
            let e = d.ag;
            e = LabelPanelArranger.a(c, d, e);
            let f = LabelPanelArranger.b(c);
            let g = 0;
            let h = 0;
            let i = 0;
            if (d.bz()) {
                c.ae.ac();
                i = c.a9;
            }
            else {
                i = c.ba(b);
            }
            g = i;
            h = i;
            if (c.ac.aw != null && c.ac.aw.visibility != 0) {
                h = 0;
                g = 0;
            }
            if (c.an()) {
                switch (f) {
                    case 0:
                        b.y = Math.max(0, b.top + h);
                        b.height = Math.max(0, b.height - h);
                        d.aw.c = 0;
                        break;
                    case 4:
                        if (e != null && (c.a8 - b.top < h && typeCast(HorizontalAxisLabelPanel.$, c) !== null)) {
                            d.aw.c = 5;
                        }
                        else {
                            d.aw.c = 4;
                        }
                        break;
                    case 5:
                        if (e != null && (b.bottom - c.a8 < h && typeCast(HorizontalAxisLabelPanel.$, c) !== null)) {
                            if (d.aw != null) {
                                d.aw.c = 4;
                            }
                        }
                        else {
                            if (d.aw != null) {
                                d.aw.c = 5;
                            }
                        }
                        break;
                    case 1:
                    default:
                        if (d.aw != null) {
                            d.aw.c = 1;
                        }
                        b.height = Math.max(0, b.height - h);
                        break;
                }
            }
            if (typeCast(VerticalAxisLabelPanel.$, c) !== null) {
                switch (f) {
                    case 3:
                        b.width = Math.max(0, b.width - g);
                        d.aw.c = 3;
                        break;
                    case 6:
                        if (e != null && c.a8 - b.left < g) {
                            d.aw.c = 7;
                        }
                        else {
                            d.aw.c = 6;
                        }
                        break;
                    case 7:
                        if (e != null && b.right - c.a8 < g) {
                            d.aw.c = 6;
                        }
                        else {
                            d.aw.c = 7;
                        }
                        break;
                    case 2:
                    default:
                        if (d.aw != null) {
                            d.aw.c = 2;
                        }
                        b.x = Math.max(0, b.left + g);
                        b.width = Math.max(0, b.width - g);
                        break;
                }
            }
            if (c.ac.b0) {
                if (d.aw != null) {
                    d.aw.c = f;
                }
            }
        }
        return b;
    }
    static a(a, b, c) {
        return b.ah();
    }
    static b(a) {
        if (a == null) {
            return 1;
        }
        else {
            let b = a.ac;
            if (b != null && b.aw != null) {
                let c = b.aw.c;
                if (!a.as(c)) {
                    return a.ah();
                }
                return c;
            }
            else {
                return a.ah();
            }
        }
    }
    static c(a, b, c, d) {
        let e = a.ac;
        let f = e.ag;
        f = LabelPanelArranger.a(a, e, f);
        let g = LabelPanelArranger.b(a);
        let h;
        let i = a.ba(c);
        let j = Math.max(0, i);
        let k = Math.max(0, i);
        if (a.ac != null && a.ac.aw != null && a.ac.aw.visibility == 1) {
            return;
        }
        switch (g) {
            case 3:
                b.g = b.g - k;
                b.d = b.d - k;
                h = new Rect(0, b.g, c.top, k, c.height);
                d(a, h);
                break;
            case 2:
                h = new Rect(0, b.f, c.top, k, c.height);
                d(a, h);
                b.f = b.f + k;
                b.c = b.c + k;
                break;
            case 7:
                if (f != null) {
                    h = new Rect(0, b.f + a.a8, c.top, k, c.height);
                }
                else {
                    b.d = b.d - k;
                    h = new Rect(0, b.d, c.top, k, c.height);
                }
                d(a, h);
                break;
            case 6:
                if (f != null) {
                    h = new Rect(0, b.f + a.a8 - k, c.top, k, c.height);
                }
                else {
                    h = new Rect(0, b.c, c.top, k, c.height);
                    b.c = b.c + k;
                }
                d(a, h);
                break;
            case 1:
                b.a = b.a - j;
                b.b = b.b - j;
                h = new Rect(0, c.left, b.a, c.width, j);
                d(a, h);
                break;
            case 0:
                h = new Rect(0, c.left, b.h, c.width, j);
                d(a, h);
                b.h = b.h + j;
                b.e = b.e + j;
                break;
            case 5:
                if (f != null) {
                    h = new Rect(0, c.left, b.h + a.a8, c.width, j);
                }
                else {
                    b.b = b.b - j;
                    h = new Rect(0, c.left, b.b, c.width, j);
                }
                d(a, h);
                break;
            case 4:
                if (f != null) {
                    h = new Rect(0, c.left, b.h + a.a8 - j, c.width, j);
                }
                else {
                    h = new Rect(0, c.left, b.e, c.width, j);
                    b.e = b.e + j;
                }
                d(a, h);
                break;
        }
        if (a.ac.b0) {
            h = new Rect(0, c.left, c.top, c.width, c.height);
            d(a, h);
        }
    }
    static d(a, b, c, d) {
        let e = new List$1(AxisLabelPanelBase.$, 0);
        let f = new List$1(AxisLabelPanelBase.$, 0);
        for (let g of fromEnum(a)) {
            let h = LabelPanelArranger.b(g);
            switch (h) {
                case 1:
                case 2:
                case 0:
                case 3:
                    f.add(g);
                    break;
                case 5:
                case 6:
                case 4:
                case 7:
                    e.add(g);
                    break;
            }
        }
        for (let i of fromEnum(f)) {
            LabelPanelArranger.c(i, b, c, d);
        }
        for (let j of fromEnum(e)) {
            LabelPanelArranger.c(j, b, c, d);
        }
    }
}
LabelPanelArranger.$t = markType(LabelPanelArranger, 'LabelPanelArranger');
/**
 * @hidden
 */
export class ChartContentManager extends DependencyObject {
    constructor(a) {
        super();
        this.l = null;
        this.q = new Dictionary$2(ChartContentType_$type, Dictionary$2.$.specialize(DependencyObject.$, ContentInfo.$), 0);
        this.s = new List$1(Series.$, 0);
        this.m = false;
        this.u = null;
        this.p = false;
        this.n = false;
        this.o = false;
        this.o = true;
        this.n = true;
        this.q.addItem(0, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
        this.q.addItem(1, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
        this.q.addItem(2, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
        this.l = a;
    }
    get t() {
        return this.s;
    }
    set t(a) {
        this.s = a;
    }
    k(a, b, c) {
        let d = this.j(a, b);
        d.a = c;
        return d;
    }
    ac(a, b) {
        let c = this.q.item(a);
        if (c.containsKey(b)) {
            c.removeItem(b);
        }
        let d = typeCast(Series.$, b);
        if (d != null && this.t.contains(d)) {
            this.t.remove(d);
        }
    }
    z(a) {
        let b = this.u;
        this.u = a;
        if (this.m && b == null && this.u != null) {
            this.u.setTimeout(runOn(this, this.v), 0);
        }
    }
    y() {
        if (!this.m) {
            this.m = true;
            if (this.u != null) {
                this.u.setTimeout(runOn(this, this.v), 0);
            }
            else {
            }
        }
    }
    ab(a, b, c, d) {
        let e = c;
        if (!e.c) {
            e.b = d;
        }
        else {
            if (!d) {
                e.b = false;
            }
        }
        if (!e.c) {
            e.c = true;
            this.y();
        }
    }
    j(a, b) {
        let c = this.q.item(a);
        let d = null;
        if (!((() => { let e = c.tryGetValue(b, d); d = e.p1; return e.ret; })())) {
            d = new ContentInfo();
            d.h = b;
            c.addItem(b, d);
            let e = typeCast(Series.$, b);
            if (e != null && !this.t.contains(e)) {
                if (e.cs) {
                    let f = e.a6();
                    let g = this.t.indexOf(f) + 1;
                    g += e.fb();
                    if (this.t.count <= g || f.fg() == 0 || g == -1) {
                        this.t.add(e);
                    }
                    else {
                        this.t.insert(g, e);
                    }
                }
                else {
                    this.t.add(e);
                }
            }
        }
        return d;
    }
    x() {
        this.v();
    }
    v() {
        if (this.l == null || this.q == null) {
            return;
        }
        if (!this.m) {
            return;
        }
        this.m = false;
        if (this.l != null) {
            this.l.hc();
        }
        for (let a of fromEnum(this.r())) {
            a.f();
        }
        if (!this.m) {
            this.l.ji();
        }
    }
    *_r() {
        let a = null;
        a = this.q.item(1);
        for (let b of fromEnum(a.values)) {
            yield b;
        }
        a = this.q.item(0);
        let c = new List$1(ContentInfo.$, 0);
        for (let d of fromEnum(this.t)) {
            if (!d.cj) {
                c.add(a.item(d));
            }
        }
        for (let e of fromEnum(this.t)) {
            if (e.cj) {
                c.add(a.item(e));
            }
        }
        for (let f of fromEnum(c)) {
            yield f;
        }
        a = this.q.item(2);
        for (let g of fromEnum(a.values)) {
            yield g;
        }
    }
    r() {
        return toEnum(() => this._r());
    }
    w(a) {
        for (let b of fromEnum(this.q.item(1).values)) {
            b.h.gs();
        }
        for (let c of fromEnum(this.q.item(1).values)) {
            c.f();
        }
        for (let d of fromEnum(this.q.item(1).values)) {
            d.h.iz = Rect.empty;
        }
    }
    ad(a, b, c, d) {
        c.i = d;
    }
    aa(a, b) {
        if (!b.e) {
            b.e = true;
            this.y();
        }
    }
}
ChartContentManager.$t = markType(ChartContentManager, 'ChartContentManager', DependencyObject.$);
/**
 * @hidden
 */
export class ContentInfo extends Base {
    constructor() {
        super(...arguments);
        this.h = null;
        this.a = null;
        this.b = false;
        this.c = false;
        this.i = null;
        this.e = false;
    }
    get d() {
        if (this.i.isEmpty) {
            return false;
        }
        if (this.i.width == 0 && this.i.height == 0) {
            return false;
        }
        return true;
    }
    g() {
        if (this.e && typeCast(Axis.$, this.h) !== null) {
            this.e = false;
            let a = this.c;
            this.c = true;
            let b = this.h.cl(true);
            if (!b) {
                this.c = a;
            }
        }
    }
    f() {
        this.g();
        if (typeCast(Axis.$, this.h) !== null) {
            let a = typeCast(Axis.$, this.h);
            if (a.ag != null) {
                let b = a.ag;
                if (b.a3 != null && b.a3.e) {
                    b.a3.g();
                }
            }
        }
        if (this.c) {
            this.c = false;
            this.a(this.b);
            this.b = false;
        }
    }
}
ContentInfo.$t = markType(ContentInfo, 'ContentInfo');
/**
 * @hidden
 */
export class Series extends Control {
    constructor() {
        super();
        this.bi = null;
        this.fk = 0;
        this.lo = null;
        this.e3 = null;
        this.b1 = null;
        this.a1 = null;
        this.az = null;
        this.bt = null;
        this.jw = null;
        this.dy = new Dictionary$2(String_$type, String_$type, 0);
        this.dx = new Dictionary$2(String_$type, FastReflectionHelper.$, 0);
        this.propertyChanged = null;
        this.propertyUpdated = null;
        this.renderRequested = null;
        this.dm = false;
        this.bh = null;
        this.aq = null;
        this.b6 = true;
        this.de = false;
        this.df = false;
        this.b7 = false;
        this.cd = false;
        this.bm = null;
        this.br = null;
        this.d3 = null;
        this.a4 = null;
        this.b0 = null;
        this.e0 = null;
        this.ju = null;
        this.av = null;
        this.bl = 0;
        this.bj = 0;
        this.bk = 0;
        this.cf = false;
        this.b9 = false;
        this.b5 = false;
        this.fn = null;
        this.a7 = new SeriesComponentsForView();
        this.b8 = false;
        this.fz = null;
        this.e2 = null;
        this._coercionMethods = null;
        this.b4 = false;
        this.bb = 0;
        this.ba = 0;
        this.b3 = null;
        this.le = { $type: Point_$type, x: NaN, y: NaN };
        this.d4 = NaN;
        this.d5 = NaN;
        DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
        DVContainer.instance.registerIfLoaded("InteractivityFactoryManager");
        DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
        this.fk = Series.e5++;
        this.dl = true;
        this.lo = Rect.empty;
        this.bi = this.bf();
        this.bi.br = Rect.empty;
        this.it(this.bi);
        this.bi.k = true;
        this.bi.ap();
        this.bi.k = false;
        this.ab = Series.$;
        this.b0 = (a, b) => {
            if (this.bs == null || !this.bs.cn) {
                this.js(b.oldRect, b.newRect);
            }
        };
        this.a4 = (a, b) => this.iy(a, b.propertyName, b.oldValue, b.newValue);
        this.e0 = (a, b) => {
            if (this.bs != null) {
                this.dl = true;
                this.bs.h2();
            }
            this.hy(b.action, b.position, b.count, b.propertyName);
        };
        this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.iy(a, b.propertyName, b.oldValue, b.newValue));
        this.jw = new Canvas();
        this.bt = new DoubleAnimator(0, 1, this.fi);
        let a = this.bt;
        a.propertyChanged = delegateCombine(a.propertyChanged, runOn(this, this.ho));
        this.g(Series.k1, ((() => {
            let $ret = new Binding(1, "Visibility");
            $ret.d = this;
            return $ret;
        })()));
        this.bc = this.bd();
    }
    get e4() {
        return this.e3;
    }
    set e4(a) {
        this.e3 = a;
        this.bt.u(this.e3);
    }
    provideRenderer(a) {
        this.e4 = a;
    }
    gv() {
        return this.a0.a$q(this);
    }
    ho(a, b) {
        this.ez = this.bt.o;
    }
    get b2() {
        if (this.b1 == null) {
            this.b1 = new SRProvider(this.e4);
        }
        if (this.b1.l == null) {
            this.b1.l = this.e4;
        }
        return this.b1;
    }
    get a2() {
        if (this.a1 == null) {
            this.a1 = DVContainer.instance.createInstance(ISeriesVisualDataManager_$type, () => this.b2.q);
        }
        return this.a1;
    }
    get dz() {
        return this.a0.a$h;
    }
    get a0() {
        if (this.az == null) {
            this.az = DVContainer.instance.createInstance(ISeriesInteractionManager_$type, () => this.b2.n);
            if (this.toolTip != null) {
                this.az.a$ah(this, this.toolTip);
            }
        }
        return this.az;
    }
    get cx() {
        return DVContainer.instance.checkLoaded("InteractivityFactoryManager");
    }
    it(a) {
    }
    ir() {
        this.hp(this.aw, this.aw);
        if (this.bz == null && this.bn != null && this.itemsSource != null) {
            this.bz = this.bn.getFastItemsSource(this.itemsSource);
        }
        this.bi.as();
    }
    is() {
        this.hu();
        if (this.bz != null && this.bn != null && this.itemsSource != null) {
            this.bz = this.bn.releaseFastItemsSource(this.itemsSource);
        }
        this.bi.at();
    }
    bg() {
        return this.bf();
    }
    bf() {
        return new SeriesView(this);
    }
    dt() {
        return false;
    }
    fs(a, b) {
        return null;
    }
    gu(a) {
        if (!this.dy.containsKey(a)) {
            let b = a.charAt(0).toUpperCase() + a.substr(1);
            this.dy.addItem(a, b);
        }
        return this.dy.item(a);
    }
    ft(a, b, c) {
        let d = null;
        if (!this.dx.containsKey(b)) {
            d = new FastReflectionHelper(false, c);
            this.dx.addItem(b, d);
        }
        else {
            d = this.dx.item(b);
        }
        d.propertyName = c;
        return d.getPropertyValue(a);
    }
    eb(a) {
        return this.e8(a);
    }
    fa(a) {
        return -1;
    }
    get_c1() {
        return false;
    }
    get c1() {
        return this.get_c1();
    }
    ap() {
        return null;
    }
    e8(a) {
        return -1;
    }
    fp(a) {
        return null;
    }
    fu(a, b) {
        return a.fp(b);
    }
    e7() {
        return -1;
    }
    fb() {
        return -1;
    }
    fg() {
        return -1;
    }
    get container() {
        return this.bs;
    }
    get hasSubItems() {
        return this.ci();
    }
    ci() {
        return false;
    }
    forSubItems(a) {
        this.h6(a);
    }
    h6(a) {
    }
    h7(a) {
    }
    k8() {
        return null;
    }
    resolveLegendIndex() {
        return this.fh;
    }
    a6() {
        return null;
    }
    get_cj() {
        return false;
    }
    get cj() {
        return this.get_cj();
    }
    get_isVertical() {
        return false;
    }
    get isVertical() {
        return this.get_isVertical();
    }
    get_cs() {
        return false;
    }
    get cs() {
        return this.get_cs();
    }
    get_ck() {
        return false;
    }
    get ck() {
        return this.get_ck();
    }
    get_c0() {
        return false;
    }
    get c0() {
        return this.get_c0();
    }
    get_c4() {
        return false;
    }
    get c4() {
        return this.get_c4();
    }
    get_c2() {
        return false;
    }
    get c2() {
        return this.get_c2();
    }
    get_isStacked() {
        return false;
    }
    get isStacked() {
        return this.get_isStacked();
    }
    get_cr() {
        return false;
    }
    get cr() {
        return this.get_cr();
    }
    get_c3() {
        return false;
    }
    get c3() {
        return this.get_c3();
    }
    get_cl() {
        return false;
    }
    get cl() {
        return this.get_cl();
    }
    get_ct() {
        return false;
    }
    get ct() {
        return this.get_ct();
    }
    get_c5() {
        return false;
    }
    get c5() {
        return this.get_c5();
    }
    get_c6() {
        return false;
    }
    get c6() {
        return this.get_c6();
    }
    a5() {
        return null;
    }
    get_cm() {
        return false;
    }
    get cm() {
        return this.get_cm();
    }
    get_cn() {
        return false;
    }
    get cn() {
        return this.get_cn();
    }
    d9(a, b, c, d, e) {
        return Number.POSITIVE_INFINITY;
    }
    ea(a, b, c, d, e, f, g) {
        return this.a0.a$i(this, a, b, c, d, e, f, g);
    }
    get_dv() {
        return false;
    }
    get dv() {
        return this.get_dv();
    }
    ep(a, b, c, d, e, f, g, h) {
        return this.a0.a$l(this, a, b, c, d, e, f, g, h);
    }
    ef(a, b, c, d, e, f, g, h) {
        return this.a0.a$k(this, a, b, c, d, e, f, g, h);
    }
    ff(a, b, c, d, e) {
        return this.a0.a$n(this, a, b, c, d, e);
    }
    ee(a) {
        return (a ? 10 : 3);
    }
    ah(a) {
        return null;
    }
    ai(a) {
        return null;
    }
    dg(a, b) {
        return this.a0.a$d(this, a, b);
    }
    aj(a, b, c, d, e, f) {
        return this.a0.a$a(this, a, b, c, d, e, f);
    }
    di(a, b, c) {
        return this.a0.a$e(this, a, b, c);
    }
    dj(a, b) {
        return this.a0.a$f(this, a, b);
    }
    fd(a, b, c, d, e) {
        return this.a0.a$m(this, a, b, c, d, e);
    }
    ed(a, b) {
        return this.a0.a$j(this, a, b);
    }
    fe(a, b) {
        return -1;
    }
    fc(a, b) {
        return -1;
    }
    en(a, b, c) {
        return NaN;
    }
    lk(a, b, c) {
        return { $type: Point_$type, x: NaN, y: NaN };
    }
    lt(a) {
        return Rect.empty;
    }
    ak(a) {
        let b = this.lt(a);
        if (!b.isEmpty) {
            let c = new Array(1);
            c[0] = b;
            return c;
        }
        return null;
    }
    lu(a) {
        return this.lt(this.ln(a));
    }
    al(a) {
        return this.ak(this.ln(a));
    }
    lv(a) {
        return Rect.empty;
    }
    lw(a) {
        return this.lv(this.ln(a));
    }
    dk(a, b) {
        return this.a0.a$g(this, a, b);
    }
    lm(a, b, c, d, e, f, g, h, i) {
        return this.a0.a$aj(this, a, b, c, d, e, f, g, h, i);
    }
    ej(a, b, c) {
        return this.en(a, b, c);
    }
    lg(a, b, c) {
        return this.lk(a, b, c);
    }
    el(a, b, c) {
        return this.en(a, b, c);
    }
    li(a, b, c) {
        return this.lk(a, b, c);
    }
    ll(a, b, c) {
        let d = this.ln(a);
        return this.lk(d, b, c);
    }
    eo(a, b, c) {
        let d = this.ln(a);
        return this.en(d, b, c);
    }
    lh(a, b, c) {
        let d = this.ln(a);
        return this.lg(d, b, c);
    }
    ek(a, b, c) {
        let d = this.ln(a);
        return this.ej(d, b, c);
    }
    lj(a, b, c) {
        let d = this.ln(a);
        return this.li(d, b, c);
    }
    em(a, b, c) {
        let d = this.ln(a);
        return this.el(d, b, c);
    }
    e9(a) {
        let b = this.ln(a);
        return this.e8(b);
    }
    eg() {
        return 0;
    }
    ec(a) {
        let b = this.ln(a);
        return this.eb(b);
    }
    fq(a) {
        let b = this.ln(a);
        return this.fp(b);
    }
    ch(a, b, c) {
        return false;
    }
    raisePropertyChanged(a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        if (this.propertyUpdated != null) {
            this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
        }
    }
    get_hasMarkers() {
        return false;
    }
    get hasMarkers() {
        return this.get_hasMarkers();
    }
    k5() {
        return null;
    }
    k6() {
        return null;
    }
    jy() {
        return null;
    }
    ln(a) {
        let b = this.bs != null ? this.bs.mt : this.bi.br;
        let c = this.bi.bs;
        let d = { $type: Point_$type, x: c.left + c.width * (a.x - b.left) / b.width, y: c.top + c.height * (a.y - b.top) / b.height };
        return d;
    }
    lf(a) {
        let b = this.bs != null ? this.bs.mt : this.bi.br;
        let c = this.bi.bs;
        let d = b.left + (a.x - c.left) / c.width * b.width;
        let e = b.top + (a.y - c.top) / c.height * b.height;
        return { $type: Point_$type, x: d, y: e };
    }
    fv(a, b) {
        let c = this.bi.c(a);
        let d = c != null ? c.item : null;
        if (d == null) {
            let e = this.ln(b);
            d = this.fp(e);
        }
        return d;
    }
    c9(a) {
        return false;
    }
    an(a) {
        return new AxisRange(NaN, NaN);
    }
    ao() {
        return new AxisRange(NaN, NaN);
    }
    jc(a) {
        this.de = false;
        if (this.bs != null) {
            this.bs.al.ab(0, this, this.aq, a);
            if (this.renderRequested != null) {
                let b = new RenderRequestedEventArgs();
                b.animate = a;
                this.renderRequested(this, b);
                a = b.animate;
            }
        }
    }
    h1(a) {
        this.jd(a);
        this.de = false;
    }
    jd(a) {
        if (this.dp && !this.dc()) {
            this.dn = false;
        }
    }
    hs() {
        if (this.dm && !this.dp) {
            this.bt.r = truncate(Math.max(this.eq(), this.er()));
            this.hw();
        }
    }
    hw() {
    }
    je(a, b) {
        if (this.bh == null) {
            this.bh = this.bf();
            this.bh.n = true;
            if (this.bs != null) {
                this.bs.ai.l(this.bh);
                this.bh.a = this.bs.ai;
            }
            this.bh.ap();
        }
        this.bh.br = a;
    }
    jb(a, b, c, d, e) {
        this.a0.a$r(this, a, b, d, e);
    }
    getEffectiveViewport1(a) {
        if (this.bs == null) {
            return Rect.empty;
        }
        if (a.m) {
            return this.bs.mu;
        }
        if (a.n) {
            if (this.bs.mu.isEmpty) {
                return this.bs.mu;
            }
            let b = this.bs.my(a.br, this.bs.m3, this.bs.mu);
            return b;
        }
        return this.bs.mu;
    }
    lp(a) {
        if (this.bs == null || this.bs.mt.isEmpty) {
            return a.br;
        }
        if (a.m) {
            return a.br;
        }
        if (a.n) {
            if (this.bs.mu.isEmpty) {
                return a.br;
            }
            if (this.bs.mt.equals1(this.bs.m3)) {
                return a.br;
            }
            let b = this.bs.my(a.br, this.bs.m3, this.bs.mu);
            let c = this.bs.mw(a.br, b, this.bs.mq);
            return c;
        }
        return this.bs.mt;
    }
    ls(a) {
        if (!this.lx.equals1(a)) {
            return Rect.empty;
        }
        return this.getEffectiveViewport();
    }
    lr(a) {
        if (this.bs == null || this.bs.mu.isEmpty) {
            return Rect.empty;
        }
        let b = this.bs.mu;
        let c = a.br;
        let d = (b.left - c.left) / c.width;
        let e = (b.top - c.top) / c.height;
        let f = (b.right - c.left) / c.width;
        let g = (b.bottom - c.top) / c.height;
        return new Rect(0, d, e, f - d, g - e);
    }
    getEffectiveViewport() {
        return this.getEffectiveViewport1(this.bi);
    }
    i6() {
        this.i7(null);
    }
    i7(a) {
        if (this.cx) {
            this.a0.a$ac(this, a);
        }
    }
    i8(a) {
        if (this.cx) {
            this.a0.a$ad(this, a, this.bs);
        }
    }
    getViewInfo(a, b) {
        a = this.bi.br;
        b = this.bi.bs;
        return {
            p0: a,
            p1: b
        };
    }
    dw(a, b, c) {
        if (a.width == 0 || a.height == 0) {
            return false;
        }
        if (this.cs) {
            return true;
        }
        return this._visibility == 0;
    }
    hv(a, b) {
        if (a) {
            this.dl = true;
        }
    }
    cb() {
        return this.cc(this.bi);
    }
    cc(a) {
        let b = a.br;
        let c = a.bs;
        if (!this.dw(b, c, a)) {
            this.hv(true, a);
            return true;
        }
        return false;
    }
    iu(a, b) {
        this.bi.br = b;
        this.jr(a, b);
        if (this.bs != null) {
            this.bs.al.ad(0, this, this.aq, b);
        }
    }
    js(a, b) {
    }
    jr(a, b) {
    }
    get dl() {
        return this.b6;
    }
    set dl(a) {
        this.b6 = a;
    }
    h5(a) {
        a.h2();
    }
    ik() {
        this.df = false;
        this.dl = true;
        if (this.bs != null) {
            this.bs.h2();
        }
    }
    ij() {
        this.df = false;
        this.dl = true;
        if (this.bs != null) {
            this.bs.h1();
        }
    }
    get_cw() {
        return true;
    }
    get cw() {
        return this.get_cw();
    }
    get_isUsableInLegend() {
        return true;
    }
    get isUsableInLegend() {
        return this.get_isUsableInLegend();
    }
    ip() {
        this.bi.al();
    }
    il() {
        this.iv();
    }
    iv() {
        this.bi.aw();
        this.ix(false);
    }
    iw() {
        this.bi.aw();
        this.ix(true);
    }
    c8() {
        return false;
    }
    ix(a) {
        if (this.aq == null || this.aq.c) {
            return;
        }
        let b = this.bi.br;
        let c = this.bi.bs;
        let d = this.dw(b, c, this.bi);
        let e = this.bs != null && this.bs.c1 && this.bh != null && this.dw(this.bh.br, this.bh.bs, this.bh);
        if (d) {
            if (a) {
                this.de = !this.c8();
                this.h1(false);
            }
            else {
                this.jc(false);
                this.de = !this.c8();
            }
        }
        if (e) {
            if (!this.dl) {
                this.ij();
                this.df = true;
            }
        }
    }
    get dn() {
        return this.b7;
    }
    set dn(a) {
        this.b7 = a;
    }
    get dp() {
        if (this.dn == false) {
            return false;
        }
        return this.er() > 0;
    }
    iy(a, b, c, d) {
        switch (b) {
            case "SyncLink":
                if (typeCast(SyncLink.$, c) !== null) {
                    let e = c;
                    e.propertyUpdated = delegateRemove(e.propertyUpdated, this.a4);
                    this.i5(typeCast(IFastItemsSourceProvider_$type, c));
                }
                if (typeCast(SyncLink.$, d) !== null) {
                    let f = d;
                    f.propertyUpdated = delegateCombine(f.propertyUpdated, this.a4);
                    this.i4(typeCast(IFastItemsSourceProvider_$type, d));
                }
                if (this.fh == -1) {
                    this.fh = XamDataChart.od(this);
                }
                break;
            case XamDataChart.$$p[1]:
            case XamDataChart.$$p[11]:
            case XamDataChart.$$p[10]:
            case XamDataChart.$$p[12]:
                this.h2();
                break;
            case "SeriesViewer":
                if (typeCast(SeriesViewer.$, c) !== null) {
                    this.e4 = null;
                    let g = c;
                    g.windowRectChanged = delegateRemove(g.windowRectChanged, this.b0);
                    let h = c.series;
                    h.collectionChanged = delegateRemove(h.collectionChanged, this.d3);
                    let i = c;
                    i.propertyUpdated = delegateRemove(i.propertyUpdated, this.a4);
                    c.al.ac(0, this);
                    this.i7(c);
                    this.bi.ah(c);
                }
                if (typeCast(SeriesViewer.$, d) !== null) {
                    this.e4 = d.bn.i.af;
                    let j = d;
                    j.windowRectChanged = delegateCombine(j.windowRectChanged, this.b0);
                    let k = d.series;
                    k.collectionChanged = delegateCombine(k.collectionChanged, this.d3);
                    let l = d;
                    l.propertyUpdated = delegateCombine(l.propertyUpdated, this.a4);
                    this.aq = d.al.k(0, this, runOn(this, this.h1));
                    this.bi.ad(d);
                    this.jm();
                    this.h3();
                    this.fk = this.bs.e4();
                }
                if (this.bs == null) {
                    this.externalObject._ensureTooltipDestroyed();
                    this.bt.w();
                }
                if (this.fh != -1) {
                    this.jn();
                }
                if (this.fh == -1 || d == null) {
                    this.fh = XamDataChart.od(this);
                }
                this.aw = this.ax();
                this.hq(typeCast(XamDataChart.$, c), typeCast(XamDataChart.$, d));
                break;
            case Series.$$p[23]:
                if (this.bi != null) {
                    this.bi.av();
                }
                break;
            case "HitTestMode":
                this.bc = this.bd();
                break;
            case "ActualHitTestMode":
                if (this.bs != null) {
                    this.bs.js();
                }
                break;
            case "LegendItemBadgeTemplate":
            case "LegendItemTemplate":
                this.bi.bg();
                break;
            case Series.$$p[4]:
            case Series.$$p[14]:
            case Series.$$p[5]:
            case Series.$$p[6]:
                this.h2();
                this.iv();
                break;
            case "Index":
                if (typeGetValue(c) != typeGetValue(d)) {
                    this.h2();
                    this.iv();
                }
                break;
            case "RadiusX":
            case "RadiusY":
            case "RoundedCornersLocation":
                this.iv();
                break;
            case Series.$$p[3]:
                this.jm();
                this.iv();
                break;
            case Series.$$p[21]:
            case Series.$$p[7]:
            case Series.$$p[12]:
                this.iv();
                break;
            case Series.$$p[9]:
                this.ip();
                this.iv();
                break;
            case Series.$$p[31]:
            case Series.$$p[17]:
            case Series.$$p[16]:
            case Series.$$p[18]:
            case Series.$$p[19]:
                this.iv();
                break;
            case Series.$$p[1]:
            case Series.$$p[2]:
            case Series.$$p[22]:
                this.iv();
                this.bi.bg();
                if (this.toolTip != null && this.az != null) {
                    this.a0.a$ah(this, this.toolTip);
                }
                break;
            case "Visibility":
                this.bi.bh();
                break;
            case "ItemsSource":
                if (this.bn != null) {
                    this.i4(this.bn);
                }
                break;
            case Series.$$p[8]:
                if (c != d && d != null) {
                    this.dn = true;
                }
                this.ik();
                if (typeCast(IFastItemsSource_$type, c) != null) {
                    let m = c;
                    m.event = delegateRemove(m.event, this.e0);
                }
                if (typeCast(IFastItemsSource_$type, d) != null) {
                    let n = d;
                    n.event = delegateCombine(n.event, this.e0);
                }
                break;
            case "Legend":
                if (d != null) {
                    if (a == this) {
                        d.seriesOwner = this;
                    }
                    else if (typeCast(XamDataChart.$, a) !== null) {
                        d.chartOwner = a;
                    }
                }
                this.aw = this.ax();
                break;
            case "ActualLegend":
                this.hp(typeCast(IChartLegend_$type, c), typeCast(IChartLegend_$type, d));
                break;
            case "LegendItem":
                this.hr(typeCast(Control.$, c), typeCast(Control.$, d));
                break;
            case Series.$$p[11]:
                this.bi.aq();
                break;
            case Series.$$p[24]:
                if (this.az != null) {
                    this.a0.a$ah(this, this.toolTip);
                }
                break;
            case "CrosshairPoint":
                if (this.bs != null) {
                    if (!this.cd) {
                        this.bs.jk(this, this.fp(this.bs.mi));
                    }
                }
                break;
            case Series.$$p[15]:
                this.jc(false);
                this.ij();
                break;
            case Series.$$p[25]:
            case Series.$$p[26]:
                this.bt.w();
                this.bt.r = this.fi;
                this.bt.b = this.bu;
                this.jc(false);
                break;
            case "DiscreteLegendItemTemplate":
                this.jc(false);
                break;
            case "VisibilityProxy":
                if (c != d) {
                    this.jc(false);
                }
                this.ij();
                this.bi.bh();
                break;
            case Series.$$p[10]:
                this.b9 = this.cg();
                this.jc(false);
                break;
            case Series.$$p[20]:
                this.h3();
                break;
            case "FinalValue":
                this.jp();
                break;
        }
    }
    h3() {
        if (this.bs != null && (this.externalObject.owner)) {
            let sv_ = this.bs;
            this.externalObject.owner._ensureDefaultTooltip(this.externalObject);
            ;
        }
    }
    cg() {
        return this.cu && this.cv;
    }
    get_cv() {
        return false;
    }
    get cv() {
        return this.get_cv();
    }
    h0(a) {
        a.cd = true;
    }
    get bn() {
        return this.bm;
    }
    set bn(a) {
        if (this.bn != a) {
            let b = this.bn;
            this.bm = a;
            this.raisePropertyChanged("SyncLink", b, this.bn);
        }
    }
    get bs() {
        return this.br;
    }
    set bs(a) {
        if (this.bs != a) {
            let b = this.bs;
            this.br = a;
            this.raisePropertyChanged("SeriesViewer", b, this.br);
        }
    }
    get bq() {
        return typeCast(XamDataChart.$, this.bs);
    }
    set bq(a) {
        this.bs = a;
    }
    get itemsSource() {
        return this.c(Series.kc);
    }
    set itemsSource(a) {
        this.h(Series.kc, a);
    }
    hy(a, b, c, d) {
        if (this.bs != null) {
            this.bs.jl();
        }
    }
    get legend() {
        return this.c(Series.kg);
    }
    set legend(a) {
        this.h(Series.kg, a);
    }
    get jv() {
        if (this.ju == null && this.aw != null) {
            this.ju = this.jt();
        }
        return this.ju;
    }
    set jv(a) {
        if (this.jv != a) {
            let b = this.jv;
            this.ju = a;
            this.raisePropertyChanged("LegendItem", b, this.ju);
        }
    }
    fw() {
        return this.jt();
    }
    jt() {
        let a = typeCast(ContentControl.$, this.ju);
        let b = this.legendItemTemplate;
        if (b == null) {
            b = this.bi.bi(this.bl);
        }
        if (b != null) {
            if (a == null) {
                a = new ContentControl();
            }
            a.content = ((() => {
                let $ret = new DataContext();
                $ret.series = this;
                $ret.item = null;
                return $ret;
            })());
            a.ah = b;
        }
        else {
            a = null;
        }
        return a;
    }
    get aw() {
        return this.av;
    }
    set aw(a) {
        if (this.aw != a) {
            let b = this.av;
            this.av = a;
            this.raisePropertyChanged("ActualLegend", b, this.av);
        }
    }
    get legendItemBadgeTemplate() {
        return this.c(Series.kd);
    }
    set legendItemBadgeTemplate(a) {
        this.h(Series.kd, a);
    }
    get legendItemTemplate() {
        return this.c(Series.ke);
    }
    set legendItemTemplate(a) {
        this.h(Series.ke, a);
    }
    get jx() {
        return this.c(Series.j6);
    }
    set jx(a) {
        this.h(Series.j6, a);
    }
    get fh() {
        return typeGetValue(this.c(Series.j9));
    }
    set fh(a) {
        this.h(Series.j9, a);
    }
    jq() {
        this.jn();
    }
    h2() {
        this.jn();
    }
    jn() {
        this.ij();
        if (this.fh < 0) {
            return;
        }
        if (this.k4 != null) {
            this.bi.a4();
            this.bi.ae();
        }
        else {
            this.k2 = this.bs == null ? null : this.bs.l6(this.fh);
        }
        if (this.k7 != null) {
            this.bi.a5();
            this.bi.af();
        }
        else {
            this.k3 = this.bs == null ? null : this.bs.mc(this.fh);
        }
    }
    ca() {
        return this.bt.f();
    }
    jk() {
        this.bt.v();
    }
    get_cq() {
        return true;
    }
    get cq() {
        return this.get_cq();
    }
    jm() {
        let a = (typeCast(XamDataChart.$, this.bs));
        if (a != null) {
            this.d6 = isNaN_(this.d7) ? a.nj.fc : this.d7;
        }
    }
    get co() {
        return this.b5;
    }
    set co(a) {
        this.b5 = a;
    }
    as(a) {
        return ((() => {
            let $ret = new DataContext();
            $ret.series = this;
            $ret.item = a;
            return $ret;
        })());
    }
    bo() {
        return 1;
    }
    ja() {
        this.bi.a0();
    }
    jf() {
        this.dn = true;
        this.jc(true);
    }
    i9() {
        this.ht();
    }
    ht() {
    }
    ia() {
    }
    static *_d1(a, b, c) {
        for (let d = b; d < c; d++) {
            yield a(d);
        }
    }
    static d1(a, b, c) {
        return toEnum(() => Series._d1(a, b, c));
    }
    static d0(a, b) {
        return Series.d1(a, 0, b);
    }
    a8() {
        return this.a7;
    }
    jg(a) {
        this.jo(a);
    }
    eq() {
        return this.fi;
    }
    er() {
        return this.fj;
    }
    get_dq() {
        return this.b8;
    }
    set_dq(a) {
        this.b8 = a;
    }
    get dq() {
        return this.get_dq();
    }
    set dq(a) {
        this.set_dq(a);
    }
    get db() {
        return this.dq;
    }
    at(a, b) {
        return null;
    }
    au(a, b) {
        return null;
    }
    iq(a, b, c) {
        this.a0.a$w(this, a, b, c);
    }
    jj(a) {
        this.a0.a$ag(this, a);
    }
    hq(a, b) {
        if (this.aw != null && this.jv != null) {
            if (b == null && this.aw.containsChild(this.jv)) {
                this.aw.removeChild(this.jv);
            }
            if (b != null && !this.aw.containsChild(this.jv) && this.ly != 1) {
                this.aw.addChildInOrder(this.jv, this);
            }
        }
    }
    hu() {
        if (this.aw == null || this.jv == null) {
            return;
        }
        this.aw.removeChild(this.jv);
    }
    hp(a, b) {
        if (this.jv != null) {
            if (a != null && a.containsChild(this.jv)) {
                a.removeChild(this.jv);
            }
            if (this.bs != null && b != null && !b.containsChild(this.jv) && this.ly != 1) {
                b.addChildInOrder(this.jv, this);
            }
        }
    }
    hr(a, b) {
        if (this.aw != null) {
            if (a != null && this.aw.containsChild(a)) {
                this.aw.removeChild(a);
            }
            if (this.bs != null && b != null && this.ly != 1) {
                this.aw.addChildInOrder(b, this);
            }
        }
    }
    i5(a) {
        this.bz = a.releaseFastItemsSource(this.itemsSource);
    }
    i4(a) {
        this.bz = a.getFastItemsSource(this.itemsSource);
    }
    ax() {
        if (this.legend != null) {
            return this.legend;
        }
        if (this.bs != null && this.bs.legend != null) {
            return this.bs.legend;
        }
        return null;
    }
    dc() {
        return false;
    }
    da(a) {
        return (a && this.eq() > 0) || this.ca() || (this.dp && this.dc() && this.er() > 0);
    }
    hz(a) {
        if (a != null) {
            a.bv(this);
        }
    }
    i3(a) {
        if (a != null) {
            a.ch(this);
        }
    }
    a9() {
        return this.bi.g();
    }
    jo(a) {
        this.bi.a6(a);
    }
    ji(a, b) {
        this.a0.a$af(this, a, b);
    }
    get_ds() {
        return false;
    }
    get ds() {
        return this.get_ds();
    }
    iz(a, b) {
        this.bi.ao(a, b);
    }
    i1(a) {
        this.iu(this.lx, a);
    }
    h9(a) {
        if (this.bz != null) {
            this.bz.handleCollectionChanged(a);
        }
    }
    ih(a, b, c) {
        this.h9(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
    }
    id() {
        this.h9(new NotifyCollectionChangedEventArgs(0, 4));
    }
    ie(a, b) {
        this.h9(new NotifyCollectionChangedEventArgs(1, 0, b, a));
    }
    ig(a, b) {
        this.h9(new NotifyCollectionChangedEventArgs(1, 1, b, a));
    }
    jl() {
        this.jc(false);
    }
    dh(a, b) {
        return false;
    }
    get_coercionMethods() {
        return this._coercionMethods;
    }
    set_coercionMethods(a) {
        this._coercionMethods = a;
    }
    get coercionMethods() {
        return this.get_coercionMethods();
    }
    set coercionMethods(a) {
        this.set_coercionMethods(a);
    }
    get_expectFunctions() {
        return this.b4;
    }
    set_expectFunctions(a) {
        this.b4 = a;
    }
    get expectFunctions() {
        return this.get_expectFunctions();
    }
    set expectFunctions(a) {
        this.set_expectFunctions(a);
    }
    ar(a, b) {
        return null;
    }
    get be() {
        return this.bb;
    }
    set be(a) {
        let b = this.bb;
        this.bb = a;
        if (b != this.bb) {
            this.raisePropertyChanged("HitTestMode", enumGetBox(SeriesHitTestMode_$type, b), enumGetBox(SeriesHitTestMode_$type, this.bb));
        }
    }
    bd() {
        return this.be == 0 ? 2 : this.be;
    }
    get bc() {
        return this.ba;
    }
    set bc(a) {
        let b = this.ba;
        this.ba = a;
        if (b != this.ba) {
            this.raisePropertyChanged("ActualHitTestMode", enumGetBox(SeriesHitTestMode_$type, b), enumGetBox(SeriesHitTestMode_$type, this.ba));
        }
    }
    bw(a) {
        if (a == null) {
            return this.bz.registerColumn(null, null, false);
        }
        let b = null;
        let c = SeriesViewer.bb(a, this.coercionMethods);
        b = c.a;
        return this.bz.registerColumn(a, b, this.expectFunctions);
    }
    bx(a) {
        if (a == null) {
            return this.bz.registerColumnInt(null, null, false);
        }
        let b = null;
        let c = SeriesViewer.bb(a, this.coercionMethods);
        b = c.a;
        return this.bz.registerColumnInt(a, b, this.expectFunctions);
    }
    by(a) {
        if (a == null) {
            return this.bz.registerColumnObject(null, null, false);
        }
        let b = null;
        let c = SeriesViewer.bb(a, this.coercionMethods);
        b = c.a;
        return this.bz.registerColumnObject(a, b, this.expectFunctions);
    }
    get lx() {
        return this.bi != null ? this.bi.br : Rect.empty;
    }
    get_cz() {
        return false;
    }
    get cz() {
        return this.get_cz();
    }
    get_cy() {
        return true;
    }
    get cy() {
        return this.get_cy();
    }
    jh(a, b) {
    }
    hx(a, b) {
        this.a2.copyVisualData(a, b);
    }
    fo() {
        let a = this.a2.exportVisualData(this, this.lx);
        this.h4(a);
        this.bi.ai(a);
        return a;
    }
    h4(a) {
    }
    ib(a) {
        if (this.le.x != a.x || this.le.y != a.y) {
            this.le = a;
            this.io(a);
        }
    }
    io(a) {
    }
    ic() {
    }
    ii() {
    }
    am(a) {
        return null;
    }
    ag() {
        return null;
    }
    eh() {
        return NaN;
    }
    static ei(a, b) {
        if (a == null || a.count == 0) {
            return NaN;
        }
        if (b != null && b.i$b != null) {
            if (b.i$b.count != a.count) {
                return NaN;
            }
            for (let c = 0; c < a.count; c++) {
                if (!isNaN_(a.item(b.i$b._inner[c])) && a.item(b.i$b._inner[c]) != 0) {
                    return a.item(b.i$b._inner[c]);
                }
            }
        }
        for (let d = 0; d < a.count; d++) {
            if (!isNaN_(a.item(d)) && a.item(d) != 0) {
                return a.item(d);
            }
        }
        return NaN;
    }
    im() {
    }
    get d8() {
        return this.d4;
    }
    set d8(a) {
        let b = this.d8;
        if (a != b) {
            this.d4 = a;
            this.raisePropertyChanged("FinalValue", b, this.d8);
        }
    }
    get et() {
        return this.d5;
    }
    set et(a) {
        let b = this.et;
        if (a != b) {
            this.d5 = a;
            this.raisePropertyChanged("PercentChange", b, this.et);
        }
    }
    jp() {
        let a = this.eh();
        this.et = (this.d8 - a) / a * 100;
    }
    fr(a) {
        return null;
    }
}
Series.$t = markType(Series, 'Series', Control.$, [INotifyPropertyChanged_$type, IProvidesViewport_$type, ILegendSeries_$type, ILegendOwner_$type, ILegendTemplateProvider_$type]);
Series.e5 = 0;
Series.k1 = DependencyProperty.i("VisibilityProxy", Visibility_$type, Series.$, new PropertyMetadata(2, enumGetBox(Visibility_$type, 0), (a, b) => a.raisePropertyChanged("VisibilityProxy", b.oldValue, b.newValue)));
Series.kc = DependencyProperty.i("ItemsSource", IEnumerable_$type, Series.$, new PropertyMetadata(2, null, (a, b) => {
    let c = typeCast(Series.$, a);
    if (c.bn != null) {
        c.bn.releaseFastItemsSource(b.oldValue);
    }
    a.raisePropertyChanged("ItemsSource", b.oldValue, b.newValue);
}));
Series.kg = DependencyProperty.i("Legend", IChartLegend_$type, Series.$, new PropertyMetadata(2, null, (a, b) => {
    let c = typeCast(Series.$, a);
    c.raisePropertyChanged("Legend", b.oldValue, b.newValue);
}));
Series.kd = DependencyProperty.i("LegendItemBadgeTemplate", DataTemplate.$, Series.$, new PropertyMetadata(2, null, (a, b) => {
    let c = typeCast(Series.$, a);
    c.raisePropertyChanged("LegendItemBadgeTemplate", b.oldValue, b.newValue);
    if (c.jv != null) {
        c.jv = c.jt();
    }
}));
Series.ke = DependencyProperty.i("LegendItemTemplate", DataTemplate.$, Series.$, new PropertyMetadata(2, null, (a, b) => {
    let c = typeCast(Series.$, a);
    c.raisePropertyChanged("LegendItemTemplate", b.oldValue, b.newValue);
    if (c.jv != null) {
        c.jv = c.jt();
    }
}));
Series.j6 = DependencyProperty.i("DiscreteLegendItemTemplate", DataTemplate.$, Series.$, new PropertyMetadata(2, null, (a, b) => {
    let c = typeCast(Series.$, a);
    c.raisePropertyChanged("DiscreteLegendItemTemplate", b.oldValue, b.newValue);
}));
Series.j9 = DependencyProperty.i("Index", Number_$type, Series.$, new PropertyMetadata(2, -1, (a, b) => {
    let c = typeCast(Series.$, a);
    c.raisePropertyChanged("Index", b.oldValue, b.newValue);
    if (c.jv != null) {
        c.jv = c.jt();
    }
}));
Type.dep(DependencyProperty, PropertyMetadata, Series, 'raisePropertyChanged', ['ActualAreaFillOpacity:d6:jz', [1, 1], 'ActualBrush:k2:j0', [Brush.$], 'ActualOutline:k3:j1', [Brush.$], 'AreaFillOpacity:d7:j2', [1, NaN], 'Brush:k4:j3', [Brush.$, null], 'DashArray:la:j4', [DoubleCollection.$], 'DashCap:lb:j5', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)], 'EndCap:lc:j7', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 2)], 'FastItemsSource:bz:j8', [IFastItemsSource_$type], 'IsDropShadowEnabled:cp:ka', [0, false], 'IsHighlightingEnabled:cu:kb', [0, false], 'LegendItemVisibility:ly:kf', [Visibility_$type, enumGetBox(Visibility_$type, 0)], 'MiterLimit:es:kh', [1, 0], 'MouseOverEnabled:c7:ki', [0, true], 'Outline:k7:kj', [Brush.$, null], 'Resolution:eu:kk', [1, 1], 'ShadowBlur:ev:kl', [1, NaN], 'ShadowColor:k9:km', [Color.$], 'ShadowOffsetX:ew:kn', [1, NaN], 'ShadowOffsetY:ex:ko', [1, NaN], 'ShowDefaultTooltip:dd:kp', [0, false], 'StartCap:ld:kq', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 2)], 'Thickness:ey:kr', [1, DeviceUtils.g(2)], 'Title:fx:ks', [4, "Series Title"], 'ToolTip::kt', [4, null], 'TransitionDuration:fi:ku', [1, 0], 'TransitionEasingFunction:bu:kv', [Delegate_$type, null], 'TransitionInDuration:fj:kw', [1, 1000], 'TransitionInEasingFunction:bv:kx', [Delegate_$type, null], 'TransitionInSpeedType:bp:ky', [TransitionInSpeedType_$type, enumGetBox(TransitionInSpeedType_$type, 0)], 'TransitionProgress:ez:kz', [1, 0], 'UseSingleShadow:du:k0', [0, true]]);
/**
 * @hidden
 */
export class MarkerSeries extends Series {
    constructor() {
        super();
        this.mi = null;
    }
    it(a) {
        super.it(a);
        this.lz = a;
    }
    get_hasMarkers() {
        return true;
    }
    k5() {
        return this.mu;
    }
    k6() {
        return this.mv;
    }
    jy() {
        return this.mi;
    }
    static get mk() {
        if (MarkerSeries.mg == null) {
            MarkerSeries.mg = new DataTemplate();
        }
        return MarkerSeries.mg;
    }
    get mw() {
        return this.c(MarkerSeries.mo);
    }
    set mw(a) {
        this.h(MarkerSeries.mo, a);
    }
    l2() {
        return this.mi != null && ((this.l0 != 1 && this.l0 != 0) || this.mj != null);
    }
    iy(a, b, c, d) {
        super.iy(a, b, c, d);
        switch (b) {
            case "MarkerBrush":
            case MarkerSeries.$$p[6]:
            case MarkerSeries.$$p[3]:
            case MarkerSeries.$$p[5]:
                this.jn();
                this.iv();
                break;
            case MarkerSeries.$$p[2]:
                this.mi = d;
                if (c == MarkerSeries.mk || d == MarkerSeries.mk || (c == null || d != null)) {
                    this.lz.cd();
                    let e = typeCast(MarkerSeriesView.$, this.bh);
                    if (e != null) {
                        e.cd();
                    }
                    this.jc(false);
                }
                this.bi.bg();
                if (this.toolTip != null && this.cx) {
                    this.a0.a$ah(this, this.toolTip);
                }
                this.ij();
                break;
            case MarkerSeries.$$p[7]:
                this.lz.ck(this.l4);
                this.jc(false);
                break;
            case MarkerSeries.$$p[0]:
            case MarkerSeries.$$p[1]:
                if (this.l2()) {
                    this.jc(false);
                }
                break;
        }
    }
    static l9(a) {
        switch (a) {
            case 3:
            case 13: return SeriesViewer.$$p[1];
            case 4: return SeriesViewer.$$p[26];
            case 5: return SeriesViewer.$$p[18];
            case 6: return SeriesViewer.$$p[20];
            case 7: return SeriesViewer.$$p[4];
            case 8: return SeriesViewer.$$p[13];
            case 9: return SeriesViewer.$$p[6];
            case 10: return SeriesViewer.$$p[23];
            case 11: return SeriesViewer.$$p[14];
            case 12: return SeriesViewer.$$p[7];
            default:
            case 0:
            case 1: return null;
        }
    }
    static l1(a, b) {
        let c = a.bs != null ? b : 1;
        if (c == 2) {
            let d = [3, 4, 8, 10, 7, 6, 9, 11, 5, 12];
            c = a.fh >= 0 ? d[a.fh % d.length] : 1;
        }
        return c;
    }
    jn() {
        super.jn();
        if (this.fh < 0) {
            return;
        }
        if (this.lz.bz()) {
            this.lz.cb();
            this.lz.b5();
        }
        else {
            let a = MarkerSeries.l1(this, this.l0);
            let b = MarkerSeries.l9(a);
            if (b == null) {
                this.mh = MarkerSeries.mk;
            }
            else {
                this.lz.b8(b);
            }
        }
        if (this.mw != null && this.l0 != 13) {
            this.lz.b9();
            this.lz.b6();
        }
        else {
            if (this.l0 == 13) {
                this.mu = this.bi.bn();
            }
            else {
                this.mu = this.bs == null ? null : this.bs.ma(this.fh);
            }
        }
        if (this.mx != null) {
            this.lz.ca();
            this.lz.b7();
        }
        else {
            if (this.l0 == 13) {
                this.mv = this.bi.bn();
            }
            else {
                this.mv = this.bs == null ? null : this.bs.mb(this.fh);
            }
        }
    }
    h4(a) {
        super.h4(a);
        this.a2.exportMarkerVisualData(this, a);
    }
    l3(a, b) {
        if (this.hasMarkers && this.l2()) {
            let c = this.lw(a);
            if (c.isEmpty) {
                return false;
            }
            let d = RectUtil.r(c, this.ee(b));
            if (d.containsPoint(a)) {
                return true;
            }
        }
        return false;
    }
    ar(a, b) {
        let c = this.lz.bv(a);
        let d = null;
        if (c != null) {
            d = c.content;
        }
        return d;
    }
}
MarkerSeries.$t = markType(MarkerSeries, 'MarkerSeries', Series.$);
MarkerSeries.mg = null;
MarkerSeries.mo = DependencyProperty.i("MarkerBrush", Brush.$, MarkerSeries.$, new PropertyMetadata(1, (a, b) => {
    let c = (typeCast(MarkerSeries.$, a));
    c.raisePropertyChanged("MarkerBrush", b.oldValue, b.newValue);
}));
Type.dep(DependencyProperty, PropertyMetadata, MarkerSeries, 'raisePropertyChanged', ['ActualMarkerBrush:mu:ml', [Brush.$], 'ActualMarkerOutline:mv:mm', [Brush.$], 'ActualMarkerTemplate:mh:mn', [DataTemplate.$, null], 'MarkerOutline:mx:mp', [Brush.$], 'MarkerStyle:my:mq', [Style.$], 'MarkerTemplate:mj:mr', [DataTemplate.$, null], 'MarkerType:l0:ms', [MarkerType_$type, enumGetBox(MarkerType_$type, 1)], 'UseLightweightMarkers:l4:mt', [0, false]]);
/**
 * @hidden
 */
export class SyncLink extends FrameworkElement {
    constructor() {
        super();
        this.ai = null;
        this.af = new Dictionary$2(IEnumerable_$type, FastItemsSourceReference.$, 0);
        this.aq = null;
        this.ab = null;
        this.propertyChanged = null;
        this.propertyUpdated = null;
        this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.am(a, b.propertyName, b.oldValue, b.newValue));
        this.ab = new ChartCollection();
        let a = this.ab;
        a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.aj));
        this.aq = new Rect(0, 0, 0, 1, 1);
    }
    am(a, b, c, d) {
    }
    releaseFastItemsSource(a) {
        if (a != null) {
            let b = null;
            if (((() => { let c = this.af.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
                --b.b;
                if (b.b == 0) {
                    this.af.removeItem(a);
                }
            }
        }
        return null;
    }
    static ad(a) {
        return ((() => {
            let $ret = new FastItemsSource();
            $ret.e = a;
            return $ret;
        })());
    }
    getFastItemsSource(a) {
        if (SyncLink.ah == null) {
            SyncLink.ah = SyncLink.ad;
        }
        let b = null;
        if (a != null) {
            let c = null;
            if (!((() => { let d = this.af.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                b = SyncLink.ah(a);
                c = new FastItemsSourceReference(b);
                this.af.addItem(a, c);
            }
            c.b++;
            b = c.a;
        }
        return b;
    }
    ae(a) {
        let b = null;
        if (a != null) {
            let c = null;
            if (!((() => { let d = this.af.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                return null;
            }
            b = c.a;
        }
        return b;
    }
    ar(a, b, c) {
        return this.as(a, b, c, false);
    }
    as(a, b, c, d) {
        if (!c.isEmpty) {
            c = new Rect(0, c.left, c.top, c.width, c.height);
            let e = a.ex;
            if (b == a) {
                if (!d) {
                    if (!b.c3()) {
                        c.x = b.m4.x;
                        c.width = b.m4.width;
                    }
                    if (!b.c4()) {
                        c.y = b.m4.y;
                        c.height = b.m4.height;
                    }
                }
            }
            else {
                let f = SyncManager.a(b);
                if (f == null || !f.synchronizeHorizontally) {
                    c.x = b.m4.x;
                    c.width = b.m4.width;
                }
                if (f == null || !f.synchronizeVertically) {
                    c.y = b.m4.y;
                    c.height = b.m4.height;
                }
            }
            let g = 0.5 * (c.left + c.right);
            let h = 0.5 * (c.top + c.bottom);
            let i = c.width;
            let j = c.height;
            let k = MathUtil.b(c.width, e, 1);
            let l = MathUtil.b(c.height, e, 1);
            if (a.dh() && !a.m3.isEmpty) {
                let m = a.m3;
                let n = m.width / m.height;
                let o = k * m.width;
                let p = l * m.height;
                let q = o / p;
                if (q != n) {
                    if (p * n > o) {
                        o = p * n;
                        k = o / m.width;
                    }
                    else {
                        p = o / n;
                        l = p / m.height;
                    }
                }
            }
            else if (a.cl()) {
                let r = false;
                let s = false;
                if (Math.abs(k - a.mq.width) > e) {
                    r = true;
                }
                if (Math.abs(l - a.mq.height) > e) {
                    s = true;
                }
                let t = a.hu(k, l, r, s);
                k = t.p0;
                l = t.p1;
                k = MathUtil.b(k, e, 1);
                l = MathUtil.b(l, e, 1);
            }
            let u = k != i;
            let v = l != j;
            let w = u ? g - 0.5 * k : c.left;
            let x = v ? h - 0.5 * l : c.top;
            let y = u ? g + 0.5 * k : c.right;
            let z = v ? h + 0.5 * l : c.bottom;
            if (w < 0) {
                w = 0;
                y = w + k;
            }
            if (y > 1) {
                y = 1;
                w = y - k;
            }
            if (x < 0) {
                x = 0;
                z = x + l;
            }
            if (z > 1) {
                z = 1;
                x = z - l;
            }
            c = new Rect(0, w, x, y - w, z - x);
        }
        return c;
    }
    get ag() {
        return this.ab;
    }
    aj(a, b) {
        if (b.newItems != null) {
            for (let c of fromEn(b.newItems)) {
                if (c.m4.isEmpty) {
                    c.m4 = this.ar(null, c, this.aq);
                }
            }
        }
    }
    ak(a, b) {
        for (let c of fromEnum(this.ag)) {
            if (c == a) {
                c.mi = { $type: Point_$type, x: b.x, y: b.y };
            }
            else {
                let d = { $type: Point_$type, x: b.x, y: b.y };
                let e = SyncManager.a(c);
                if (e == null || !e.synchronizeHorizontally) {
                    d.x = NaN;
                }
                if (e == null || !e.synchronizeVertically) {
                    d.y = NaN;
                }
                c.mi = d;
            }
        }
    }
    al(a, b) {
        for (let c of fromEnum(this.ag)) {
            c.mz = this.ar(a, c, b);
        }
    }
    ao(a, b) {
        this.ap(a, b, false);
    }
    ap(a, b, c) {
        let d = b.isEmpty || isNaN_(b.x) || isNaN_(b.y) || isNaN_(b.width) || isNaN_(b.height);
        if (!d && !a.cj) {
            for (let e of fromEnum(this.ag)) {
                e.cj = true;
                e.m4 = this.as(a, e, b, c);
                e.cj = false;
            }
        }
    }
    an(a, b, c) {
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
        if (this.propertyUpdated != null) {
            this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
        }
    }
}
SyncLink.$t = markType(SyncLink, 'SyncLink', FrameworkElement.$, [INotifyPropertyChanged_$type, IFastItemsSourceProvider_$type]);
SyncLink.ah = null;
/**
 * @hidden
 */
export class SyncLinkManager extends Base {
    constructor() {
        super();
        this.d = null;
        this.d = new Dictionary$2(String_$type, SyncLink.$, 0);
    }
    static instance() {
        if (SyncLinkManager.b == null) {
            SyncLinkManager.b = new SyncLinkManager();
        }
        return SyncLinkManager.b;
    }
    get e() {
        return this.d.count;
    }
    getLink(a) {
        let b;
        if (((() => { let c = this.d.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
            return b;
        }
        b = new SyncLink();
        b.ai = a;
        this.d.addItem(a, b);
        return b;
    }
    releaseLink(a) {
        if (a.ag.count == 0 && a.ai != null && this.d.containsKey(a.ai)) {
            this.d.removeItem(a.ai);
        }
    }
}
SyncLinkManager.$t = markType(SyncLinkManager, 'SyncLinkManager');
SyncLinkManager.b = null;
/**
 * @hidden
 */
export class SyncManager extends Base {
    static e(a) {
        let b = SyncManager.a(a);
        if (b == null) {
            return;
        }
        if (!a.c0) {
            return;
        }
        if (a.syncChannel != b.syncChannel) {
            return;
        }
        SyncManager.b(a, a.syncChannel, null);
    }
    static c(a) {
        let b = SyncManager.a(a);
        if (b == null) {
            return;
        }
        if (a.c0 && a.syncChannel == b.syncChannel) {
            return;
        }
        let c = null;
        if (a.c0) {
            c = a.syncChannel;
        }
        SyncManager.b(a, c, b.syncChannel);
    }
    static b(a, b, c) {
        if (a != null) {
            if (stringIsNullOrEmpty(c)) {
                let d = a.actualSyncLink;
                a.actualSyncLink = null;
                a.actualSyncLink = new SyncLink();
                if (d != null) {
                    SyncLinkManager.instance().releaseLink(d);
                }
                a.syncChannel = null;
            }
            else {
                if (!stringIsNullOrEmpty(b)) {
                    let e = a.actualSyncLink;
                    a.actualSyncLink = null;
                    if (e != null) {
                        SyncLinkManager.instance().releaseLink(e);
                    }
                }
                a.actualSyncLink = SyncLinkManager.instance().getLink(c);
                a.syncChannel = c;
            }
        }
    }
    static d(a, b) {
        a.syncSettings = b;
    }
    static a(a) {
        return a.syncSettings;
    }
}
SyncManager.$t = markType(SyncManager, 'SyncManager');
/**
 * @hidden
 */
export class ChartCollection extends ObservableCollection$1 {
    constructor() {
        super(SeriesViewer.$, 0);
        this.collectionResetting = null;
    }
    p() {
        if (this.collectionResetting != null) {
            this.collectionResetting(this, null);
        }
        super.p();
    }
}
ChartCollection.$t = markType(ChartCollection, 'ChartCollection', ObservableCollection$1.$.specialize(SeriesViewer.$));
/**
 * @hidden
 */
export class SeriesCollection extends ObservableCollection$1 {
    constructor() {
        super(Series.$, 0);
        this.collectionResetting = null;
    }
    p() {
        if (this.collectionResetting != null) {
            this.collectionResetting(this, null);
        }
        super.p();
    }
}
SeriesCollection.$t = markType(SeriesCollection, 'SeriesCollection', ObservableCollection$1.$.specialize(Series.$));
/**
 * @hidden
 */
export class ChartCursorEventArgs extends EventArgs {
    constructor(a, b, c) {
        super();
        this._item = null;
        this._series = null;
        this._seriesViewer = null;
        this.seriesViewer = a;
        this.series = b;
        this.item = c;
    }
    toString() {
        return this.seriesViewer.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "");
    }
    get item() {
        return this._item;
    }
    set item(a) {
        this._item = a;
    }
    get series() {
        return this._series;
    }
    set series(a) {
        this._series = a;
    }
    get seriesViewer() {
        return this._seriesViewer;
    }
    set seriesViewer(a) {
        this._seriesViewer = a;
    }
    get chart() {
        return typeCast(XamDataChart.$, this.seriesViewer);
    }
}
ChartCursorEventArgs.$t = markType(ChartCursorEventArgs, 'ChartCursorEventArgs', EventArgs.$);
/**
 * @hidden
 */
export class DataChartMouseButtonEventArgs extends EventArgs {
    constructor(a, b, c, d) {
        super();
        this.g = null;
        this._item = null;
        this._series = null;
        this._chart = null;
        this.chart = a;
        this.series = b;
        this.item = c;
        this.g = d;
    }
    toString() {
        return this.chart.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "") + ", " + this.getPosition(null).toString();
    }
    get handled() {
        return this.g.handled;
    }
    set handled(a) {
        this.g.handled = a;
    }
    getPosition(a) {
        return this.g.getPosition(a);
    }
    get originalSource() {
        return this.g.originalSource;
    }
    get item() {
        return this._item;
    }
    set item(a) {
        this._item = a;
    }
    get series() {
        return this._series;
    }
    set series(a) {
        this._series = a;
    }
    get chart() {
        return this._chart;
    }
    set chart(a) {
        this._chart = a;
    }
}
DataChartMouseButtonEventArgs.$t = markType(DataChartMouseButtonEventArgs, 'DataChartMouseButtonEventArgs', EventArgs.$);
/**
 * @hidden
 */
export class ChartMouseEventArgs extends EventArgs {
    constructor(a, b, c, d) {
        super();
        this.f = null;
        this._item = null;
        this._series = null;
        this._chart = null;
        this.chart = a;
        this.series = b;
        this.item = c;
        this.f = d;
    }
    toString() {
        return this.chart.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "") + ", " + this.getPosition(null).toString();
    }
    getPosition(a) {
        return this.f.getPosition(a);
    }
    get originalSource() {
        return this.f.originalSource;
    }
    get item() {
        return this._item;
    }
    set item(a) {
        this._item = a;
    }
    get series() {
        return this._series;
    }
    set series(a) {
        this._series = a;
    }
    get chart() {
        return this._chart;
    }
    set chart(a) {
        this._chart = a;
    }
}
ChartMouseEventArgs.$t = markType(ChartMouseEventArgs, 'ChartMouseEventArgs', EventArgs.$);
/**
 * @hidden
 */
export class AxisComponentsForView extends Base {
    constructor() {
        super(...arguments);
        this.a = null;
    }
}
AxisComponentsForView.$t = markType(AxisComponentsForView, 'AxisComponentsForView');
/**
 * @hidden
 */
export class AxisLabelPanelBaseView extends Base {
    constructor(a) {
        super();
        this.a = null;
        this.av = null;
        this.e = null;
        this.au = Rect.empty;
        this.c = null;
        this.h = 0;
        this.i = NaN;
        this.a = a;
    }
    aa(a, b, c, d, e, f) {
        let g = typeCast(FrameworkElement.$, a);
        if (g != null) {
            g._visibility = 0;
            if (b.width == 0 && b.height == 0) {
                g._visibility = 1;
            }
            let h = b.height - (d + f);
            let i = b.width - (c + e);
            g.n = b.left + c;
            g.o = b.top + d;
            if (i < 0) {
                i = 0;
            }
            if (h < 0) {
                h = 0;
            }
            g.l = h;
            g.m = i;
            if (g.j != null) {
                let j = g.j;
                let k = j.j._inner[0];
                k.k = k.k + g.n;
                k.l = k.l + g.o;
            }
        }
    }
    z(a, b, c, d, e, f, g, h) {
        let i = Math.max(e, Math.max(f, Math.max(g, h)));
        let j = new Thickness(0, i);
        if (this.a.ap) {
            j = new Thickness(0, Math.sqrt((i * i) / 2));
        }
        let k = c.d;
        if (isNaN_(k.c) || isNaN_(k.e) || isNaN_(k.d) || isNaN_(k.b)) {
            k = j;
        }
        if (k.c > j.c || k.e > j.e || k.d > j.d || k.b > j.b) {
            k = j;
        }
        let l = new Rect(0, d.left - k.c, d.top - k.e, d.width + k.c + k.d, d.height + k.e + k.b);
        let m = a.j;
        a.j = null;
        this.aa(a, l, e, f, g, h);
        a.j = m;
        a.width = a.m;
        a.height = a.l;
    }
    ad(a) {
        let b = a;
        b.j = null;
    }
    ag(a) {
    }
    ah(a, b) {
    }
    ai(a, b) {
        let c = typeCast(FrameworkElement.$, a);
        let d = 0;
        let e = 0;
        let f = new TransformGroup();
        let g = ((() => {
            let $ret = new RotateTransform();
            $ret.j = b;
            $ret.k = d;
            $ret.l = e;
            return $ret;
        })());
        f.j.add(g);
        c.j = f;
    }
    aq(a, b, c, d, e, f, g, h, i) {
        let j = Math.max(e, Math.max(f, Math.max(g, h)));
        let k = new Thickness(0, j);
        if (this.a.ap) {
            k = new Thickness(0, Math.sqrt((j * j) / 2));
        }
        let l = c.d;
        if (isNaN_(l.c) || isNaN_(l.e) || isNaN_(l.d) || isNaN_(l.b)) {
            l = k;
        }
        if (l.c > k.c || l.e > k.e || l.d > k.d || l.b > k.b) {
            l = k;
        }
        let m = b.j;
        let n = new TransformGroup();
        let o = a.n + l.c;
        let p = a.o + l.e;
        n.j.add(m);
        a.j = n;
    }
    x(a, b, c, d) {
        let e = a.ak.length;
        let f = a.ak;
        let g = a.ak;
        while ((this.m(a) + c + d) > b && e > 0) {
            e--;
            f = f.substr(0, e) + "\u2026";
            a.ak = f;
        }
        a.ak = g;
        return f;
    }
    ae() {
        if (this.e == null) {
            return;
        }
        let a = this.g();
        for (let b of fromEnum(a)) {
            let c = typeCast(FrameworkElement.$, b);
            if (c != null) {
                this.a.b7(c);
            }
            this.a.by(b);
        }
    }
    g() {
        let a = this.a.av();
        let b = this.a.au();
        if (!this.a.ac.cp) {
            return a;
        }
        else {
            return b;
        }
    }
    l(a) {
        return this.h;
    }
    n(a) {
        return this.l(a) + this.r() + this.o();
    }
    am() {
        this.av = ((() => {
            let $ret = new Path();
            $ret.aj = new GeometryGroup();
            $ret.ab = false;
            return $ret;
        })());
    }
    m(a) {
        let b = a;
        if (b != null && b.ak != null) {
            return this.e.e(b);
        }
        return 0;
    }
    w(a) {
        let b = a;
        if (b != null && b.ak != null) {
            return this.m(a) + this.p() + this.q();
        }
        return 0;
    }
    ac() {
        this.a.a9 = this.a.ac.d1();
    }
    aj() {
        this.af();
        this.a.cr(new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
    }
    f() {
        return this.e;
    }
    ak(a) {
        this.e = a;
    }
    y() {
        if (this.a.cn.isEmpty) {
            return;
        }
        let a = this.a.a5;
        this.a.cq(new Size(1, this.a.cn.width, this.a.cn.height));
        if (this.a.a5 != a) {
            this.a.ac.bd.ht();
            this.al();
        }
    }
    al() {
    }
    ao(a) {
        this.e.w(a);
    }
    an() {
        if (this.e == null) {
            return;
        }
        if (this.e.d) {
            if (this.a.ac.bf != null && this.a.ac.bf.ea != 1) {
                this.e.z();
                this.e.aa(this.a.ac.bf.ea, this.a.ac.bf.ea);
            }
            this.af();
            this.au = this.a.cn;
            let a = this.a.ac.bd.getFontBrush();
            if (this.a.af != null && this.a.af.textColor != null) {
                a = this.a.af.textColor;
            }
            if (this.a.j != null) {
                this.e.z();
                this.e.j(this.a.j);
            }
            let b = false;
            for (let c of fromEnum(this.g())) {
                let d = typeCast(TextBlock.$, c);
                if (d != null) {
                    if (d.s != 0) {
                        b = true;
                        continue;
                    }
                    d.am = a;
                    if (d.j != null) {
                        this.e.z();
                        this.e.j(d.j);
                    }
                    this.ao(d);
                    if (d.j != null) {
                        this.e.y();
                    }
                }
            }
            if (b) {
                for (let e of fromEnum(this.a.ab)) {
                    let f = typeCast(Rectangle.$, e);
                    if (f != null) {
                        if (f.s == 0) {
                            continue;
                        }
                        if (f.j != null) {
                            this.e.z();
                            this.e.j(f.j);
                        }
                        this.e.v(f);
                        if (f.j != null) {
                            this.e.y();
                        }
                    }
                    let g = typeCast(TextBlock.$, e);
                    if (g != null) {
                        if (g.s == 0) {
                            continue;
                        }
                        if (g.j != null) {
                            this.e.z();
                            this.e.j(g.j);
                        }
                        if (g.am == null) {
                            g.am = a;
                        }
                        this.e.w(g);
                        if (g.j != null) {
                            this.e.y();
                        }
                    }
                }
            }
            if (this.a.j != null) {
                this.e.y();
            }
            this.ap();
            a = this.as();
            this.e.ac(this.d());
            let h = this.a.ac.hj;
            if (h != null) {
                h.am = a;
                if (h.j != null) {
                    this.e.z();
                    this.e.j(h.j);
                }
                this.e.w(h);
                if (h.j != null) {
                    this.e.y();
                }
            }
            if (this.a.ac.bf != null && this.a.ac.bf.ea != 1) {
                this.e.y();
            }
        }
    }
    d() {
        let a = this.a.ac.bf.getFontInfo();
        if (this.a.ac.bc != null && this.a.ac.bc.textStyle != null) {
            a = this.a.ac.bc.g(this.a.ac.bf.bn.i.af);
        }
        else {
            let b = this.a.ac.bf.bp();
            if (b != null) {
                a = b;
            }
        }
        return a;
    }
    as() {
        let a = this.a.ac.bd.getFontBrush();
        if (this.a.ac.bc != null && this.a.ac.bc.textColor != null) {
            a = this.a.ac.bc.textColor;
        }
        else {
            let b = this.a.ac.bf.l7();
            if (b != null) {
                a = b;
            }
        }
        return a;
    }
    af() {
        if (this.e == null) {
            return;
        }
        let a = this.a.ac.bf.getFontInfo();
        if (this.a.af != null && this.a.af.textStyle != null) {
            a = this.a.af.g(this.a.ac.bf.bn.i.af);
        }
        if (this.c != a) {
            this.c = a;
            this.ar();
        }
        this.e.ac(a);
    }
    ar() {
        if (this.a.ac != null && this.a.ac.bf != null) {
            if (this.a.af == null || this.a.af.textStyle == null) {
                this.h = this.a.ac.bf.bn.a7;
                return;
            }
            if (this.h == 0) {
                this.h = this.a.ac.bf.bn.a7;
            }
            let a = this.h;
            let b = this.a.ac.bf.getFontInfo();
            if (this.a.af != null && this.a.af.textStyle != null) {
                b = this.a.af.g(this.a.ac.bf.bn.i.af);
            }
            let c = FontUtil.getCurrentFontHeight(this.a.ac.bf.bn.i.af, b);
            this.h = c;
            if (a != this.h) {
                this.a.ac.bf.ht();
            }
        }
    }
    j() {
        if (this.a.ac.f6 == null) {
            return 0;
        }
        if (this.a.ac.bc != null && this.a.ac.bc.visibility == 1) {
            return 0;
        }
        if (!isNaN_(this.i)) {
            return this.i;
        }
        let a = this.d();
        if (this.a.ac.bf == null) {
            return this.h;
        }
        this.i = FontUtil.getCurrentFontHeight(this.a.ac.bf.bn.i.af, a);
        return this.i;
    }
    k() {
        if (this.a.ac.bc != null && this.a.ac.bc.visibility == 1) {
            return 0;
        }
        if (this.e == null) {
            return 0;
        }
        let a = this.a.ac.hj;
        if (a != null && a.ak != null) {
            this.e.ac(this.d());
            let b = this.e.e(a);
            this.af();
            return b;
        }
        return 0;
    }
    ap() {
        if (this.a.ab.count == 0) {
            return;
        }
        if (this.a.ac.im == null) {
            this.av._stroke = this.a.ac.bd.l5();
        }
        else {
            this.av._stroke = this.a.ac.im;
        }
        this.av.ac = this.a.ac.eo;
        this.e.s(this.av);
    }
    ab(a) {
    }
    aw() {
        return this.a.ac.bf.m5();
    }
    v() {
        if (this.a.ac.bc != null && !isNaN_(this.a.ac.bc.topMargin)) {
            return Math.max(0, this.a.ac.bc.topMargin);
        }
        else {
            return this.aw().e;
        }
    }
    s() {
        if (this.a.ac.bc != null && !isNaN_(this.a.ac.bc.bottomMargin)) {
            return Math.max(0, this.a.ac.bc.bottomMargin);
        }
        else {
            return this.aw().b;
        }
    }
    t() {
        if (this.a.ac.bc != null && !isNaN_(this.a.ac.bc.leftMargin)) {
            return Math.max(0, this.a.ac.bc.leftMargin);
        }
        else {
            return this.aw().c;
        }
    }
    u() {
        if (this.a.ac.bc != null && !isNaN_(this.a.ac.bc.rightMargin)) {
            return Math.max(0, this.a.ac.bc.rightMargin);
        }
        else {
            return this.aw().d;
        }
    }
    at() {
        return this.av.aj.c;
    }
    b() {
        let a = ((() => {
            let $ret = new PathRenderingInfo();
            $ret.e = this.a.ac.im;
            $ret.c = this.a.ac.eo;
            return $ret;
        })());
        if (this.a.ac != null && typeCast(XamDataChart.$, this.a.ac.bd) !== null) {
            let b = this.a.ac.bd;
            if (b.nn && b.bg != 2 && b.bg != 1) {
                a.a = true;
            }
        }
        return a;
    }
    r() {
        if (this.a.af == null) {
            return 0;
        }
        return Math.max(0, this.a.af.topMargin);
    }
    p() {
        if (this.a.af == null) {
            return 0;
        }
        return Math.max(0, this.a.af.leftMargin);
    }
    q() {
        if (this.a.af == null) {
            return 0;
        }
        return Math.max(0, this.a.af.rightMargin);
    }
    o() {
        if (this.a.af == null) {
            return 0;
        }
        return Math.max(0, this.a.af.bottomMargin);
    }
}
AxisLabelPanelBaseView.$t = markType(AxisLabelPanelBaseView, 'AxisLabelPanelBaseView');
/**
 * @hidden
 */
export class AxisView extends Base {
    constructor(a) {
        super();
        this.a = null;
        this.a7 = null;
        this.a8 = null;
        this.ba = null;
        this.a9 = null;
        this.b = new AxisComponentsFromView();
        this.h = null;
        this.k = null;
        this.j = null;
        this._isDirty = false;
        this.bb = null;
        this.a5 = Rect.empty;
        this.a = a;
        this.bb = new Rectangle();
    }
    ag() {
        this.a7 = ((() => {
            let $ret = new Path();
            $ret.aj = new GeometryGroup();
            return $ret;
        })());
        this.ba = ((() => {
            let $ret = new Path();
            $ret.aj = new GeometryGroup();
            $ret.ab = false;
            $ret.stroke = null;
            return $ret;
        })());
        this.a8 = ((() => {
            let $ret = new Path();
            $ret.aj = new GeometryGroup();
            $ret.ab = false;
            return $ret;
        })());
        this.a9 = ((() => {
            let $ret = new Path();
            $ret.aj = new GeometryGroup();
            $ret.ab = false;
            return $ret;
        })());
        this.a.d2 = 1;
        this.a.em = 1;
    }
    ai(a) {
    }
    ax() {
        let a = new TextBlock();
        return a;
    }
    aq(a) {
        a._visibility = 0;
        a.s = 0;
        if (a.x == null) {
            this.a.at.ab.add(a);
        }
    }
    as(a) {
        a._visibility = 1;
    }
    ar(a) {
        if (this.a.at.ab.contains(a)) {
            this.a.at.ab.remove(a);
        }
    }
    bc() {
        let a = new Rectangle();
        return a;
    }
    p(a) {
        if (a.x == null) {
            this.d.ab.add(a);
        }
        a._visibility = 0;
    }
    r(a) {
        a._visibility = 1;
    }
    q(a) {
        if (this.a.at.ab.contains(a)) {
            this.a.at.ab.remove(a);
        }
    }
    aj() {
    }
    m() {
        return true;
    }
    get index() {
        if (this.a.bf != null && this.a.bf.cx) {
            return this.a.bf.series.count + 1;
        }
        let a = typeCast(XamDataChart.$, this.a.bd);
        let b = 0;
        if (a == null) {
            return 0;
        }
        if (a != null && a.ng == 1) {
            let c = 0;
            for (let d = 0; d < this.a.bf.series.count; d++) {
                if (this.a.bf.series._inner[d].isStacked) {
                    c += this.a.bf.series._inner[d].fg();
                }
                else {
                    c++;
                }
            }
            b = c;
        }
        return b + a.axes.indexOf(this.a);
    }
    ad() {
        this.d.b6();
        this.d.bu();
    }
    ab() {
        this.d.b1();
    }
    x() {
        if (this.d != null) {
            this.d.ab.clear();
        }
        this.z(this.a7.aj.c);
        this.z(this.ba.aj.c);
        this.z(this.a8.aj.c);
        this.z(this.a9.aj.c);
        this.ae();
    }
    av(a) {
        this.a7._visibility = a;
        this.a8._visibility = a;
        this.ba._visibility = a;
        this.a9._visibility = a;
    }
    an() {
    }
    w(a) {
        this.a.cf = true;
        if (this.a.bf != null) {
            this.a.bf.ht();
        }
        this.a.g4();
    }
    c() {
        this.b.a = this.a7;
        this.b.b = this.a8;
        this.b.c = this.a9;
        this.b.d = this.ba;
        return this.b;
    }
    z(a) {
        if (a != null) {
            a.clear();
        }
    }
    ay() {
        return this.a7.aj.c;
    }
    e() {
        let a = ((() => {
            let $ret = new PathRenderingInfo();
            $ret.e = this.a.il;
            $ret.c = this.a.em;
            $ret.f = this.a.iq;
            return $ret;
        })());
        if (typeCast(XamDataChart.$, this.a.bd) !== null) {
            let b = this.a.bd;
            if (b.nn && b.bg != 2 && b.bg != 1) {
                a.a = true;
            }
        }
        return a;
    }
    a1() {
        return this.ba.aj.c;
    }
    az() {
        return this.a8.aj.c;
    }
    f() {
        let a = ((() => {
            let $ret = new PathRenderingInfo();
            $ret.e = this.a.ii;
            $ret.c = this.a.d2;
            $ret.f = this.a.io;
            return $ret;
        })());
        if (typeCast(XamDataChart.$, this.a.bd) !== null) {
            let b = this.a.bd;
            if (b.nn && b.bg != 2 && b.bg != 1) {
                a.a = true;
            }
        }
        return a;
    }
    a0() {
        return this.a9.aj.c;
    }
    g() {
        let a = ((() => {
            let $ret = new PathRenderingInfo();
            $ret.e = this.a.ij;
            $ret.c = this.a.d5;
            $ret.f = this.a.ip;
            return $ret;
        })());
        if (typeCast(XamDataChart.$, this.a.bd) !== null) {
            let b = this.a.bd;
            if (b.nn && b.bg != 2 && b.bg != 1) {
                a.a = true;
            }
        }
        return a;
    }
    get d() {
        return this.a.an().a;
    }
    at(a, b, c) {
        this.d.ac = a;
        this.d.cp = b;
        this.d.co = c;
        this.ae();
    }
    y() {
        this.d.ab.clear();
        this.ae();
    }
    ap(a) {
        this.d.bn = a;
        this.ae();
    }
    au(a, b) {
        this.d.a1 = a;
        this.d.a2 = b;
    }
    ao(a) {
        this.d.a8 = a;
    }
    v() {
    }
    o(a) {
        return null;
    }
    n(dataItem_) {
        if (this.a.ar != null) {
            return this.a.ar(dataItem_);
        }
        let label_ = this.a.e6;
        let a = typeof dataItem_ === 'number' && typeof label_ === 'string';
        let labelValue_ = null;
        if (this.h != null) {
            labelValue_ = this.h.getPropertyValue(dataItem_);
            if ((labelValue_ === undefined)) {
                labelValue_ = label_;
            }
        }
        else {
            labelValue_ = a ? stringFormat(label_, dataItem_) : (typeof dataItem_[label_] != 'undefined') ? dataItem_[label_] : label_;
            ;
        }
        if (this.a.expectFunctions) {
            if ((typeof (labelValue_) == 'function')) {
                labelValue_ = labelValue_();
            }
        }
        return labelValue_;
    }
    af(a, b) {
        this.j = a;
        this.k = b;
    }
    get isDirty() {
        return this._isDirty;
    }
    set isDirty(a) {
        this._isDirty = a;
    }
    ae() {
        if (this.a.bd == null || this.j == null) {
            return;
        }
        if (!this.isDirty) {
            this.isDirty = true;
            this.a.bd.ah.n();
        }
    }
    undirty(a) {
        this.isDirty = false;
        this.al(a);
    }
    al(a) {
        if (this.j == null) {
            return;
        }
        if (this.j.d) {
            if (this.a.bf != null && this.a.bf.ea != 1) {
                this.j.z();
                this.j.aa(this.a.bf.ea, this.a.bf.ea);
            }
            let b = this.a.bd.mv();
            if (a) {
                this.j.k(b.left, b.top, b.width, b.height);
            }
            if (a) {
                if (this.a.bf.md != null && !this.a.i0.isEmpty) {
                    this.bb.o = this.a.i0.top;
                    this.bb.n = this.a.i0.left;
                    this.bb.width = this.a.i0.width;
                    this.bb.height = this.a.i0.height;
                    this.bb._fill = this.a.bf.md;
                    this.j.v(this.bb);
                }
            }
            this.j.z();
            this.j.ae(this.a.i0);
            this.am();
            this.j.y();
            if (this.a.bf != null && this.a.bf.ea != 1) {
                this.j.y();
            }
        }
        if (this.k.d) {
            if (this.a.bf != null && this.a.bf.ea != 1) {
                this.k.z();
                this.k.aa(this.a.bf.ea, this.a.bf.ea);
            }
            let c = this.a5;
            let d = this.a.bd.mv();
            if (!c.isEmpty && a) {
                this.k.k(d.left, d.top, d.width, d.height);
            }
            if (this.a.bf != null && this.a.bf.ea != 1) {
                this.k.y();
            }
        }
    }
    postRender() {
        this.d.ca();
    }
    am() {
        if (this.j.d) {
            this.a7._stroke = this.a.ih;
            this.ba._fill = this.a.ik;
            this.a9._stroke = this.a.ig;
            this.a8._stroke = this.a.ie;
            this.a9.ac = this.a.d5;
            this.a8.ac = this.a.d2;
            this.a7.ac = this.a.em;
            this.a9.ai = this.a.ip;
            this.a8.ai = this.a.io;
            this.a7.ai = this.a.iq;
            this.a5 = this.a.i0;
            this.j.s(this.a7);
            this.j.s(this.ba);
            this.j.s(this.a8);
            this.j.s(this.a9);
        }
    }
    ac() {
        this.ae();
    }
    aa(a) {
        if (a != null) {
            a.ah.r(this);
            a.bn.cj();
        }
    }
    u(a) {
        if (a != null) {
            a.ah.l(this);
            this.ae();
        }
    }
    i() {
        if (this.a.bf == null || this.a.bf.bn.i.af == null) {
            return null;
        }
        return FontUtil.getFont(this.a.bf.bn.i.af);
    }
    l() {
        return this.j == null;
    }
    ak() {
        if (this.a.b0 || this.a.cb) {
            return;
        }
        if (this.a.f6 == null) {
            this.a.hj = null;
            this.a.cf = true;
            this.a.g4();
            return;
        }
        if (this.a.hj == null) {
            let a = new TextBlock();
            a.ak = this.a.f6;
            a.dataContext = this.a.bc;
            this.a.hj = a;
        }
        else {
            this.a.hj.ak = this.a.f6;
            this.a.hj.dataContext = this.a.bc;
        }
        this.a.cf = true;
        this.a.g4();
    }
    t() {
        let a;
        let b = new AxisLabelSettings();
        if (this.a.b0) {
            a = "ui-angular-axis-labels";
            b.margin = 0;
        }
        else if (this.a.ce) {
            a = "ui-vertical-axis-labels";
            b.location = 2;
        }
        else if (this.a.az == 3) {
            a = "ui-radial-axis-labels";
            b.location = 5;
        }
        else {
            a = "ui-horizontal-axis-labels";
            b.location = 1;
        }
        this.s(b, a);
    }
    aw() {
        if (this.a.bf == null) {
            return;
        }
        let a = this.a.bf.nj;
        let b = a.fi;
        let c = a.fh;
        if (this.a.il == null) {
            if (b == null) {
                this.a.il = a.ff;
            }
            else if (b.color.l != 0) {
                this.a.il = b;
            }
        }
        if (this.a.ii == null) {
            if (c == null) {
                this.a.ii = a.ff;
            }
            else if (c.color.l != 0) {
                this.a.ii = c;
            }
        }
    }
    s(a, b) {
        this.a.er.startCSSQuery();
        let c = this.a.er.getCssDefaultPropertyValue(b, "margin-top");
        let d = this.a.er.getCssDefaultPropertyValue(b, "margin-right");
        let e = this.a.er.getCssDefaultPropertyValue(b, "margin-bottom");
        let f = this.a.er.getCssDefaultPropertyValue(b, "margin-left");
        let g = this.a.er.getCssDefaultPropertyValue(b, "text-align");
        let h = this.a.er.getCssDefaultPropertyValue(b, "vertical-align");
        let i = this.a.er.getCssDefaultPropertyValue(b, "color");
        this.a.er.endCSSQuery();
        if (c != null) {
            a.topMargin = parseFloat(c);
        }
        if (d != null) {
            a.rightMargin = parseFloat(d);
        }
        if (e != null) {
            a.bottomMargin = parseFloat(e);
        }
        if (f != null) {
            a.leftMargin = parseFloat(f);
        }
        if (i != null) {
            if (a.textColor == null) {
                a.textColor = new Brush();
            }
            a.textColor._fill = i;
        }
        if (g != null) {
            switch (g) {
                case "right":
                    a.horizontalAlignment = 2;
                    break;
                case "left":
                    a.horizontalAlignment = 0;
                    break;
                default:
                    a.horizontalAlignment = 1;
                    break;
            }
        }
        if (h != null) {
            switch (h) {
                case "top":
                    a.verticalAlignment = 0;
                    break;
                case "bottom":
                    a.verticalAlignment = 2;
                    break;
                default:
                    a.verticalAlignment = 1;
                    break;
            }
        }
        this.a.aw = a;
    }
    preRender() {
        if (this.a.bf != null) {
            this.a.bf.hk();
        }
    }
    isValid() {
        return this.a != null && !this.a.i0.isEmpty;
    }
    a2(a) {
        return { $type: Point_$type, x: a.n, y: a.o };
    }
    a3() {
        return { $type: Point_$type, x: this.a.at.cn.left, y: this.a.at.cn.top };
    }
    a6() {
        let a = this.a.at.cn;
        return a;
    }
    a4(a) {
        return { $type: Point_$type, x: a.n, y: a.o };
    }
    bd(a) {
        let b = this.a.at.ae.t();
        let c = this.a.at.ae.v();
        let d = this.a.at.ae.u();
        let e = this.a.at.ae.s();
        return new Thickness(1, b, c, d, e);
    }
    ah() {
        if (FastReflectionHelper.needsHelper(this.a.e6)) {
            this.h = new FastReflectionHelper(true, this.a.e6);
        }
        else {
            this.h = null;
        }
    }
}
AxisView.$t = markType(AxisView, 'AxisView', Base.$, [ISchedulableRender_$type]);
/**
 * @hidden
 */
export class CategoryAxisBaseView extends AxisView {
    constructor(a) {
        super(a);
        this.be = null;
        this.be = a;
    }
    o(a) {
        let b = 0;
        if (this.be.categoryMode == 0) {
            b = truncate(Math.round(a));
        }
        else {
            b = truncate(Math.floor(a));
        }
        if (b < 0 || b > this.a.jy - 1) {
            return null;
        }
        let c = this.a.je.item(b);
        let d = this.n(c);
        if (d == null) {
            return null;
        }
        return d.toString();
    }
    bf(a) {
        let b = 0;
        let c = false;
        for (let d = 0; d < a.count; d++) {
            let e = typeCast(FrameworkElement.$, a._inner[d]);
            if (e == null) {
                e = this.a.bo.item(d);
                let f = a._inner[d] == null ? "" : a._inner[d].toString();
                let g = e.ak;
                let h = 0;
                let i = 0;
                if (g != null) {
                    h = g.length;
                }
                if (f != null) {
                    i = f.length;
                }
                if (h != i) {
                    c = true;
                }
                e.ak = f;
                b++;
            }
            else {
                this.d.ab.add(e);
            }
        }
        if (c) {
            this.a.cf = true;
        }
        this.a.ge();
        return b;
    }
}
CategoryAxisBaseView.$t = markType(CategoryAxisBaseView, 'CategoryAxisBaseView', AxisView.$);
/**
 * @hidden
 */
export class HorizontalAxisLabelPanelBaseView extends AxisLabelPanelBaseView {
    constructor(a) {
        super(a);
        this.ax = null;
        this.ax = a;
    }
    az() {
    }
    ay() {
        return false;
    }
    a0(a) {
        let b = this.a.bj();
        let c, d;
        c = this.ax.c0();
        d = this.ax.cx();
        let e = this.a.af != null ? this.a.af.verticalAlignment : 1;
        let f = this.a.a5;
        let g = a.count;
        let h = this.a.cn;
        let i = this.ax.cz();
        let j = i / 2;
        for (let k = 0; k < g; k++) {
            let l = a._inner[k];
            let m = l.height / 2;
            switch (e) {
                case 0:
                    l.y = h.top + c;
                    break;
                case 1:
                case 3:
                    l.y = (h.top + c + j) - m;
                    break;
                case 2:
                    l.y = (h.bottom - d) - l.height;
                    break;
            }
        }
    }
}
HorizontalAxisLabelPanelBaseView.$t = markType(HorizontalAxisLabelPanelBaseView, 'HorizontalAxisLabelPanelBaseView', AxisLabelPanelBaseView.$);
/**
 * @hidden
 */
export class NumericAxisBaseView extends AxisView {
    constructor(a) {
        super(a);
        this.be = null;
        this.be = a;
    }
    bf() {
    }
    o(a) {
        let b = this.be.je.d(this.be.i0, this.be.bf.mq, this.be.iv(), this.be.iu());
        return this.be.je.w(b, a, -1, NaN);
    }
}
NumericAxisBaseView.$t = markType(NumericAxisBaseView, 'NumericAxisBaseView', AxisView.$);
/**
 * @hidden
 */
export class VerticalAxisLabelPanelView extends AxisLabelPanelBaseView {
    constructor(a) {
        super(a);
        this.ax = null;
        this.ax = a;
    }
    ay() {
    }
    d() {
        let a = this.a.ac.bf.getFontInfo();
        if (this.a.ac.bc != null && this.a.ac.bc.textStyle != null) {
            a = this.a.ac.bc.g(this.a.ac.bf.bn.i.af);
        }
        else {
            let b = this.a.ac.bf.bq();
            if (b != null) {
                a = b;
            }
        }
        return a;
    }
    aw() {
        return this.a.ac.bf.m6();
    }
    as() {
        let a = this.a.ac.bd.getFontBrush();
        if (this.a.ac.bc != null && this.a.ac.bc.textColor != null) {
            a = this.a.ac.bc.textColor;
        }
        else {
            let b = this.a.ac.bf.l8();
            if (b != null) {
                a = b;
            }
        }
        return a;
    }
    az(a, b) {
        let c, d;
        c = this.ax.cu();
        d = this.ax.cw();
        let e = this.a.af != null ? this.a.af.horizontalAlignment : 1;
        let f = this.a.a5;
        let g = this.ax.cx();
        let h = g / 2;
        let i = this.a.cn;
        for (let j = 0; j < a.count; j++) {
            let k = a._inner[j];
            let l = k.width / 2;
            switch (e) {
                case 0:
                    k.x = i.left + c;
                    break;
                case 1:
                case 3:
                    k.x = (i.left + c + h) - l;
                    break;
                case 2:
                    k.x = (i.right - d) - k.width;
                    break;
            }
        }
    }
}
VerticalAxisLabelPanelView.$t = markType(VerticalAxisLabelPanelView, 'VerticalAxisLabelPanelView', AxisLabelPanelBaseView.$);
/**
 * @hidden
 */
export class XamDataChartView extends SeriesViewerView {
    constructor(a) {
        super(a);
        this.fa = null;
        this.fj = null;
        this.ff = null;
        this.fg = null;
        this.fi = null;
        this.fh = null;
        this.fc = 0;
        this.fd = 0;
        this.fb = null;
        this.fa = a;
    }
    fe(a) {
        this.n.ah.p();
    }
    dh() {
        super.dh();
        if (this.b.count == 0 && this.w != null) {
            this.w.k(0, 0, this.a6, this.a5);
        }
    }
    du() {
        let a, b;
        let c = 1, d = 0;
        let e = false;
        let f = this.i.e();
        let g;
        let h = this.i.a6(c, g, a, b, d, e);
        c = h.p0;
        g = h.p1;
        a = h.p2;
        b = h.p3;
        d = h.p4;
        e = h.p5;
        if (isNaN_(this.n.eu)) {
            this.n.eu = g[0];
        }
        if (isNaN_(this.n.el)) {
            this.n.el = g[1];
        }
        if (isNaN_(this.n.ef)) {
            this.n.ef = g[2];
        }
        if (isNaN_(this.n.ej)) {
            this.n.ej = g[3];
        }
        this.fa.po = f.i;
        this.fa.pm = f.i;
        this.fa.pn = f.i;
        this.fa.nn = e;
        this.fi = a;
        this.fh = b;
        this.fa.m9 = f.a;
        this.fa.nc = f.f;
        this.fa.na = f.b != null ? f.b : new BrushCollection();
        this.fa.nb = f.c != null ? f.c : new BrushCollection();
        if (this.fa.na.count == 0) {
            for (let i = 0; i < f.a.count; i++) {
                this.fa.na.add(f.a.item(i));
            }
        }
        if (f.c.count == 0) {
            for (let j = 0; j < f.f.count; j++) {
                this.fa.nb.add(f.f.item(j));
            }
        }
        this.fg = f.j;
        this.fj = f.k;
        this.fb = f.h;
        this.ff = f.i;
        this.fc = c;
        for (let k of fromEnum(this.fa.series)) {
            k.jm();
        }
        this.fd = d;
    }
    dr() {
        this.e2.ac = this.e3.ac = DeviceUtils.g(1.4);
        this.e2._stroke = this.e3._stroke = this.fg;
        super.dr();
    }
}
XamDataChartView.$t = markType(XamDataChartView, 'XamDataChartView', SeriesViewerView.$);
/**
 * @hidden
 */
export class SeriesView extends Base {
    constructor(a) {
        super();
        this.e = null;
        this.p = false;
        this.d = null;
        this._isDirty = false;
        this.bt = null;
        this.bk = null;
        this.s = 0;
        this.bo = Rect.empty;
        this.bj = new Brush();
        this.f = new SeriesComponentsFromView();
        this.h = null;
        this.i = null;
        this.bp = null;
        this.bq = null;
        this.j = false;
        this.a = null;
        this.o = false;
        this.k = false;
        this.m = false;
        this.aa = null;
        this.s = NaN;
        this.o = true;
        this.e = a;
        this.n = false;
        this.bt = new Rectangle();
        this.p = false;
    }
    getDefaultTooltipTemplate() {
        return this.e.a0.a$p(this.e);
    }
    am() {
        if (this.e.cx) {
            this.e.a0.a$s(this.e);
        }
    }
    ap() {
        if (!this.n) {
            this.e.bl = 0;
            this.e.bj = 0;
            this.e.bk = 1;
            this.d = new DataContext();
            this.d.series = this.e;
            this.e.bv = EasingFunctions.cubicEase;
            this.ac();
        }
    }
    getEffectiveViewport() {
        return this.e.getEffectiveViewport1(this);
    }
    aw() {
        this.an();
    }
    ag() {
    }
    get t() {
        if (this.e.bs != null) {
            return this.e.bs.bn.i.af;
        }
        return null;
    }
    get isDirty() {
        return this._isDirty;
    }
    set isDirty(a) {
        this._isDirty = a;
    }
    get_index() {
        if (this.e == null || this.e.bs == null) {
            return 0;
        }
        if (this.e.bs.cx) {
            if (this.e.ct) {
                return this.e.bs.series.indexOf(this.e);
            }
            else {
                let a = this.e.bs.series.indexOf(this.e);
                if (a >= 0) {
                    return a;
                }
                for (let b = 0; b < this.e.bs.series.count; b++) {
                    if (this.e.bs.series._inner[b].ct) {
                        let c = this.e.bs.series._inner[b].a5();
                        if (c == this.e) {
                            return b;
                        }
                    }
                }
                return a;
            }
        }
        let d = typeCast(XamDataChart.$, this.e.bq);
        let e = 0;
        if (d != null) {
            if (d.ng == 2 || d.ng == 0) {
                e = d.axes.count;
            }
        }
        let f = 0;
        for (let g = 0; g < this.e.bs.series.count; g++) {
            if (this.e.bs.series._inner[g] == this.e) {
                break;
            }
            if (this.e.bs.series._inner[g].isStacked) {
                f += this.e.bs.series._inner[g].fg();
            }
            else {
                f++;
            }
        }
        return e + f;
    }
    get index() {
        return this.get_index();
    }
    an() {
        if (this.e.bs == null) {
            return;
        }
        if (!this.isDirty) {
            this.isDirty = true;
            this.a.o(this.h, this.i);
        }
    }
    undirty(a) {
        this.isDirty = false;
        this.a1(a);
    }
    ar() {
        this.an();
    }
    bn() {
        if (this.bk == null) {
            this.bk = ((() => {
                let $ret = new Brush();
                $ret.color = Color.u(0, 0, 0, 0);
                return $ret;
            })());
        }
        return this.bk;
    }
    r() {
        if (!isNaN_(this.s)) {
            return this.s;
        }
        if (this.e.bs != null) {
            return this.e.bs.ea;
        }
        else {
            return 1;
        }
    }
    a1(a) {
        if (this.h == null) {
            return;
        }
        if (this.bo.isEmpty) {
            this.bo = this.br;
        }
        let b = this.bo;
        let c = this.e.bs.mv();
        let d = c.left;
        let e = c.top;
        let f = c.width;
        let g = c.height;
        let h = this.r();
        if (this.m) {
            d = this.br.left;
            e = this.br.top;
            f = this.br.width;
            g = this.br.height;
        }
        if (this.h.d) {
            if (h != 1) {
                this.h.z();
                this.h.aa(h, h);
            }
            if (a) {
                this.h.k(d, e, f, g);
            }
            if (a) {
                if (this.e.bs.md != null && !this.br.isEmpty) {
                    this.bt.o = this.br.top;
                    this.bt.n = this.br.left;
                    this.bt.width = this.br.width;
                    this.bt.height = this.br.height;
                    this.bt._fill = this.e.bs.md;
                    this.h.v(this.bt);
                }
            }
            if (h != 1) {
                this.h.y();
            }
        }
        if (this.i != null && this.o) {
            if (this.i.d) {
                if (this.e.bs != null && h != 1) {
                    this.i.z();
                    this.i.aa(h, h);
                }
                if (!b.isEmpty && a) {
                    this.i.k(b.left, b.top, b.width, b.height);
                }
                this.a7(true);
                this.a3(this.i, true);
                this.a2(this.i, true);
                if (h != 1) {
                    this.i.y();
                }
            }
        }
        if (this.h.d && this.o) {
            if (h != 1) {
                this.h.z();
                this.h.aa(h, h);
            }
            this.h.z();
            if (!this.n && Rect.l_op_Inequality(this.e.lo, null) && !this.e.lo.isEmpty && (this.e.lo.width != 1 || this.e.lo.height != 1)) {
                this.h.ae(new Rect(0, this.br.left + this.br.width * this.e.lo.left, this.br.top + this.br.height * this.e.lo.top, this.br.width * this.e.lo.width, this.br.height * this.e.lo.height));
            }
            else {
                this.h.ae(this.br);
            }
            this.a7(false);
            this.h.ad(this.e._opacity);
            if (this.e.cp && this.e.cq && !this.n) {
                if (this.e.du) {
                    this.h.o(this.e.k9.colorString, 0, this.e.ew, this.e.ex);
                    let i = this.e.bs.bn.i.x;
                    let j = this.e.bs.bn.i.al;
                    if (h != 1) {
                        i.z();
                        i.aa(h, h);
                    }
                    i.k(c.left, c.top, c.width, c.height);
                    this.a3(i, false);
                    this.a2(i, false);
                    this.h.m(j.getNativeElement(), 1, 0, 0, c.width, c.height);
                    if (h != 1) {
                        i.y();
                    }
                }
                else {
                    this.h.o(this.e.k9.colorString, this.e.ev, this.e.ew, this.e.ex);
                    this.a3(this.h, false);
                    this.a2(this.h, false);
                }
                this.h.l();
            }
            else {
                this.a3(this.h, false);
                this.a2(this.h, false);
            }
            this.h.ad(1);
            this.h.y();
            if (h != 1) {
                this.h.y();
            }
        }
    }
    ba(a, b, c) {
        if (c) {
            this.bc(a, b);
        }
        else {
            this.bb(a, b);
        }
    }
    bd(a, b, c) {
        if (c) {
            this.bf(a, b);
        }
        else {
            this.be(a, b);
        }
    }
    x(a, b) {
        if (b) {
            return this.y(a);
        }
        else {
            return this.z(a);
        }
    }
    y(a) {
        return null;
    }
    z(a) {
        return null;
    }
    bb(a, b) {
    }
    be(a, b) {
    }
    bc(a, b) {
    }
    bf(a, b) {
    }
    a7(a) {
        if (a) {
            this.a9();
        }
        else {
            this.a8();
        }
    }
    a8() {
    }
    a9() {
    }
    bm(a) {
        return this.bl();
    }
    bl() {
        let a = this.e.fk;
        let num_ = (a + 1) * 1000;
        let b = ((num_ & 0x3F) << 2);
        num_ = (num_ >> 6);
        let c = ((num_ & 0x3F) << 2);
        num_ = (num_ >> 6);
        let d = ((num_ & 0x3F) << 2);
        this.bj._fill = "rgb(" + b + "," + c + "," + d + ")";
        return this.bj;
    }
    a3(a, b) {
        this.bo = this.br;
    }
    a2(a, b) {
    }
    au() {
    }
    aj() {
    }
    ak() {
    }
    g() {
        return this.f;
    }
    a6(a) {
    }
    q() {
        return true;
    }
    at() {
    }
    as() {
    }
    a4() {
        this.e.k2 = null;
    }
    ae() {
        this.e.k2 = this.e.k4;
    }
    a5() {
        this.e.k3 = null;
    }
    af() {
        this.e.k3 = this.e.k7;
    }
    c(a) {
        if (typeCast(DataContext.$, a) !== null) {
            return a;
        }
        return null;
    }
    ao(a, b) {
        this.h = a;
        this.i = b;
    }
    get br() {
        return this.bp;
    }
    set br(a) {
        this.bp = a;
    }
    get_bs() {
        if (this.m) {
            return this.bq;
        }
        else if (this.n) {
            return XamDataChart.m0;
        }
        else {
            return this.e.bs != null ? this.e.bs.mq : Rect.empty;
        }
    }
    get bs() {
        return this.get_bs();
    }
    get n() {
        return this.j;
    }
    set n(a) {
        this.j = a;
    }
    ah(a) {
        if (a != null) {
            this.a.r(this);
            if (this.e.bh != null) {
                this.e.bh.a.r(this.e.bh);
            }
        }
    }
    ad(a) {
        if (a != null) {
            if (this.e.ds) {
                this.h = this.e.bs.bn.x;
                a.bn.a.l(this);
                this.a = a.bn.a;
            }
            else {
                this.h = this.e.bs.bn.w;
                a.ah.l(this);
                this.a = a.ah;
            }
            if (this.e.bh != null) {
                a.ai.l(this.e.bh);
                this.e.bh.a = a.ai;
                this.e.bh.an();
            }
            if (this.e.cx) {
                for (let b of fromEnum(this.e.a0.a$h.keys)) {
                    a.ag.l(this.e.a0.a$h.item(b));
                    this.e.a0.a$h.item(b).a = a.ag;
                    this.e.a0.a$h.item(b).an();
                }
            }
            this.an();
        }
    }
    postRender() {
        this.ax();
    }
    ax() {
    }
    b(a) {
        return null;
    }
    az(a) {
        this.e.bh.h = a.a;
    }
    ai(a) {
    }
    bg() {
        if (this.k) {
            return;
        }
        if (this.e.bs != null) {
            let a = (this.e.legend != null) ? this.e.legend : this.e.bs.legend;
            if (a != null && this.e.jv != null && a.containsChild(this.e.jv)) {
                a.removeChild(this.e.jv);
                let b = this.e.fw();
                b.content.actualItemBrush = this.e.k2;
                b.content.outline = this.e.k7;
                b.content.thickness = this.e.ey;
                a.addChildInOrder(this.e.jv, this.e);
            }
        }
    }
    aq() {
        this.e.hp(this.e.aw, this.e.aw);
    }
    av() {
        this.bg();
    }
    getViewInfo(a, b) {
        a = this.br;
        b = this.bs;
        return {
            p0: a,
            p1: b
        };
    }
    l() {
        return this.h != null;
    }
    bh() {
        this.o = this.e._visibility == 0;
        this.an();
    }
    a0() {
        this.e.a0.a$ae(this.e);
    }
    ac() {
        let a = new Color();
        a.colorString = "rgba(95,95,95,0.5)";
        this.e.k9 = a;
        this.e.ev = 5;
        this.e.ew = 5;
        this.e.ex = 5;
    }
    al() {
    }
    preRender() {
        if (this.e.bs != null && !this.n) {
            this.e.bs.hk();
        }
    }
    isValid() {
        return true;
    }
    ay(a) {
        this.h = a.a;
    }
    bi(type_) {
        let legendTemplates_ = TypeRegistrar.get("LegendTemplates");
        let a = (legendTemplates_.resolveLegendItemTemplate(type_));
        return a;
    }
}
SeriesView.$t = markType(SeriesView, 'SeriesView', Base.$, [ISchedulableRender_$type, IProvidesViewport_$type]);
/**
 * @hidden
 */
export class MarkerSeriesView extends SeriesView {
    constructor(a) {
        super(a);
        this.by = null;
        this.b2 = 1;
        this.b4 = 2;
        this.b3 = 3;
        this.b1 = null;
        this.b0 = false;
        this.bu = new Marker();
        this.cl = null;
        this.bu = new Marker();
        this.bu.content = new DataContext();
        this.by = a;
    }
    ap() {
        super.ap();
        this.b1 = new List$1(Marker.$, 0);
        this.cl = ((() => {
            let $ret = new DataTemplate();
            $ret.render = MarkerTemplates.c;
            $ret.measure = MarkerTemplates.b;
            return $ret;
        })());
    }
    cd() {
        for (let a of fromEnum(this.b1)) {
            a.ah = this.by.mi;
        }
        this.an();
    }
    ck(a) {
    }
    bx() {
        let a = new Marker();
        a.content = ((() => {
            let $ret = new DataContext();
            $ret.series = this.e;
            return $ret;
        })());
        a.ah = this.by.mi;
        this.b1.add(a);
        return a;
    }
    cg(a) {
        a._visibility = 0;
    }
    ci(a) {
        a._visibility = 1;
    }
    ch(a) {
        this.b1.remove(a);
    }
    bz() {
        return this.by.mj != null;
    }
    cb() {
        this.by.mh = null;
    }
    b5() {
        this.by.mh = this.by.mj;
    }
    cm(a) {
        let b = a.n;
        let c = a.o;
        let d = a.m;
        let e = a.l;
        return new Rect(0, b - d / 2, c - d / 2, d, e);
    }
    b8(a) {
        switch (a) {
            case SeriesViewer.$$p[1]:
                this.by.mh = this.by.bs.kn;
                break;
            case SeriesViewer.$$p[26]:
                this.by.mh = this.by.bs.kw;
                break;
            case SeriesViewer.$$p[18]:
                this.by.mh = this.by.bs.kt;
                break;
            case SeriesViewer.$$p[20]:
                this.by.mh = this.by.bs.ku;
                break;
            case SeriesViewer.$$p[4]:
                this.by.mh = this.by.bs.ko;
                break;
            case SeriesViewer.$$p[13]:
                this.by.mh = this.by.bs.kr;
                break;
            case SeriesViewer.$$p[6]:
                this.by.mh = this.by.bs.kp;
                break;
            case SeriesViewer.$$p[23]:
                this.by.mh = this.by.bs.kv;
                break;
            case SeriesViewer.$$p[14]:
                this.by.mh = this.by.bs.ks;
                break;
            case SeriesViewer.$$p[7]:
                this.by.mh = this.by.bs.kq;
                break;
        }
    }
    b9() {
        this.by.mu = null;
    }
    b6() {
        this.by.mu = this.by.mw;
    }
    ca() {
        this.by.mv = null;
    }
    b7() {
        this.by.mv = this.by.mx;
    }
    cj() {
        this.an();
    }
    be(a, b) {
        super.be(a, b);
        if (!this.b0) {
            let c = a;
            let d = c.content;
            if (d != null) {
                d.actualItemBrush = this.by.mu;
                if (d.itemBrush != null) {
                    d.actualItemBrush = d.itemBrush;
                }
                d.outline = this.by.mv;
                d.thickness = this.b4;
            }
        }
    }
    bf(a, b) {
        super.bf(a, b);
        let c = a;
        this.bu._visibility = c._visibility;
        this.bu.ah = c.ah;
        this.bu.width = c.width;
        this.bu.height = c.height;
        this.bu.m = c.m;
        this.bu.l = c.l;
        this.bu.n = c.n;
        this.bu.o = c.o;
        let d = this.bm(b);
        let e = this.bu.content;
        let f = c.content;
        e.item = f.item;
        e.series = f.series;
        e.thickness = f.thickness;
        if (e != null) {
            e.actualItemBrush = d;
            e.outline = d;
            e.thickness = this.b2 + this.b3;
        }
    }
    b(a) {
        if (a >= 0 && a < this.b1.count) {
            return this.b1._inner[a].content;
        }
        return super.b(a);
    }
    a2(a, b) {
        super.a2(a, b);
        if (a.d) {
            let c = new DataTemplatePassInfo();
            c.isHitTestRender = b;
            c.context = a.g();
            c.viewportTop = this.br.top;
            c.viewportLeft = this.br.left;
            c.viewportWidth = this.br.width;
            c.viewportHeight = this.br.height;
            c.passID = "Markers";
            let d = new DataTemplateRenderInfo();
            d.isHitTestRender = b;
            d.passInfo = c;
            let e = new DataTemplateMeasureInfo();
            e.passInfo = c;
            let f = false;
            let g = a.g();
            e.context = g;
            d.context = g;
            let h = 0;
            let i = 0;
            if (this.by.mi != null && this.by.mi.passStarting != null) {
                this.by.mi.passStarting(c);
            }
            for (let j = 0; j < this.b1.count; j++) {
                let k = this.b1._inner[j];
                if (k._visibility == 1) {
                    continue;
                }
                this.bd(k, j, b);
                if (b) {
                    k = this.bu;
                }
                if (!f) {
                    e.data = k.content;
                    e.width = k.width;
                    e.height = k.height;
                    e.renderOffsetX = 0;
                    e.renderOffsetY = 0;
                    e.renderContext = a;
                    let l = k.ah;
                    if (l.measure != null) {
                        e.data = k.content;
                        l.measure(e);
                        f = e.isConstant;
                        if (f) {
                            h = e.width;
                            i = e.height;
                        }
                    }
                    d.availableWidth = e.width;
                    d.availableHeight = e.height;
                    d.renderOffsetX = e.renderOffsetX;
                    d.renderOffsetY = e.renderOffsetY;
                    d.renderContext = a;
                }
                else {
                    d.availableWidth = h;
                    d.availableHeight = i;
                }
                if (!isNaN_(k.width) && !isInfinity(k.width)) {
                    d.availableWidth = k.width;
                }
                if (!isNaN_(k.height) && !isInfinity(k.height)) {
                    d.availableHeight = k.height;
                }
                a.p(d, k);
                k.m = d.availableWidth;
                k.l = d.availableHeight;
                k.ai = d.renderOffsetX;
                k.aj = d.renderOffsetY;
            }
            if (this.by.mi != null && this.by.mi.passCompleted != null) {
                this.by.mi.passCompleted(c);
            }
        }
    }
    ce(a) {
        a.create = runOn(this, this.bx);
        a.destroy = runOn(this, this.ch);
        a.activate = runOn(this, this.cg);
        a.disactivate = runOn(this, this.ci);
    }
    cf(a) {
        a.create = runOn(this, this.bx);
        a.destroy = runOn(this, this.ch);
        a.activate = runOn(this, this.cg);
        a.disactivate = runOn(this, this.ci);
    }
    bv(a) {
        let b = this.bw(a, 0);
        if (b == null) {
            b = this.bw(a, 3);
        }
        return b;
    }
    bw(a, b) {
        let c;
        let d;
        let e;
        let f;
        for (let g = this.b1.count - 1; g >= 0; g--) {
            let h = this.b1._inner[g];
            if (h._visibility == 1 || h._opacity == 0) {
                continue;
            }
            c = (h.m / 2) + b;
            d = (h.l / 2) + b;
            e = h.ai;
            f = h.aj;
            if ((h.n + e) - c <= a.x && (h.n + e) + c >= a.x && (h.o + f) - d <= a.y && (h.o + f) + d >= a.y) {
                return h;
            }
        }
        return null;
    }
}
MarkerSeriesView.$t = markType(MarkerSeriesView, 'MarkerSeriesView', SeriesView.$);
/**
 * @hidden
 */
export class ChartAxisRangeChangedEventArgs extends EventArgs {
    constructor(a, b, c, d, e, f) {
        super();
        this._chart = null;
        this._axis = null;
        this._oldMinimumValue = 0;
        this._minimumValue = 0;
        this._oldMaximumValue = 0;
        this._maximumValue = 0;
        this.chart = a;
        this.axis = b;
        this.oldMinimumValue = c;
        this.minimumValue = d;
        this.oldMaximumValue = e;
        this.maximumValue = f;
    }
    get chart() {
        return this._chart;
    }
    set chart(a) {
        this._chart = a;
    }
    get axis() {
        return this._axis;
    }
    set axis(a) {
        this._axis = a;
    }
    get oldMinimumValue() {
        return this._oldMinimumValue;
    }
    set oldMinimumValue(a) {
        this._oldMinimumValue = a;
    }
    get minimumValue() {
        return this._minimumValue;
    }
    set minimumValue(a) {
        this._minimumValue = a;
    }
    get oldMaximumValue() {
        return this._oldMaximumValue;
    }
    set oldMaximumValue(a) {
        this._oldMaximumValue = a;
    }
    get maximumValue() {
        return this._maximumValue;
    }
    set maximumValue(a) {
        this._maximumValue = a;
    }
}
ChartAxisRangeChangedEventArgs.$t = markType(ChartAxisRangeChangedEventArgs, 'ChartAxisRangeChangedEventArgs', EventArgs.$);
callStaticConstructors();
