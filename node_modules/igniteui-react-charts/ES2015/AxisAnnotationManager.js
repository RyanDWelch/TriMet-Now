/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, runOn, delegateRemove, delegateCombine, fromEnum, markType } from "igniteui-react-core/ES2015/type";
import { IAxisAnnotationManager_$type } from "./IAxisAnnotationManager";
import { LabelPosition } from "./LabelPosition";
/**
 * @hidden
 */
export class AxisAnnotationManager extends Base {
    constructor() {
        super(...arguments);
        this._owner = null;
    }
    get owner() {
        return this._owner;
    }
    set owner(a) {
        this._owner = a;
    }
    onAddAnnotations(a) {
        let b = 0;
        for (let c = 0; c < a.al.count; c++) {
            b = this.a(a, a.al._inner[c], b);
        }
        for (let d = 0; d < a.ak.count; d++) {
            b = this.a(a, a.ak._inner[d], b);
        }
        a.bm.count = b;
        a.bn.count = b;
    }
    a(a, b, c) {
        let d = NaN;
        d = b.value;
        let e = new LabelPosition(a.ea(d));
        if (a.b3) {
            let f = a;
            if (f.categoryMode == 2) {
                let g = a.bf.mq;
                let h = a.i0;
                let i = a.iv();
                e.c += a.b8 ? -f.getCategorySize(g, h, i) * 0.5 : f.getCategorySize(g, h, i) * 0.5;
            }
        }
        let j = e.c;
        if (a.ce) {
            if (e.c > a.i0.bottom || e.c < a.i0.top) {
                return c;
            }
        }
        else {
            if (e.c > a.i0.right || e.c < a.i0.left) {
                return c;
            }
        }
        let k = a.bm.item(c);
        let l = a.bn.item(c);
        let m = 100 + c * 2;
        c++;
        l.ak = b.resolveLabelValue();
        if (b.textColor != null) {
            l.am = b.textColor;
        }
        k._fill = b.background;
        k._stroke = b.outline;
        k.ac = b.strokeThickness;
        k.s = m;
        l.s = m + 1;
        b.checkForExtentReset(() => e.b = true);
        e.a = true;
        e.d = b.backgroundPadding;
        a.cv.add(e);
        a.cu.add1(l.ak);
        return c;
    }
    arrangeAnnotations(a, b, c, d, e, f, g, h, i, j) {
        for (let k = 0; k < a.bn.count; k++) {
            let l = a.bm.item(k);
            let m = -1;
            for (let n = c.count - 1; n >= 0; n--) {
                if (c._inner[n] == a.bn.item(k)) {
                    m = n;
                    break;
                }
            }
            if (m == -1) {
                continue;
            }
            if (e) {
                b.z(l, a.bn.item(k), a.cv._inner[m], d._inner[m], g, h, i, j);
                b.aq(l, a.bn.item(k), a.cv._inner[m], d._inner[m], g, h, i, j, f);
            }
            else {
                b.z(l, a.bn.item(k), a.cv._inner[m], d._inner[m], g, h, i, j);
            }
        }
    }
    b(a, b) {
        this.owner.cf = true;
        this.owner.g4();
    }
    c(a) {
        if (a.oldItems != null) {
            for (let b = 0; b < a.oldItems.count; b++) {
                let c = a.oldItems.item(b);
                if (c == null) {
                    continue;
                }
                let d = c;
                d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.b));
            }
        }
        if (a.newItems != null) {
            for (let e = 0; e < a.newItems.count; e++) {
                let f = a.newItems.item(e);
                if (f == null) {
                    continue;
                }
                let g = f;
                g.propertyChanged = delegateCombine(g.propertyChanged, runOn(this, this.b));
            }
        }
        this.owner.cf = true;
        this.owner.g4();
    }
    onAnnotionsChanged(a, b, c) {
        this.c(c);
    }
    onAnnotionsReset(a, b, c) {
        for (let d of fromEnum(b)) {
            d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.b));
        }
    }
    onAutoAnnotionsChanged(a, b, c) {
        this.c(c);
    }
    onAutoAnnotionsReset(a, b, c) {
        for (let d of fromEnum(b)) {
            d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.b));
        }
    }
}
AxisAnnotationManager.$t = markType(AxisAnnotationManager, 'AxisAnnotationManager', Base.$, [IAxisAnnotationManager_$type]);
