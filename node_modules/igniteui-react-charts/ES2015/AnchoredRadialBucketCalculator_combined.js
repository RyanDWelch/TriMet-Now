/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { Type, markType, Point_$type, enumGetBox, typeCast } from "igniteui-react-core/ES2015/type";
import { isNaN_, intDivide, isInfinity } from "igniteui-react-core/ES2015/number";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core/ES2015/DependencyProperty";
import { TrendLineType_$type } from "igniteui-react-core/ES2015/TrendLineType";
import { Brush } from "igniteui-react-core/ES2015/Brush";
import { PenLineCap_$type } from "igniteui-react-core/ES2015/PenLineCap";
import { DoubleCollection } from "igniteui-react-core/ES2015/DoubleCollection";
import { RadialFrame } from "./RadialFrame";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core/ES2015/Rect";
import { AxisRange } from "./AxisRange";
import { NumericAxisBase } from "./NumericAxisBase";
import { IFastItemsSource_$type } from "igniteui-react-core/ES2015/IFastItemsSource";
import { RadialBaseView } from "./RadialBaseView";
import { CollisionAvoider } from "./CollisionAvoider";
import { Clipper } from "igniteui-react-core/ES2015/Clipper";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { PropertyMetadata } from "igniteui-react-core/ES2015/PropertyMetadata";
import { stringIsNullOrEmpty } from "igniteui-react-core/ES2015/string";
/**
 * @hidden
 */
export class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
    constructor(a) {
        super(a);
        this.f = null;
        this.f = a;
    }
    getBucket(a) {
        let b = this.f.cs.nv;
        let c = Math.min(a * this.b, b.count - 1);
        let d = Math.min(c + this.b - 1, b.count - 1);
        let e = NaN;
        let f = NaN;
        for (let g = c; g <= d; ++g) {
            let h = b.item(g);
            if (!isNaN_(e)) {
                if (!isNaN_(h)) {
                    e = Math.min(e, h);
                    f = Math.max(f, h);
                }
            }
            else {
                e = h;
                f = h;
            }
        }
        if (!isNaN_(e)) {
            return [0.5 * (c + d), e, f];
        }
        return [0.5 * (c + d), NaN, NaN];
    }
}
AnchoredRadialBucketCalculator.$t = markType(AnchoredRadialBucketCalculator, 'AnchoredRadialBucketCalculator', RadialBucketCalculator.$);
/**
 * @hidden
 */
export class AnchoredRadialSeries extends RadialBase {
    constructor() {
        super();
        this.nq = null;
        this.nu = null;
        this.oo = { $type: Point_$type, x: 0, y: 0 };
        this.ns = null;
        this.nr = null;
        this.ns = new RadialFrame(3);
        this.nq = new CategoryLineRasterizer();
    }
    bf() {
        return new AnchoredRadialSeriesView(this);
    }
    ht() {
        super.ht();
        this.mz = null;
        this.m1 = null;
    }
    fs(a, b) {
        let c = this.gu(b);
        if (c == AnchoredRadialSeries.$$p[0]) {
            return this.ft(a, b, this.n7);
        }
        return super.fs(a, b);
    }
    it(a) {
        super.it(a);
        this.np = a;
    }
    fe(a, b) {
        return this.ff(a, b, this.mz, null, this.nv);
    }
    fc(a, b) {
        return this.fd(a, b, this.mz, null, this.nv);
    }
    d9(a, b, c, d, e) {
        if (this.nv == null) {
            return Number.POSITIVE_INFINITY;
        }
        return this.ea(a, b, this.mz, d, e, this.nv.count, null);
    }
    en(a, b, c) {
        let d = this.getEffectiveViewport1(this.bi);
        let e = this.n0(this.mz, this.bi.bs, this.bi.br, d);
        let f = new ScalerParams(0, this.bi.bs, this.bi.br, this.mz.b8, d);
        f.c = this.bs.m3;
        return this.ep(this.nv, a, this.mz, f, e, null, b, c);
    }
    lk(a, b, c) {
        if (this.m1 == null || this.mz == null || this.bi == null || this.bi.bs.isEmpty || this.bi.br.isEmpty) {
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        let d = this.getEffectiveViewport1(this.bi);
        let e = new ScalerParams(0, this.bi.bs, this.bi.br, this.m1.b8, d);
        e.c = this.getEffectiveViewport1(this.bi);
        let f = this.en(a, b, c);
        f = this.m1.dv(f, e);
        let g = this.m2.c(a);
        if (!b && this.mz != null) {
            let h = this.fe(a, c);
            let i = this.fc(a, c);
            let j = this.n0(this.mz, this.bi.bs, this.bi.br, d);
            let k = new ScalerParams(0, this.bi.bs, this.bi.br, this.mz.b8, d);
            k.c = this.bs.m3;
            let l = this.d9(a, h, this.mz, k, j);
            let m = this.d9(a, i, this.mz, k, j);
            if (m <= l) {
                g = this.mz.dv(i, k) + j;
            }
            else {
                g = this.mz.dv(h, k) + j;
            }
        }
        let n = this.m2.d(g, f, this.bi.bs, this.bi.br);
        let o = this.m2.e(g, f, this.bi.bs, this.bi.br);
        return { $type: Point_$type, x: n, y: o };
    }
    get nv() {
        return this.nu;
    }
    set nv(a) {
        if (this.nu != a) {
            let b = this.nu;
            this.nu = a;
            this.raisePropertyChanged("ValueColumn", b, this.nu);
        }
    }
    get ok() {
        return this.c(AnchoredRadialSeries.ob);
    }
    set ok(a) {
        this.h(AnchoredRadialSeries.ob, a);
    }
    an(a) {
        if (a != null && a == this.mz && this.nv != null && this.nv.count > 0) {
            return new AxisRange(0, this.nv.count - 1);
        }
        if (a != null && a == this.m1 && this.nv != null && this.nv.count > 0) {
            return new AxisRange(this.nv.minimum, this.nv.maximum);
        }
        return null;
    }
    iy(a, b, c, d) {
        super.iy(a, b, c, d);
        if (this.np.ct.g$b(a, b, c, d)) {
            this.jc(false);
            this.ij();
        }
        let e = typeCast(NumericAxisBase.$, this.m1);
        switch (b) {
            case "FastItemsSource":
                if (typeCast(IFastItemsSource_$type, c) !== null) {
                    c.deregisterColumn(this.nv);
                    this.nv = null;
                }
                if (typeCast(IFastItemsSource_$type, d) !== null) {
                    this.nv = this.bw(this.n7);
                    this.np.co.e(this.eu);
                }
                if (e != null && !e.ck()) {
                    this.np.co.e(this.eu);
                    this.jc(false);
                }
                break;
            case AnchoredRadialSeries.$$p[0]:
                if (this.bz != null) {
                    this.bz.deregisterColumn(this.nv);
                    this.nv = this.bw(this.n7);
                }
                break;
            case "ValueColumn":
                if (e != null && !e.ck()) {
                    this.np.co.e(this.eu);
                    this.jc(false);
                }
                break;
            case "TrendLineBrush":
                this.jn();
                break;
            case "TrendLineType":
                this.ij();
                break;
        }
    }
    hy(a, b, c, d) {
        switch (a) {
            case 4:
            case 1:
            case 0:
                this.np.co.e(this.eu);
                break;
        }
        this.np.ct.g$e(a, b, c, d);
        switch (a) {
            case 4:
                if (this.m1 != null && !this.m1.ck()) {
                    this.jc(true);
                }
                break;
            case 1:
                if (this.m1 != null && !this.m1.ck()) {
                    this.jc(true);
                }
                break;
            case 0:
                if (this.m1 != null && !this.m1.ck()) {
                    this.jc(true);
                }
                break;
            case 2:
                if (this.n7 != null && this.np.co.b > 0 && this.m1 != null && !this.m1.ck()) {
                    this.jc(true);
                }
                break;
            case 3:
                if (d == this.n7) {
                    if (this.m1 != null && !this.m1.ck()) {
                        this.jc(true);
                    }
                }
                break;
        }
    }
    dw(a, b, c) {
        let d = super.dw(a, b, c);
        let e = c;
        if (this.bz == null || this.bz.count == 0 || this.mz == null || this.nv == null || this.mz.jx == 0 || this.m1 == null || isInfinity(this.m1.j3) || isInfinity(this.m1.j2) || e.co.b < 1) {
            d = false;
        }
        return d;
    }
    getOffsetValue() {
        return this.n0(this.mz, this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
    }
    getCategoryWidth() {
        return this.mz.getCategorySize(this.bi.bs, this.bi.br, this.getEffectiveViewport1(this.bi));
    }
    get_ny() {
        return false;
    }
    get ny() {
        return this.get_ny();
    }
    n0(a, b, c, d) {
        let e = 0;
        let f = this.preferredCategoryMode(a);
        if (f == 0 && a.categoryMode != 0) {
            f = 1;
        }
        switch (f) {
            case 0:
                e = 0;
                break;
            case 1:
                e = 0.5 * a.getCategorySize(b, c, d);
                break;
            case 2:
                e = a.getGroupCenter(this.ne(), b, c, d);
                break;
        }
        if (a.b8) {
            e = -e;
        }
        return e;
    }
    nj(a, b) {
        let c = b.bs;
        let d = b.br;
        let e = this.getEffectiveViewport1(b);
        let f = this.mz;
        let g = this.m1;
        let h = g.j3;
        let i = g.j2;
        a.f.clear();
        a.m.clear();
        a.p.clear();
        let j = this.l2();
        let k = 0;
        let l = b;
        let m = new CollisionAvoider();
        let n = 0;
        let o = b.co.d;
        n = this.n0(f, c, d, e);
        l.ct.q = this.m1.li;
        l.ct.p = this.m1.lh;
        l.ct.r = (p, q) => this.n1(p, q, c, d);
        l.ct.s = (p, q) => this.n2(p, q, c, d);
        let p = ((() => {
            let $ret = new Clipper(0, d, false);
            $ret.i = a.p;
            return $ret;
        })());
        let q = ((() => {
            let $ret = new TrendResolutionParams();
            $ret.c = b.co.b;
            $ret.d = b.co.c;
            $ret.e = o;
            $ret.a = n;
            $ret.b = this.eu;
            $ret.f = d;
            $ret.g = c;
            return $ret;
        })());
        l.ct.t(a.p, this.nt, this.nv, this.n4, (r) => this.mz.getScaledAngle(r), (r) => this.m1.lo(r), q, p);
        let r = true;
        if (this.nz(b)) {
            o--;
        }
        for (let s = b.co.c; s <= o; ++s) {
            let t = s;
            if (t * b.co.b >= this.mz.jx) {
                t -= intDivide((this.mz.jx), b.co.b);
            }
            let u = b.co.getBucket(t);
            if (!isNaN_(u[0])) {
                u[0] = f.getScaledAngle(u[0]) + n;
                if (u[1] < h || u[1] > i) {
                    continue;
                }
                u[1] = g.lo(u[1]);
                if (b.co.b > 1) {
                    if (u[2] < h || u[2] > i) {
                        continue;
                    }
                    u[2] = g.lo(u[2]);
                }
                else {
                    u[2] = u[1];
                }
                if ((isNaN_(u[1]) || isNaN_(u[2])) && r && this.ny && this.nx()) {
                    o++;
                }
                else {
                    r = false;
                }
                a.f.add(u);
                if (j) {
                    let v = Math.min(t * b.co.b, this.bz.count - 1);
                    let w = this.m2.d(u[0], u[1], c, d);
                    let x = this.m2.e(u[0], u[1], c, d);
                    let y = new Rect(0, w - 5, x - 5, 11, 11);
                    if (!isNaN_(w) && !isNaN_(x) && !isInfinity(w) && !isInfinity(x) && m.tryAdd(y)) {
                        a.m.add({ $type: Point_$type, x: w, y: x });
                        let z = b.cp.item(k);
                        z.ak = v;
                        z.content.item = this.bz.item(v);
                        ++k;
                    }
                }
            }
            else {
                if (r && this.ny && this.nx()) {
                    o++;
                }
            }
        }
        b.cp.count = k;
        return;
    }
    n1(a, b, c, d) {
        return this.m2.d(a, b, c, d);
    }
    n2(a, b, c, d) {
        return this.m2.e(a, b, c, d);
    }
    nz(a) {
        let b = a;
        return !this.ny && b.co.c == 0 && b.co.d == this.mz.jx;
    }
    no(a, b, c) {
        let d = null;
        let e = c.bs;
        let f = c.br;
        if (b > -1 && !e.isEmpty && !f.isEmpty) {
            let g = a._inner[0][0] < f.left - 2000 ? f.left - 10 : NaN;
            let h = f.bottom + 10;
            let i = a._inner[b][0] > f.right + 2000 ? f.right + 10 : NaN;
            let j = f.top - 10;
            d = new Clipper(1, g, h, i, j, false);
        }
        return d;
    }
    oa(a, b, c, d, e) {
        if (a.count > 0 && d.count > 0) {
            if (!e || this.nw()) {
                a.add(this.oo);
                a.add(a._inner[0]);
                d.add(this.oo);
                d.add(d._inner[0]);
            }
        }
    }
    nx() {
        return !this.nw();
    }
    nw() {
        let a = this.bi.bs;
        return !a.containsPoint({ $type: Point_$type, x: 0.5, y: 0.5 });
    }
    hv(a, b) {
        super.hv(a, b);
        let c = b;
        if (a) {
            c.cp.clear();
        }
        c.ct.g$d();
    }
    nk(a, b) {
        let c = b.bs;
        let d = b.br;
        let e = this.getEffectiveViewport1(b);
        let f = this.lp(b);
        let g = b;
        g.ct.g$g(a.p);
        CategoryMarkerManager.b(this, a.m, g.cp, this.l4);
        g.cj();
        this.n9(d, c, e, f, g);
    }
    n9(a, b, c, d, e) {
        e.cu(a, b, c, d);
    }
    jn() {
        super.jn();
        if (this.fh < 0) {
            return;
        }
        this.np.cv();
    }
    fv(a, b) {
        if (a == this.np.ct.g$j) {
            return null;
        }
        return super.fv(a, b);
    }
    c9(a) {
        let b = this.bi.bs;
        b = b.copy();
        let c = this.bi.br;
        let d = !b.isEmpty && !c.isEmpty && this.bz != null ? this.bz.indexOf(a) : -1;
        if (this.mz == null || this.nv == null || this.m1 == null) {
            return false;
        }
        if (d < 0 || d > this.nv.count - 1) {
            return false;
        }
        let e = this.mz.getScaledAngle(d);
        let f = this.m1.lo(this.nv.item(d));
        if (isNaN_(f)) {
            f = (this.m1.lh + this.m1.li) / 2;
        }
        let g = 0.5 + (Math.cos(e) * f);
        let h = 0.5 + (Math.sin(e) * f);
        if (!isNaN_(g)) {
            if (g < b.left + 0.1 * b.width) {
                g = g + 0.4 * b.width;
                b.x = g - 0.5 * b.width;
            }
            if (g > b.right - 0.1 * b.width) {
                g = g - 0.4 * b.width;
                b.x = g - 0.5 * b.width;
            }
        }
        if (!isNaN_(h)) {
            if (h < b.top + 0.1 * b.height) {
                h = h + 0.4 * b.height;
                b.y = h - 0.5 * b.height;
            }
            if (h > b.bottom - 0.1 * b.height) {
                h = h - 0.4 * b.height;
                b.y = h - 0.5 * b.height;
            }
        }
        if (this.bn != null) {
            this.bn.ap(this.bs, b, true);
        }
        return d >= 0;
    }
    je(a, b) {
        super.je(a, b);
        if (!this.dl) {
            this.bi.az(b);
            return;
        }
        this.bi.az(b);
        let c = typeCast(AnchoredRadialSeriesView.$, this.bh);
        c.co.e(this.eu);
        if (this.cc(this.bh)) {
            return;
        }
        if (!this.df) {
            this.ns = new RadialFrame(3);
            this.nj(this.ns, c);
        }
        this.df = false;
        this.nk(this.ns, c);
        this.dl = false;
    }
    jb(a, b, c, d, e) {
        super.jb(a, b, c, d, e);
        let f = this.a0.a$h.item(d);
        let g = f;
        g.co.e(this.eu);
        f.ay(c);
        if (this.cc(g)) {
            return;
        }
        if (this.nr == null) {
            this.nr = new RadialFrame(3);
        }
        this.nr.u();
        this.nj(this.nr, g);
        this.nk(this.nr, g);
    }
    h4(a) {
        super.h4(a);
        this.a2.exportTrendlineData(this, a, this.np.ct.g$j);
    }
}
AnchoredRadialSeries.$t = markType(AnchoredRadialSeries, 'AnchoredRadialSeries', RadialBase.$);
AnchoredRadialSeries.ob = DependencyProperty.i("ActualTrendLineBrush", Brush.$, AnchoredRadialSeries.$, new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
Type.dep(DependencyProperty, PropertyMetadata, AnchoredRadialSeries, 'raisePropertyChanged', ['ValueMemberPath:n7:oj', [2, null], 'TrendLineType:nt:oh', [TrendLineType_$type, enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness:n3:og', [1, 1.5], 'TrendLinePeriod:n4:of', [1, 7], 'TrendLineZIndex:n5:oi', [1, 1], 'TrendLineBrush:ol:oc', [Brush.$, null], 'TrendLineDashArray:om:od', [DoubleCollection.$], 'TrendLineDashCap:on:oe', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)]]);
/**
 * @hidden
 */
export class AnchoredRadialSeriesView extends RadialBaseView {
    constructor(a) {
        super(a);
        this.cs = null;
        this.ct = null;
        this.co = new AnchoredRadialBucketCalculator(this);
        this.cs = a;
        this.ct = new RadialTrendLineManager();
    }
    cu(a, b, c, d) {
    }
    cv() {
        this.cs.ok = null;
        if (this.cs.ol != null) {
            this.cs.ok = this.cs.ol;
        }
        else {
            this.cs.ok = this.cs.k2;
        }
    }
    a2(a, b) {
        if (a.d) {
            if (!b) {
            }
            if (this.cs.nt != 0 && !b) {
                let c = this.ct.g$j;
                c.ac = this.cs.n3;
                c._stroke = this.cs.ok;
                c.ai = this.cs.om;
                c.ad = this.cs.on;
                a.u(c);
            }
        }
        super.a2(a, b);
    }
    getDefaultTooltipTemplate() {
        let a = "<div class='ui-chart-default-tooltip-content'>";
        if (this.cs.mz.e6 != null) {
            a += "<span>${item." + this.cs.mz.e6 + "}</span><br/>";
        }
        a += "<span";
        let b = this.e.a0.a$q(this.e);
        if (!stringIsNullOrEmpty(b)) {
            a += " style='color:" + b + "'";
        }
        a += ">" + this.cs.fx + ": </span><span class='ui-priority-primary'>" + "${item." + this.cs.n7 + "}</span></div>";
        return a;
    }
}
AnchoredRadialSeriesView.$t = markType(AnchoredRadialSeriesView, 'AnchoredRadialSeriesView', RadialBaseView.$);
