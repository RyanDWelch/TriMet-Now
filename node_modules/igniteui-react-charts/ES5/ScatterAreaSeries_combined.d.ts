import { ScatterTriangulationSeries } from "./ScatterTriangulationSeries";
import { ColorScale } from "./ColorScale";
import { Type, Point } from "igniteui-react-core/ES5/type";
import { IFastItemColumn$1 } from "igniteui-react-core/ES5/IFastItemColumn$1";
import { Color } from "igniteui-react-core/ES5/Color";
import { Rect } from "igniteui-react-core/ES5/Rect";
import { RenderSurface } from "./RenderSurface";
import { SeriesView } from "./SeriesView";
import { WriteableBitmap } from "igniteui-react-core/ES5/WriteableBitmap";
import { TriangleRasterizer } from "./TriangleRasterizer";
import { ScalerParams } from "./ScalerParams";
import { ObservableColorCollection } from "igniteui-react-core/ES5/ObservableColorCollection";
import { RenderingContext } from "igniteui-react-core/ES5/RenderingContext";
/**
 * @hidden
 */
export declare class ScatterAreaSeries extends ScatterTriangulationSeries {
    static $t: Type;
    constructor();
    private nj;
    nk: ColorScale;
    private nx;
    fs(a: any, b: string): any;
    ns: string;
    private no;
    private np;
    protected get_dq(): boolean;
    protected set_dq(a: boolean): void;
    protected iy(a: any, b: string, c: any, d: any): void;
    jd(a: boolean): void;
    jb(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected ny(a: SeriesView): void;
    private nv;
    fp(a: Point): any;
    protected nh: number[];
    protected ni: number[];
    nn(a: SeriesView, b: ScalerParams, c: ScalerParams): TriangleRasterizer;
    ng: Color[];
    protected nq(): ObservableColorCollection;
    protected nl(): ColorScale;
    hv(a: boolean, b: SeriesView): void;
    protected bf(): SeriesView;
    it(a: SeriesView): void;
    nm: ScatterAreaSeriesView;
    nw(a: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterAreaSeriesView extends SeriesView {
    static $t: Type;
    private by;
    private bu;
    bx: number[];
    constructor(a: ScatterAreaSeries);
    b7(a: number, b: number): void;
    b3(a: any): void;
    private b2;
    private b1;
    private b0;
    bv(): number[];
    bw(a: boolean): number[];
    private b6;
    bz(a: Rect, b: ColorScale, c: IFastItemColumn$1<number>): TriangleRasterizer;
    b5(a: TriangleRasterizer): void;
    b4(): void;
    protected a3(a: RenderingContext, b: boolean): void;
    b8(a: WriteableBitmap): void;
    ai(a: any): void;
    getDefaultTooltipTemplate(): string;
}
