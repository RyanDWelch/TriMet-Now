import * as tslib_1 from "tslib";
import { ConsolidatedItemsPosition_$type } from "./ConsolidatedItemsPosition";
import { IgrHorizontalAnchoredCategorySeries } from "./igr-horizontal-anchored-category-series";
import { ColumnSeries } from "./ColumnSeries";
import { ensureEnum, toPoint, fromRect } from "igniteui-react-core/ES5/componentUtil";
/**
 * Represents a IgxDataChartComponent column series.
 * Compare values across categories by using vertical rectangles.Use it when the order of categories is not important or for displaying
 * item counts such as a histogram.
*/
var IgrColumnSeries = /** @class */ (function (_super) {
    tslib_1.__extends(IgrColumnSeries, _super);
    function IgrColumnSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrColumnSeries.prototype.createImplementation = function () {
        return new ColumnSeries();
    };
    Object.defineProperty(IgrColumnSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumnSeries.prototype, "radiusX", {
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.qk;
        },
        set: function (v) {
            this.i.qk = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumnSeries.prototype, "radiusY", {
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.ql;
        },
        set: function (v) {
            this.i.ql = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrColumnSeries.prototype, "consolidatedColumnVerticalPosition", {
        /**
         * The positioning logic to use for columns which have been consolidated into a single visual element.
        */
        get: function () {
            return this.i.qi;
        },
        set: function (v) {
            this.i.qi = ensureEnum(ConsolidatedItemsPosition_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    */
    IgrColumnSeries.prototype.getSeriesValueBoundingBox = function (world) {
        var iv = this.i.lt(toPoint(world));
        return fromRect(iv);
    };
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    IgrColumnSeries.prototype.getItemSpan = function () {
        var iv = this.i.eg();
        return (iv);
    };
    return IgrColumnSeries;
}(IgrHorizontalAnchoredCategorySeries));
export { IgrColumnSeries };
