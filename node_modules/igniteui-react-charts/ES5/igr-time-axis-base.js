import * as tslib_1 from "tslib";
import { IgrCategoryAxisBase } from "./igr-category-axis-base";
import { ensureBool } from "igniteui-react-core/ES5/componentUtil";
/**
 * Represents an category-based horizontal X axis that uses a DateTime scale.
*
* Represents horizontal axis that uses a DateTime scale.
*
* ```ts
*   <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*     <IgrTimeXAxis name="xAxis" label="Date"
* 			dateTimeMemberPath="Date" />
*  </IgrDataChart>
* ```
*/
var IgrTimeAxisBase = /** @class */ (function (_super) {
    tslib_1.__extends(IgrTimeAxisBase, _super);
    function IgrTimeAxisBase(props) {
        return _super.call(this, props) || this;
    }
    Object.defineProperty(IgrTimeAxisBase.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTimeAxisBase.prototype, "dateTimeMemberPath", {
        /**
         * Gets or sets the DateTime mapping property for the axis.
        *
        * Use `dateTimeMemberPath` property for DateTime mapping with the axis.
        *
        * ```ts
        *   <IgrDataChart
        *     dataSource={this.state.dataSource}
        *     width="700px"
        *     height="500px">
        *     <IgrTimeXAxis name="xAxis" label="Date"
        * 			dateTimeMemberPath="Date" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.dateTimeMemberPath;
        },
        set: function (v) {
            this.i.dateTimeMemberPath = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTimeAxisBase.prototype, "isDataPreSorted", {
        /**
         * Gets or sets whether the data assigned to the date time axis should be considered pre-sorted by date/time.
        *
        * Use `isDataPreSorted` property to decide if the data assigned to the date time axis should be considered pre-sorted by date/time.
        */
        get: function () {
            return this.i.k1;
        },
        set: function (v) {
            this.i.k1 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTimeAxisBase.prototype, "actualMinimumValue", {
        /**
         * Gets the coerced minimum value.
        *
        * Use `actualMinimumValue` to get the coerced maximum value.
        */
        get: function () {
            return this.i.actualMinimumValue;
        },
        set: function (v) {
            this.i.actualMinimumValue = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTimeAxisBase.prototype, "actualMaximumValue", {
        /**
         * Gets the coerced maximum value.
        *
        * Use `actualMaximumValue` to get the  coerced maximum value
        */
        get: function () {
            return this.i.actualMaximumValue;
        },
        set: function (v) {
            this.i.actualMaximumValue = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTimeAxisBase.prototype, "minimumValue", {
        /**
         * Gets or sets the axis MinimumValue.
        *
        * Use `minimumValue` property for axis minimum value.
        */
        get: function () {
            return this.i.minimumValue;
        },
        set: function (v) {
            this.i.minimumValue = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTimeAxisBase.prototype, "maximumValue", {
        /**
         * Gets or sets the axis MaximumValue.
        *
        * Use `maximumValue` property for axis maximum value.
        */
        get: function () {
            return this.i.maximumValue;
        },
        set: function (v) {
            this.i.maximumValue = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTimeAxisBase.prototype, "isDateTime", {
        /**
         * Checks if the axis is of date time axis type
        *
        * Use `isDateTime` property to Checks if the axis is of date time axis type.
        */
        get: function () {
            return this.i.b5;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrTimeAxisBase.prototype, "isSorting", {
        /**
         * Checks if axis requires sorting of items
        *
        * Use `isSorting` property to Checks if axis requires sorting of items.
        */
        get: function () {
            return this.i.cc;
        },
        enumerable: true,
        configurable: true
    });
    IgrTimeAxisBase.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.e3(item, memberPathName);
        return (iv);
    };
    /**
     * Gets the index of the data item with the value nearest the given value.
    
    * @param unscaledValue  * The value to find a value close to.
    */
    IgrTimeAxisBase.prototype.getIndexClosestToUnscaledValue = function (unscaledValue) {
        var iv = this.i.i$f(unscaledValue);
        return (iv);
    };
    /**
     * Updates the axis when the data has been changed.
    
    *
    * Updates the axis when the data has been changed. ?
    */
    IgrTimeAxisBase.prototype.notifyDataChanged = function () {
        this.i.i$i();
    };
    return IgrTimeAxisBase;
}(IgrCategoryAxisBase));
export { IgrTimeAxisBase };
