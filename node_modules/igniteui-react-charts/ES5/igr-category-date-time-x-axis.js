import * as tslib_1 from "tslib";
import { TimeAxisDisplayType_$type } from "./TimeAxisDisplayType";
import { IgrTimeAxisBase } from "./igr-time-axis-base";
import { CategoryDateTimeXAxis } from "./CategoryDateTimeXAxis";
import { ensureEnum } from "igniteui-react-core/ES5/componentUtil";
/**
 * Represents a category-based horizontal X axis that uses a DateTime scale.
*
* `IgrCategoryDateTimeXAxis` class represents a category-based horizontal X axis that uses a DateTime scale.
*
* ```ts
*   <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*     <IgrTimeXAxis name="xAxis" label="Date"
* 			dateTimeMemberPath="Date" />
*  </IgrDataChart>
* ```
*/
var IgrCategoryDateTimeXAxis = /** @class */ (function (_super) {
    tslib_1.__extends(IgrCategoryDateTimeXAxis, _super);
    function IgrCategoryDateTimeXAxis(props) {
        return _super.call(this, props) || this;
    }
    IgrCategoryDateTimeXAxis.prototype.createImplementation = function () {
        return new CategoryDateTimeXAxis();
    };
    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, "isContinuous", {
        /**
         * Gets if the current axis is a continuous rather than a discrete scale
        */
        get: function () {
            return this.i.b4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, "displayType", {
        /**
         * Gets or sets the axis display type.
         * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points.
         * Discrete display type will not use a constant interval, but will align each label with its data point.
        *
        * `displayType` property is used for axis display type.
        *
        * Continuous display type divides the axis into even intervals, where labels will not necessarily be aligned with data points. Discrete display type will not use a constant interval, but will align each label with its data point.
        *
        * ```ts
        *   <IgrDataChart
        *     dataSource={this.state.dataSource}
        *     width="700px"
        *     height="500px">
        *     <IgrTimeXAxis name="xAxis" label="Date"
        * 			dateTimeMemberPath="Date"
        * 			displayType ="continuous" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.l3;
        },
        set: function (v) {
            this.i.l3 = ensureEnum(TimeAxisDisplayType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, "interval", {
        /**
         * Gets or sets the X axis time interval.
        *
        * `interval` property is used to get/sets the frequency of displayed labels.
        *
        * ```ts
        *   <IgrDataChart
        *     dataSource={this.state.dataSource}
        * 		width="700px"
        * 		height="500px">
        *     <IgrTimeXAxis name="xAxis"
        * 		label="Date"
        * 		interval=2
        * 		dateTimeMemberPath="Date" />
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.md;
        },
        set: function (v) {
            this.i.md = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, "actualInterval", {
        /**
         * Gets the effective value for the current Interval.
        */
        get: function () {
            return this.i.ma;
        },
        set: function (v) {
            this.i.ma = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, "minorInterval", {
        /**
         * Gets or sets the frequency of displayed minor lines.
         * The set value is a factor that determines how the minor lines will be displayed.
        */
        get: function () {
            return this.i.me;
        },
        set: function (v) {
            this.i.me = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, "actualMinorInterval", {
        /**
         * Gets the effective value for the current MinorInterval.
        */
        get: function () {
            return this.i.mb;
        },
        set: function (v) {
            this.i.mb = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryDateTimeXAxis.prototype, "isCategoryDateTime", {
        /**
         * Gets if the current axis is of category date time axis type
        */
        get: function () {
            return this.i.b3;
        },
        enumerable: true,
        configurable: true
    });
    IgrCategoryDateTimeXAxis.prototype.scrollIntoView = function (minimum, maximum) {
        this.i.mk(minimum, maximum);
    };
    return IgrCategoryDateTimeXAxis;
}(IgrTimeAxisBase));
export { IgrCategoryDateTimeXAxis };
