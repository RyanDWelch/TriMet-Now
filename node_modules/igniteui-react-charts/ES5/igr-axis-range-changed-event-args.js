import { AxisRangeChangedEventArgs as AxisRangeChangedEventArgs_internal } from "./AxisRangeChangedEventArgs";
/**
 * Provides data for Axis RangeChanged events.
*
* The `AxisRangeChangedEventArgs` event fire when the axis range changes.
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
* 		<IgrCategoryXAxis name="xAxis" label="Date" />
* 		<IgrNumericYAxis  name="yAxis" />
*     <IgrFinancialPriceSeries
* 		name="series2"
* 		xAxisName="xAxis"
* 		yAxisName="yAxis"
* 		displayType="Candlestick"
* 		lowMemberPath="Low"
* 		highMemberPath="High"
* 		openMemberPath="Open"
* 		closeMemberPath="Close"
* 		volumeMemberPath="Volume" />
*  </IgrDataChart>
* ```
*/
var AxisRangeChangedEventArgs = /** @class */ (function () {
    function AxisRangeChangedEventArgs() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    AxisRangeChangedEventArgs.prototype.createImplementation = function () {
        return new AxisRangeChangedEventArgs_internal(0);
    };
    Object.defineProperty(AxisRangeChangedEventArgs.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    AxisRangeChangedEventArgs.prototype.onImplementationCreated = function () {
    };
    AxisRangeChangedEventArgs.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    Object.defineProperty(AxisRangeChangedEventArgs.prototype, "oldMinimumValue", {
        /**
         * Gets the minimum value before the range changed. The reported minimum is the effective,
         * not the set value.
        *
        * The `oldMinimumValue` property is used to gets the minimum value before the range changed.
        */
        get: function () {
            return this.i.oldMinimumValue;
        },
        set: function (v) {
            this.i.oldMinimumValue = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRangeChangedEventArgs.prototype, "minimumValue", {
        /**
         * Gets the minimum value after the range changed. The reported minimum is the effective,
         * not the set value.
        *
        * The `minimumValue` property is used to getsthe minimum value after the range changed.
        */
        get: function () {
            return this.i.minimumValue;
        },
        set: function (v) {
            this.i.minimumValue = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRangeChangedEventArgs.prototype, "oldMaximumValue", {
        /**
         * Gets the maximum value before the range changed. The reported maximum is the effective,
         * not the set value.
        *
        * The `oldMaximumValue` property is used to gets the maximum value before the range changed.
        */
        get: function () {
            return this.i.oldMaximumValue;
        },
        set: function (v) {
            this.i.oldMaximumValue = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisRangeChangedEventArgs.prototype, "maximumValue", {
        /**
         * Gets the maximum value after the range changed. The reported maximum is the effective,
         * not the set value.
        *
        * The `maximumValue` property is used to gets the maximum value after the range changed.
        */
        get: function () {
            return this.i.maximumValue;
        },
        set: function (v) {
            this.i.maximumValue = +v;
        },
        enumerable: true,
        configurable: true
    });
    return AxisRangeChangedEventArgs;
}());
export { AxisRangeChangedEventArgs };
