import { LegendBase } from "./LegendBase";
import { IChartScaleLegend } from "igniteui-react-core/ES5/IChartScaleLegend";
import { UIElement } from "igniteui-react-core/ES5/UIElement";
import { TextBlock } from "igniteui-react-core/ES5/TextBlock";
import { IScaleLegendSeries } from "igniteui-react-core/ES5/IScaleLegendSeries";
import { LegendBaseView } from "./LegendBaseView";
import { Type } from "igniteui-react-core/ES5/type";
import { Color } from "igniteui-react-core/ES5/Color";
import { Brush } from "igniteui-react-core/ES5/Brush";
import { Shape } from "igniteui-react-core/ES5/Shape";
import { GradientData } from "./GradientData";
import { RenderingContext } from "igniteui-react-core/ES5/RenderingContext";
import { Size } from "igniteui-react-core/ES5/Size";
/**
 * @hidden
 */
export declare class ScaleLegend extends LegendBase implements IChartScaleLegend {
    static $t: Type;
    aj(): LegendBaseView;
    a6(a: LegendBaseView): void;
    bb: ScaleLegendView;
    readonly legendScaleElement: UIElement;
    readonly minText: TextBlock;
    readonly maxText: TextBlock;
    constructor();
    bd: number;
    bc: number;
    private a9;
    ba: IScaleLegendSeries;
    bg(): void;
    restoreOriginalState(): void;
    private bj;
    be(a: IScaleLegendSeries): void;
    initializeLegend(a: IScaleLegendSeries): void;
    protected get_isScale(): boolean;
    bf(): void;
}
/**
 * @hidden
 */
export declare class ScaleLegendView extends LegendBaseView {
    static $t: Type;
    constructor(a: ScaleLegend);
    an: ScaleLegend;
    a8: Shape;
    a4: TextBlock;
    a3: TextBlock;
    a0(): void;
    z(): void;
    a7(): Color;
    au(): any;
    aw(a: any, b: Color, c: number): void;
    a1(a: Shape, b: boolean, c: any): void;
    protected am: GradientData;
    protected ao: RenderingContext;
    protected a9: Size;
    ah(a: any): void;
    protected ap: boolean;
    protected ax(): void;
    a2(): void;
    private az;
    as(a: any): number;
    ar(a: any): number;
    protected aq: number;
    protected a6: Brush;
    private ay;
    a5: Brush;
    aj(): void;
}
