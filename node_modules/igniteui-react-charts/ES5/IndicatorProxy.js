/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { Base, typeCast, markType, getInstanceType } from "igniteui-react-core/ES5/type";
import { IIndicatorProxy_$type } from "./IIndicatorProxy";
import { IShortPeriodLongPeriod_$type } from "./IShortPeriodLongPeriod";
import { StrategyBasedIndicator } from "./StrategyBasedIndicator";
import { stringEndsWith } from "igniteui-react-core/ES5/string";
/**
 * @hidden
 */
var IndicatorProxy = /** @class */ (function (_super) {
    tslib_1.__extends(IndicatorProxy, _super);
    function IndicatorProxy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IndicatorProxy.prototype.matchesType = function (a) {
        if (stringEndsWith(getInstanceType(a).typeName, "Indicator")) {
            return true;
        }
        return false;
    };
    IndicatorProxy.prototype.setCloseMemberPath = function (a, b) {
        a.ob = b;
    };
    IndicatorProxy.prototype.setDisplayType = function (a, b) {
        a.pj = b;
    };
    IndicatorProxy.prototype.setHighMemberPath = function (a, b) {
        a.oe = b;
    };
    IndicatorProxy.prototype.setLongPeriod = function (a, b) {
        if (typeCast(IShortPeriodLongPeriod_$type, a) !== null) {
            a.longPeriod = b;
        }
    };
    IndicatorProxy.prototype.setLowMemberPath = function (a, b) {
        a.oj = b;
    };
    IndicatorProxy.prototype.setNegativeBrush = function (a, b) {
        a.pd = b;
    };
    IndicatorProxy.prototype.setOpenMemberPath = function (a, b) {
        a.on = b;
    };
    IndicatorProxy.prototype.setPeriodOverride = function (a, b) {
        if (typeCast(StrategyBasedIndicator.$, a) !== null) {
            a.qq(b);
        }
    };
    IndicatorProxy.prototype.setShortPeriod = function (a, b) {
        if (typeCast(IShortPeriodLongPeriod_$type, a) !== null) {
            a.shortPeriod = b;
        }
    };
    IndicatorProxy.prototype.setSignalPeriod = function (a, b) {
        if (getInstanceType(a).typeName == "MovingAverageConvergenceDivergenceIndicator") {
            var s_ = a;
            var p_ = b;
            s_['signalPeriod'] = p_;
        }
    };
    IndicatorProxy.prototype.setSmoothingPeriod = function (a, b) {
        if (getInstanceType(a).typeName == "FullStochasticOscillatorIndicator") {
            var s_ = a;
            var p_ = b;
            s_['smoothingPeriod'] = p_;
        }
    };
    IndicatorProxy.prototype.setVolumeMemberPath = function (a, b) {
        a.or = b;
    };
    IndicatorProxy.prototype.setXAxis = function (a, b) {
        a.l7 = b;
    };
    IndicatorProxy.prototype.setYAxis = function (a, b) {
        a.ms = b;
    };
    IndicatorProxy.prototype.handleCustomIndicatorEvent = function (a, b) {
        if (getInstanceType(a).typeName == "CustomIndicator") {
            var s_ = a;
            var p_ = b;
            s_['indicator'] = p_;
        }
    };
    IndicatorProxy.$t = markType(IndicatorProxy, 'IndicatorProxy', Base.$, [IIndicatorProxy_$type]);
    return IndicatorProxy;
}(Base));
export { IndicatorProxy };
