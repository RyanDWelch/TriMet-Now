import * as tslib_1 from "tslib";
import { IgrNumericAxisBase } from "./igr-numeric-axis-base";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
/**
 * Represents a IgxDataChartComponent radius axis for polar and radial series.
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}   >
*
*     <IgrCategoryAngleAxis name="angleAxis" label="Department" />
*     <IgrNumericRadiusAxis name="radiusAxis" />
*
* </IgrDataChart>
* ```
*/
var IgrNumericRadiusAxis = /** @class */ (function (_super) {
    tslib_1.__extends(IgrNumericRadiusAxis, _super);
    function IgrNumericRadiusAxis(props) {
        return _super.call(this, props) || this;
    }
    IgrNumericRadiusAxis.prototype.createImplementation = function () {
        return new NumericRadiusAxis();
    };
    Object.defineProperty(IgrNumericRadiusAxis.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericRadiusAxis.prototype, "isRadial", {
        /**
         * Checks if the axis is of radial axis type
        *
        * ```ts
        * let isRadial: boolean = this.series.isRadial;
        * ```
        */
        get: function () {
            return this.i.cb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericRadiusAxis.prototype, "radiusExtentScale", {
        /**
         * Defines the percentage of the maximum radius extent to use as the maximum radius. Should be
         * a value between 0.0 and 1.0.
        */
        get: function () {
            return this.i.ls;
        },
        set: function (v) {
            this.i.ls = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericRadiusAxis.prototype, "innerRadiusExtentScale", {
        /**
         * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be
         * a value between 0.0 and 1.0.
        */
        get: function () {
            return this.i.lr;
        },
        set: function (v) {
            this.i.lr = +v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns a world coordinates radius length (0 - 0.5) from a raw axis value.
    
    * @param unscaledValue  * The raw axis value.
    */
    IgrNumericRadiusAxis.prototype.getScaledValue = function (unscaledValue) {
        var iv = this.i.lo(unscaledValue);
        return (iv);
    };
    /**
     * Returns a raw axis value from the world coordinates radius length provided.
    
    * @param scaledValue  * The scaled world coordinates radius length.
    *
    * Class containing several properties which are used as parameters passed to scaling operations in a `IgrSeriesViewer`.
    */
    IgrNumericRadiusAxis.prototype.getUnscaledValue = function (scaledValue) {
        var iv = this.i.lq(scaledValue);
        return (iv);
    };
    return IgrNumericRadiusAxis;
}(IgrNumericAxisBase));
export { IgrNumericRadiusAxis };
