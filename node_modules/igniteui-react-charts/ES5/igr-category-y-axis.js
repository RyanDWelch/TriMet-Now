import * as tslib_1 from "tslib";
import { IgrCategoryAxisBase } from "./igr-category-axis-base";
import { CategoryYAxis } from "./CategoryYAxis";
import { toPoint, fromRect } from "igniteui-react-core/ES5/componentUtil";
/**
 * Represents a IgxDataChartComponent category Y axis.
*/
var IgrCategoryYAxis = /** @class */ (function (_super) {
    tslib_1.__extends(IgrCategoryYAxis, _super);
    function IgrCategoryYAxis(props) {
        return _super.call(this, props) || this;
    }
    IgrCategoryYAxis.prototype.createImplementation = function () {
        return new CategoryYAxis();
    };
    Object.defineProperty(IgrCategoryYAxis.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryYAxis.prototype, "isVertical", {
        /**
         * Gets if the current axis is a vertical axis.
        */
        get: function () {
            return this.i.ce;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryYAxis.prototype, "interval", {
        /**
         * Gets or sets the frequency of displayed labels.
         * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
        */
        get: function () {
            return this.i.k2;
        },
        set: function (v) {
            this.i.k2 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryYAxis.prototype, "actualInterval", {
        /**
         * Gets the effective value for the current Interval.
        */
        get: function () {
            return this.i.ky;
        },
        set: function (v) {
            this.i.ky = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryYAxis.prototype, "minorInterval", {
        /**
         * Gets or sets the frequency of displayed minor lines.
         * The set value is a factor that determines how the minor lines will be displayed.
        */
        get: function () {
            return this.i.k3;
        },
        set: function (v) {
            this.i.k3 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryYAxis.prototype, "actualMinorInterval", {
        /**
         * Gets the effective value for the current MinorInterval.
        */
        get: function () {
            return this.i.k0;
        },
        set: function (v) {
            this.i.k0 = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrCategoryYAxis.prototype.getCategoryBoundingBox = function (point, useInterpolation, singularWidth) {
        var iv = this.i.kt(toPoint(point), useInterpolation, singularWidth);
        return fromRect(iv);
    };
    IgrCategoryYAxis.prototype.scrollRangeIntoView = function (minimum, maximum) {
        this.i.ld(minimum, maximum);
    };
    /**
     * Scrolls the specified item into view.
    
    * @param item  * Data item to scroll into view
    */
    IgrCategoryYAxis.prototype.scrollIntoView = function (item) {
        this.i.lc(item);
    };
    return IgrCategoryYAxis;
}(IgrCategoryAxisBase));
export { IgrCategoryYAxis };
