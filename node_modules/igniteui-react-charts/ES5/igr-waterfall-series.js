import * as tslib_1 from "tslib";
import { IgrHorizontalAnchoredCategorySeries } from "./igr-horizontal-anchored-category-series";
import { WaterfallSeries } from "./WaterfallSeries";
import { brushToString, stringToBrush, toPoint, fromRect } from "igniteui-react-core/ES5/componentUtil";
/**
 * Represents a IgxDataChartComponent waterfall column series.
*
* `IgrWaterfallSeries` belongs to a group of `IgrCategorySeries` and it is rendered using a collection of vertical columns that show the difference between consecutive data points.
*
* ```ts
*  <IgrDataChart
*     dataSource={this.state.dataSource} >
*
*     <IgrCategoryXAxis name="xAxis" />
*     <IgrNumericYAxis name="yAxis" />
*
*     <IgrWaterfallSeries
*      name="series1"
*     xAxisName="xAxis"
* 	yAxisName="yAxis"
* 	valueMemberPath="Value"/>
*  </IgrDataChart>
* ```
*/
var IgrWaterfallSeries = /** @class */ (function (_super) {
    tslib_1.__extends(IgrWaterfallSeries, _super);
    function IgrWaterfallSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrWaterfallSeries.prototype.createImplementation = function () {
        return new WaterfallSeries();
    };
    Object.defineProperty(IgrWaterfallSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrWaterfallSeries.prototype, "isNegativeColorSupported", {
        /**
         * Overridden by derived series classes to indicate when negative colors are supported or not.
        */
        get: function () {
            return this.i.cz;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrWaterfallSeries.prototype, "negativeBrush", {
        /**
         * Gets or sets the brush to use for negative portions of the series.
        *
        * Gets or sets the color used to draw negative declines in values for this `IgrWaterfallSeries`.
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource} >
        *
        *     <IgrCategoryXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrWaterfallSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	negativeBrush="#ff0000"
        * 	valueMemberPath="Value"/>
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return brushToString(this.i.qr);
        },
        set: function (v) {
            this.i.qr = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrWaterfallSeries.prototype, "radiusX", {
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
        *
        * Gets or sets the amount to round corners in the direction of the X axis in this series.
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource} >
        *
        *     <IgrCategoryXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrWaterfallSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	radiusX="15"
        *     radiusY="15"
        * 	valueMemberPath="Value"/>
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.qh;
        },
        set: function (v) {
            this.i.qh = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrWaterfallSeries.prototype, "radiusY", {
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
        *
        * Gets or sets the amount to round corners in the direction of the Y axis in this series.
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource} >
        *
        *     <IgrCategoryXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrWaterfallSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	radiusX="15"
        *     radiusY="15"
        * 	valueMemberPath="Value"/>
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.qi;
        },
        set: function (v) {
            this.i.qi = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrWaterfallSeries.prototype, "negativeOutline", {
        /**
         * Brush to use for outlining negative elements in the waterfall series.
        *
        * Gets or sets the color used to draw borders of negative declines in values for this `IgrWaterfallSeries`.
        *
        * ```ts
        *  <IgrDataChart
        *     dataSource={this.state.dataSource} >
        *
        *     <IgrCategoryXAxis name="xAxis" />
        *     <IgrNumericYAxis name="yAxis" />
        *
        *     <IgrWaterfallSeries
        *      name="series1"
        *     xAxisName="xAxis"
        * 	yAxisName="yAxis"
        * 	negativeOutline="#ff0000"
        * 	valueMemberPath="Value"/>
        *  </IgrDataChart>
        * ```
        */
        get: function () {
            return brushToString(this.i.qs);
        },
        set: function (v) {
            this.i.qs = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    IgrWaterfallSeries.prototype.setNegativeColors = function (negativeBrush, negativeOutline) {
        this.i.jh(stringToBrush(negativeBrush), stringToBrush(negativeOutline));
    };
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    *
    * Returns a bounding box `Rect` for a data value given a `Point`.
    */
    IgrWaterfallSeries.prototype.getSeriesValueBoundingBox = function (world) {
        var iv = this.i.lt(toPoint(world));
        return fromRect(iv);
    };
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    *
    * Returns the width of items in the `IgrWaterfallSeries`.
    *
    * ```ts
    * let itemSpan: number = series.GetItemSpan();
    * ```
    */
    IgrWaterfallSeries.prototype.getItemSpan = function () {
        var iv = this.i.eg();
        return (iv);
    };
    return IgrWaterfallSeries;
}(IgrHorizontalAnchoredCategorySeries));
export { IgrWaterfallSeries };
