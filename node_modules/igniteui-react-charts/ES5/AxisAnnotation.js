/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { DependencyObject } from "igniteui-react-core/ES5/DependencyObject";
import { INotifyPropertyChanged_$type, PropertyChangedEventArgs, Type, markType } from "igniteui-react-core/ES5/type";
import { IAxisAnnotation_$type } from "./IAxisAnnotation";
import { DependencyProperty } from "igniteui-react-core/ES5/DependencyProperty";
import { Brush } from "igniteui-react-core/ES5/Brush";
import { Thickness } from "igniteui-react-core/ES5/Thickness";
import { PropertyMetadata } from "igniteui-react-core/ES5/PropertyMetadata";
/**
 * @hidden
 */
var AxisAnnotation = /** @class */ (function (_super) {
    tslib_1.__extends(AxisAnnotation, _super);
    function AxisAnnotation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.propertyChanged = null;
        _this.k = false;
        _this._formatLabel = null;
        _this.j = false;
        return _this;
    }
    AxisAnnotation.prototype.resetCachedExtent = function () {
        this.k = true;
    };
    AxisAnnotation.prototype.checkForExtentReset = function (a) {
        if (this.k) {
            this.k = false;
            a();
        }
    };
    AxisAnnotation.prototype.aa = function (a, b, c) {
        this.z(a, b, c);
        if (this.propertyChanged != null) {
            this.propertyChanged(this, new PropertyChangedEventArgs(a));
        }
    };
    AxisAnnotation.prototype.z = function (a, b, c) {
        this.j = true;
    };
    AxisAnnotation.prototype.resolveLabelValue = function () {
        if (this.text != null) {
            return this.text;
        }
        if (this.formatLabel != null) {
            return this.formatLabel(this.value);
        }
        if (this.value == null) {
            return null;
        }
        return this.value.toString();
    };
    Object.defineProperty(AxisAnnotation.prototype, "formatLabel", {
        get: function () {
            return this._formatLabel;
        },
        set: function (a) {
            this._formatLabel = a;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AxisAnnotation.prototype, "backgroundPadding", {
        get: function () {
            return new Thickness(1, this.backgroundPaddingLeft, this.backgroundPaddingTop, this.backgroundPaddingRight, this.backgroundPaddingBottom);
        },
        set: function (a) {
            this.backgroundPaddingLeft = a.c;
            this.backgroundPaddingTop = a.e;
            this.backgroundPaddingRight = a.d;
            this.backgroundPaddingBottom = a.b;
        },
        enumerable: true,
        configurable: true
    });
    AxisAnnotation.$t = markType(AxisAnnotation, 'AxisAnnotation', DependencyObject.$, [INotifyPropertyChanged_$type, IAxisAnnotation_$type]);
    return AxisAnnotation;
}(DependencyObject));
export { AxisAnnotation };
Type.dep(DependencyProperty, PropertyMetadata, AxisAnnotation, 'aa', ['BackgroundPaddingBottom', [1, NaN], 'BackgroundPaddingLeft', [1, NaN], 'BackgroundPaddingRight', [1, NaN], 'BackgroundPaddingTop', [1, NaN], 'Background', [Brush.$, null], 'Outline', [Brush.$, null], 'StrokeThickness', [1, 0], 'TextColor', [Brush.$, null], 'Text', [2, null], 'Value', [4, null]]);
