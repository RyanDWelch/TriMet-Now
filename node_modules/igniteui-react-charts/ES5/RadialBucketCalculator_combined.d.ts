import { Base, Type, Point } from "igniteui-react-core/ES5/type";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core/ES5/IFastItemColumn$1";
import { Rect } from "igniteui-react-core/ES5/Rect";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { RadialFrame } from "./RadialFrame";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-react-core/ES5/List$1";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { RadialAxes } from "./RadialAxes";
import { Pool$1 } from "igniteui-react-core/ES5/Pool$1";
/**
 * @hidden
 */
export declare abstract class RadialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: RadialBaseView;
    constructor(a: RadialBaseView);
    c: number;
    d: number;
    b: number;
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class RadialBase extends MarkerSeries implements IHasCategoryModePreference {
    static $t: Type;
    it(a: SeriesView): void;
    m3: RadialBaseView;
    constructor();
    private ni;
    readonly categoryAxis: CategoryAxisBase;
    ap(): CategoryAxisBase;
    nb(a: List$1<SeriesPointOfInterest>): boolean;
    m7: SeriesRenderer$2<RadialFrame, RadialBaseView>;
    protected get_c2(): boolean;
    mz: CategoryAngleAxis;
    m1: NumericRadiusAxis;
    ag(): Axis[];
    na: boolean;
    protected js(a: Rect, b: Rect): void;
    protected jr(a: Rect, b: Rect): void;
    abstract preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected iy(a: any, b: string, c: any, d: any): void;
    m9(a: any): boolean;
    m8(a: any): boolean;
    fp(a: Point): any;
    nc(a: Point): number;
    nd(a: Point): number;
    e8(a: Point): number;
    c9(a: any): boolean;
    m5: RadialFrame;
    m6: RadialFrame;
    m4: RadialFrame;
    abstract getOffsetValue(): number;
    abstract getCategoryWidth(): number;
    abstract nj(a: RadialFrame, b: RadialBaseView): void;
    abstract nk(a: RadialFrame, b: RadialBaseView): void;
    m2: RadialAxes;
    ia(): void;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    jd(a: boolean): void;
    ne(): number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class RadialBaseView extends MarkerSeriesView {
    static $t: Type;
    co: RadialBucketCalculator;
    cn: RadialBase;
    constructor(a: RadialBase);
    cp: Pool$1<Marker>;
    cc(a: (arg1: Marker) => void): void;
    cq: number;
    cr: Point;
}
