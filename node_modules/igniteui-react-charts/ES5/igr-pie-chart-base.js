import * as tslib_1 from "tslib";
import * as React from 'react';
import { delegateCombine, delegateRemove } from "igniteui-react-core/ES5/type";
import { LabelsPosition_$type } from "./LabelsPosition";
import { Visibility_$type } from "igniteui-react-core/ES5/Visibility";
import { LeaderLineType_$type } from "./LeaderLineType";
import { OthersCategoryType_$type } from "./OthersCategoryType";
import { IndexCollection } from "./igr-index-collection";
import { SweepDirection_$type } from "igniteui-react-core/ES5/SweepDirection";
import { SliceSelectionMode_$type } from "./SliceSelectionMode";
import { ObjectCollection } from "igniteui-react-core/ES5/igr-object-collection";
import { LabelClickEventArgs } from "./igr-label-click-event-args";
import { SelectedItemChangingEventArgs } from "./igr-selected-item-changing-event-args";
import { SelectedItemsChangingEventArgs } from "./igr-selected-items-changing-event-args";
import { SelectedItemChangedEventArgs } from "./igr-selected-item-changed-event-args";
import { SelectedItemsChangedEventArgs } from "./igr-selected-items-changed-event-args";
import { SliceClickEventArgs } from "./igr-slice-click-event-args";
import { TypeRegistrar, Number_$type, Base } from "igniteui-react-core/ES5/type";
import { NamePatcher, getModifiedProps, isValidProp, ensureEnum, brushToString, stringToBrush, ensureBool, toBrushCollection, fromBrushCollection, toSpinal, initializePropertiesFromCss, toPoint } from "igniteui-react-core/ES5/componentUtil";
import { IndexCollection as IndexCollection_internal } from "./IndexCollection";
import { SyncableObservableCollection$1 } from "igniteui-react-core/ES5/SyncableObservableCollection$1";
import { Style } from "igniteui-react-core/ES5/Style";
import { ObjectCollection as ObjectCollection_internal } from "igniteui-react-core/ES5/ObjectCollection";
/**
 * Represents the base class for the pie chart.
*/
var IgrPieChartBase = /** @class */ (function (_super) {
    tslib_1.__extends(IgrPieChartBase, _super);
    function IgrPieChartBase(props) {
        var _this = _super.call(this, props) || this;
        _this._explodedSlices = null;
        _this._selectedItems = null;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._labelClick = null;
        _this._labelClick_wrapped = null;
        _this._selectedItemChanging = null;
        _this._selectedItemChanging_wrapped = null;
        _this._selectedItemsChanging = null;
        _this._selectedItemsChanging_wrapped = null;
        _this._selectedItemChanged = null;
        _this._selectedItemChanged_wrapped = null;
        _this._selectedItemsChanged = null;
        _this._selectedItemsChanged_wrapped = null;
        _this._sliceClick = null;
        _this._sliceClick_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        return _this;
    }
    IgrPieChartBase.prototype.createImplementation = function () {
        return null;
    };
    Object.defineProperty(IgrPieChartBase.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: true,
        configurable: true
    });
    IgrPieChartBase._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igr" + name;
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgrPieChartBase.prototype.onImplementationCreated = function () {
    };
    IgrPieChartBase.prototype.componentDidMount = function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = this.props[p];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    IgrPieChartBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        var e_2, _a;
        var mod = getModifiedProps(this.props, nextProps);
        try {
            for (var _b = tslib_1.__values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var p = _c.value;
                if (isValidProp(this, p)) {
                    this[p] = mod[p];
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return true;
    };
    IgrPieChartBase.prototype.render = function () {
        return null;
    };
    Object.defineProperty(IgrPieChartBase.prototype, "innerExtent", {
        /**
         * Gets or sets the amount of space between the center and the start of the arc. This property should be set between 0 and 1.
         * If InnerExtent is set to a value greater than 1, it will be interpreted as a percentage, effectively divided by 100.
        */
        get: function () {
            return this.i.cl;
        },
        set: function (v) {
            this.i.cl = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "valueMemberPath", {
        /**
         * Gets or Sets the property name that contains the values.
        */
        get: function () {
            return this.i.eg;
        },
        set: function (v) {
            this.i.eg = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "labelMemberPath", {
        /**
         * Gets or sets the property name that contains the labels.
        */
        get: function () {
            return this.i.di;
        },
        set: function (v) {
            this.i.di = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "legendLabelMemberPath", {
        /**
         * Gets or sets the property name that contains the legend labels.
        */
        get: function () {
            return this.i.dv;
        },
        set: function (v) {
            this.i.dv = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "labelsPosition", {
        /**
         * Gets or sets the position of chart labels.
        */
        get: function () {
            return this.i.ao;
        },
        set: function (v) {
            this.i.ao = ensureEnum(LabelsPosition_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "labelOuterColor", {
        /**
         * Gets or sets the color for labels rendered outside of the pie chart.
        */
        get: function () {
            return brushToString(this.i.gw);
        },
        set: function (v) {
            this.i.gw = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "labelInnerColor", {
        /**
         * Gets or sets the color for labels rendered inside of the pie chart.
        */
        get: function () {
            return brushToString(this.i.gv);
        },
        set: function (v) {
            this.i.gv = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "leaderLineVisibility", {
        /**
         * Gets or sets whether the leader lines are visible.
        */
        get: function () {
            return this.i.g8;
        },
        set: function (v) {
            this.i.g8 = ensureEnum(Visibility_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "leaderLineType", {
        /**
         * Gets or sets what type of leader lines will be used for the outside end labels.
        */
        get: function () {
            return this.i.ap;
        },
        set: function (v) {
            this.i.ap = ensureEnum(LeaderLineType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "leaderLineMargin", {
        /**
         * Gets or sets the margin between a label and the end of its leader line. The default is 6 pixels.
        */
        get: function () {
            return this.i.cn;
        },
        set: function (v) {
            this.i.cn = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "toolTip", {
        /**
         * Gets or sets the ToolTip for the chart.
        */
        get: function () {
            return this.i.c0;
        },
        set: function (v) {
            this.i.c0 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "othersCategoryThreshold", {
        /**
         * Gets or sets the threshold value that determines if slices are grouped into the Others slice.
        */
        get: function () {
            return this.i.co;
        },
        set: function (v) {
            this.i.co = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "othersCategoryType", {
        /**
         * Gets or sets whether to use numeric or percent-based threshold value.
        */
        get: function () {
            return this.i.aq;
        },
        set: function (v) {
            this.i.aq = ensureEnum(OthersCategoryType_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "othersCategoryText", {
        /**
         * Gets or sets the label of the Others slice.
        */
        get: function () {
            return this.i.dz;
        },
        set: function (v) {
            this.i.dz = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "explodedRadius", {
        /**
         * Determines how much the exploded slice is offset from the center. Value between 0 and 1.
        */
        get: function () {
            return this.i.cg;
        },
        set: function (v) {
            this.i.cg = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "radiusFactor", {
        /**
         * Gets or sets the scaling factor of the chart's radius. Value between 0 and 1.
        */
        get: function () {
            return this.i.cr;
        },
        set: function (v) {
            this.i.cr = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "allowSliceSelection", {
        /**
         * Gets or sets whether the slices can be selected.
        */
        get: function () {
            return this.i.bq;
        },
        set: function (v) {
            this.i.bq = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "allowSliceExplosion", {
        /**
         * Gets or sets whether the slices can be exploded.
        */
        get: function () {
            return this.i.bp;
        },
        set: function (v) {
            this.i.bp = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "explodedSlices", {
        /**
         * Gets or sets the collection of exploded slice indices.
        */
        get: function () {
            if (this._explodedSlices === null) {
                var coll = new IndexCollection();
                var innerColl = this.i.explodedSlices;
                if (!innerColl) {
                    innerColl = new IndexCollection_internal();
                }
                this._explodedSlices = coll._fromInner(innerColl);
                this.i.explodedSlices = innerColl;
            }
            return this._explodedSlices;
        },
        set: function (v) {
            if (this._explodedSlices !== null) {
                this._explodedSlices._setSyncTarget(null);
                this._explodedSlices = null;
            }
            var coll = new IndexCollection();
            this._explodedSlices = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(Number_$type);
            var innerColl = this.i.explodedSlices;
            if (!innerColl) {
                innerColl = new IndexCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._explodedSlices._setSyncTarget(syncColl);
            this.i.explodedSlices = innerColl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "labelExtent", {
        /**
         * Gets or sets the pixel amount by which the labels are offset from the edge of the slices.
        */
        get: function () {
            return this.i.cm;
        },
        set: function (v) {
            this.i.cm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "startAngle", {
        /**
         * Gets or sets the starting angle of the chart.
         * The default zero value is equivalent to 3 o'clock.
        */
        get: function () {
            return this.i.ct;
        },
        set: function (v) {
            this.i.ct = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "sweepDirection", {
        /**
         * Gets or sets the rotational direction of the chart.
        */
        get: function () {
            return this.i.gx;
        },
        set: function (v) {
            this.i.gx = ensureEnum(SweepDirection_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "othersCategoryFill", {
        /**
         * Gets or sets the fill brush.
        */
        get: function () {
            return this.i.g5 ? this.i.g5.fill : null;
        },
        set: function (v) {
            this.ensureOthersCategoryStyle();
            this.i.g5.fill = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "othersCategoryStroke", {
        /**
         * Gets or sets the stroke brush.
        */
        get: function () {
            return this.i.g5 ? this.i.g5.stroke : null;
        },
        set: function (v) {
            this.ensureOthersCategoryStyle();
            this.i.g5.stroke = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "othersCategoryStrokeThickness", {
        /**
         * Gets or sets the stroke thickness.
        */
        get: function () {
            return this.i.g5 ? this.i.g5.strokeThickness : NaN;
        },
        set: function (v) {
            this.ensureOthersCategoryStyle();
            this.i.g5.strokeThickness = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "othersCategoryOpacity", {
        /**
         * Gets or sets the opacity.
        */
        get: function () {
            return this.i.g5 ? this.i.g5.opacity : NaN;
        },
        set: function (v) {
            this.ensureOthersCategoryStyle();
            this.i.g5.opacity = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrPieChartBase.prototype.ensureOthersCategoryStyle = function () {
        if (this.i.g5) {
            return;
        }
        this.i.g5 = new Style();
    };
    Object.defineProperty(IgrPieChartBase.prototype, "selectedSliceFill", {
        /**
         * Gets or sets the fill brush.
        */
        get: function () {
            return this.i.g6 ? this.i.g6.fill : null;
        },
        set: function (v) {
            this.ensureSelectedStyle();
            this.i.g6.fill = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "selectedSliceStroke", {
        /**
         * Gets or sets the stroke brush.
        */
        get: function () {
            return this.i.g6 ? this.i.g6.stroke : null;
        },
        set: function (v) {
            this.ensureSelectedStyle();
            this.i.g6.stroke = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "selectedSliceStrokeThickness", {
        /**
         * Gets or sets the stroke thickness.
        */
        get: function () {
            return this.i.g6 ? this.i.g6.strokeThickness : NaN;
        },
        set: function (v) {
            this.ensureSelectedStyle();
            this.i.g6.strokeThickness = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "selectedSliceOpacity", {
        /**
         * Gets or sets the opacity.
        */
        get: function () {
            return this.i.g6 ? this.i.g6.opacity : NaN;
        },
        set: function (v) {
            this.ensureSelectedStyle();
            this.i.g6.opacity = +v;
        },
        enumerable: true,
        configurable: true
    });
    IgrPieChartBase.prototype.ensureSelectedStyle = function () {
        if (this.i.g6) {
            return;
        }
        this.i.g6 = new Style();
    };
    Object.defineProperty(IgrPieChartBase.prototype, "brushes", {
        /**
         * Gets or sets the palette of brushes to use for coloring the slices.
        */
        get: function () {
            return fromBrushCollection(this.i.ag);
        },
        set: function (v) {
            this.i.ag = toBrushCollection(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "outlines", {
        /**
         * Gets or sets the palette of brushes to use for outlines on the slices.
        */
        get: function () {
            return fromBrushCollection(this.i.ah);
        },
        set: function (v) {
            this.i.ah = toBrushCollection(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "legendItemTemplate", {
        /**
         * Gets or sets the LegendItemTemplate property.
         * The legend item control content is created according to the LegendItemTemplate on-demand by
         * the chart object itself.
        */
        get: function () {
            return this.i.legendItemTemplate;
        },
        set: function (v) {
            this.i.legendItemTemplate = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "legendItemBadgeTemplate", {
        /**
         * Gets or sets the LegendItemBadgeTemplate property.
         * The legend item badge is created according to the LegendItemBadgeTemplate on-demand by
         * the chart object itself.
        */
        get: function () {
            return this.i.legendItemBadgeTemplate;
        },
        set: function (v) {
            this.i.legendItemBadgeTemplate = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "isSurfaceInteractionDisabled", {
        /**
         * Gets or sets whether all surface interactions with the plot area should be disabled.
        */
        get: function () {
            return this.i.bv;
        },
        set: function (v) {
            this.i.bv = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "formatLabel", {
        /**
         * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
        */
        get: function () {
            return this.i.at;
        },
        set: function (v) {
            this.i.at = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "formatLegendLabel", {
        /**
         * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart's legend.
        */
        get: function () {
            return this.i.au;
        },
        set: function (v) {
            this.i.au = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "pixelScalingRatio", {
        /**
         * Gets or sets the scaling value used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
         * to appear blurry.
        */
        get: function () {
            return this.i.cq;
        },
        set: function (v) {
            this.i.cq = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "actualPixelScalingRatio", {
        /**
         * Resolved pixel scaling ratio. Unless explicitly overridden by the PieChartBase.PixelScalingRatio property,
         * this one returns the default ratio enforced by device. High resolution devices will initialize this property
         * to a higher value.
        */
        get: function () {
            return this.i.cd;
        },
        set: function (v) {
            this.i.cd = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "selectionMode", {
        /**
         * Gets or sets which mode to use for selecting slices.
        */
        get: function () {
            return this.i.a3;
        },
        set: function (v) {
            this.i.a3 = ensureEnum(SliceSelectionMode_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "selectedItem", {
        /**
         * Gets or sets the currently selected data item.  If a different data item is provided the pie chart
         * will select the slice associated with the new item.
        */
        get: function () {
            return this.i.selectedItem;
        },
        set: function (v) {
            this.i.selectedItem = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "selectedItems", {
        /**
         * Gets the currently selected data items.  Adding or removing data items from this collection will
         * select or deselect the slices associated with those items.
        */
        get: function () {
            if (this._selectedItems === null) {
                var coll = new ObjectCollection();
                var innerColl = this.i.selectedItems;
                if (!innerColl) {
                    innerColl = new ObjectCollection_internal(0);
                }
                this._selectedItems = coll._fromInner(innerColl);
                this.i.selectedItems = innerColl;
            }
            return this._selectedItems;
        },
        set: function (v) {
            if (this._selectedItems !== null) {
                this._selectedItems._setSyncTarget(null);
                this._selectedItems = null;
            }
            var coll = new ObjectCollection();
            this._selectedItems = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(Base.$type);
            var innerColl = this.i.selectedItems;
            if (!innerColl) {
                innerColl = new ObjectCollection_internal(0);
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._selectedItems._setSyncTarget(syncColl);
            this.i.selectedItems = innerColl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "textStyle", {
        /**
         * Manually overrides the style to use for the labels.
        */
        get: function () {
            return this.i.eb;
        },
        set: function (v) {
            this.i.eb = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgrPieChartBase.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgrPieChartBase.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("PieChartBase");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
     * Returns the chart visuals expressed as a serialized string.
    
    */
    IgrPieChartBase.prototype.exportSerializedVisualData = function () {
        var iv = this.i.c8();
        return (iv);
    };
    /**
     * Simulates a mouse click action at the specified point.
    
    * @param point  * The point to click at.
    */
    IgrPieChartBase.prototype.simulateLeftClick = function (point) {
        this.i.fl(toPoint(point));
    };
    /**
     * Invoked by the containing object to provide reference to the container.
    
    * @param container  * Reference to the container.
    */
    IgrPieChartBase.prototype.provideContainer = function (container) {
        this.i.provideContainer(container);
    };
    /**
     * Notification from the containing object that the container has been resized.
    
    */
    IgrPieChartBase.prototype.notifyContainerResized = function () {
        this.i.notifyContainerResized();
    };
    /**
     * Invoked when the instance is being destroyed.
    
    */
    IgrPieChartBase.prototype.destroy = function () {
        this.i.destroy();
    };
    /**
     * Use to force the pie chart to finish any deferred work before printing or evaluating its visual.
     * This should only be called if the visual of the pie chart needs to be synchronously saved or evaluated.
     * Calling this method too often will hinder the performance of the pie chart.
    
    */
    IgrPieChartBase.prototype.flush = function () {
        this.i.el();
    };
    IgrPieChartBase.prototype.notifySetItem = function (source_, index, oldItem, newItem) {
        this.i.eu(source_, index, oldItem, newItem);
    };
    /**
     * Manually notifies the pie chart's data source that the data it has bound to has been cleared and needs to be re-examined.
     * This should not be called if the data that the pie chart is bound to is already observable.
    
    * @param source_  * The data source.
    */
    IgrPieChartBase.prototype.notifyClearItems = function (source_) {
        this.i.eq(source_);
    };
    IgrPieChartBase.prototype.notifyInsertItem = function (source_, index, newItem) {
        this.i.es(source_, index, newItem);
    };
    IgrPieChartBase.prototype.notifyRemoveItem = function (source_, index, oldItem) {
        this.i.et(source_, index, oldItem);
    };
    /**
     * Assigns data source for the items.
    
    * @param source_  * Array of the data source items.
    */
    IgrPieChartBase.prototype.setWidgetLevelDataSource = function (source_) {
        this.i.fk(source_);
    };
    /**
     * Resets items data source.
    
    */
    IgrPieChartBase.prototype.removeWidgetLevelDataSource = function () {
        this.i.fb();
    };
    /**
     * Invoked when style is updated.
    
    */
    IgrPieChartBase.prototype.styleUpdated = function () {
        this.i.fp();
    };
    Object.defineProperty(IgrPieChartBase.prototype, "labelClick", {
        /**
         * Raised when the slice's label is clicked.
        */
        get: function () {
            return this._labelClick;
        },
        set: function (ev) {
            var _this = this;
            if (this._labelClick_wrapped !== null) {
                this.i.labelClick = delegateRemove(this.i.labelClick, this._labelClick_wrapped);
                this._labelClick_wrapped = null;
                this._labelClick = null;
            }
            this._labelClick = ev;
            this._labelClick_wrapped = function (o, e) {
                var outerArgs = new LabelClickEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeLabelClick) {
                    _this.beforeLabelClick(_this, outerArgs);
                }
                if (_this._labelClick) {
                    _this._labelClick(_this, outerArgs);
                }
            };
            this.i.labelClick = delegateCombine(this.i.labelClick, this._labelClick_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "selectedItemChanging", {
        /**
         * Raised when the SelectedItem property is changing.  This event is cancelable.
        */
        get: function () {
            return this._selectedItemChanging;
        },
        set: function (ev) {
            var _this = this;
            if (this._selectedItemChanging_wrapped !== null) {
                this.i.selectedItemChanging = delegateRemove(this.i.selectedItemChanging, this._selectedItemChanging_wrapped);
                this._selectedItemChanging_wrapped = null;
                this._selectedItemChanging = null;
            }
            this._selectedItemChanging = ev;
            this._selectedItemChanging_wrapped = function (o, e) {
                var outerArgs = new SelectedItemChangingEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSelectedItemChanging) {
                    _this.beforeSelectedItemChanging(_this, outerArgs);
                }
                if (_this._selectedItemChanging) {
                    _this._selectedItemChanging(_this, outerArgs);
                }
            };
            this.i.selectedItemChanging = delegateCombine(this.i.selectedItemChanging, this._selectedItemChanging_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "selectedItemsChanging", {
        /**
         * Raised when the SelectedItems collection is changing.  This event is cancelable.
        */
        get: function () {
            return this._selectedItemsChanging;
        },
        set: function (ev) {
            var _this = this;
            if (this._selectedItemsChanging_wrapped !== null) {
                this.i.selectedItemsChanging = delegateRemove(this.i.selectedItemsChanging, this._selectedItemsChanging_wrapped);
                this._selectedItemsChanging_wrapped = null;
                this._selectedItemsChanging = null;
            }
            this._selectedItemsChanging = ev;
            this._selectedItemsChanging_wrapped = function (o, e) {
                var outerArgs = new SelectedItemsChangingEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSelectedItemsChanging) {
                    _this.beforeSelectedItemsChanging(_this, outerArgs);
                }
                if (_this._selectedItemsChanging) {
                    _this._selectedItemsChanging(_this, outerArgs);
                }
            };
            this.i.selectedItemsChanging = delegateCombine(this.i.selectedItemsChanging, this._selectedItemsChanging_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "selectedItemChanged", {
        /**
         * Raised when the SelectedItem property has changed.
        */
        get: function () {
            return this._selectedItemChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._selectedItemChanged_wrapped !== null) {
                this.i.selectedItemChanged = delegateRemove(this.i.selectedItemChanged, this._selectedItemChanged_wrapped);
                this._selectedItemChanged_wrapped = null;
                this._selectedItemChanged = null;
            }
            this._selectedItemChanged = ev;
            this._selectedItemChanged_wrapped = function (o, e) {
                var outerArgs = new SelectedItemChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSelectedItemChanged) {
                    _this.beforeSelectedItemChanged(_this, outerArgs);
                }
                if (_this._selectedItemChanged) {
                    _this._selectedItemChanged(_this, outerArgs);
                }
            };
            this.i.selectedItemChanged = delegateCombine(this.i.selectedItemChanged, this._selectedItemChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "selectedItemsChanged", {
        /**
         * Raised when the SelectedItems collection has changed.
        */
        get: function () {
            return this._selectedItemsChanged;
        },
        set: function (ev) {
            var _this = this;
            if (this._selectedItemsChanged_wrapped !== null) {
                this.i.selectedItemsChanged = delegateRemove(this.i.selectedItemsChanged, this._selectedItemsChanged_wrapped);
                this._selectedItemsChanged_wrapped = null;
                this._selectedItemsChanged = null;
            }
            this._selectedItemsChanged = ev;
            this._selectedItemsChanged_wrapped = function (o, e) {
                var outerArgs = new SelectedItemsChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSelectedItemsChanged) {
                    _this.beforeSelectedItemsChanged(_this, outerArgs);
                }
                if (_this._selectedItemsChanged) {
                    _this._selectedItemsChanged(_this, outerArgs);
                }
            };
            this.i.selectedItemsChanged = delegateCombine(this.i.selectedItemsChanged, this._selectedItemsChanged_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrPieChartBase.prototype, "sliceClick", {
        /**
         * Raised when the slice is clicked.
        */
        get: function () {
            return this._sliceClick;
        },
        set: function (ev) {
            var _this = this;
            if (this._sliceClick_wrapped !== null) {
                this.i.sliceClick = delegateRemove(this.i.sliceClick, this._sliceClick_wrapped);
                this._sliceClick_wrapped = null;
                this._sliceClick = null;
            }
            this._sliceClick = ev;
            this._sliceClick_wrapped = function (o, e) {
                var outerArgs = new SliceClickEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeSliceClick) {
                    _this.beforeSliceClick(_this, outerArgs);
                }
                if (_this._sliceClick) {
                    _this._sliceClick(_this, outerArgs);
                }
            };
            this.i.sliceClick = delegateCombine(this.i.sliceClick, this._sliceClick_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    return IgrPieChartBase;
}(React.Component));
export { IgrPieChartBase };
