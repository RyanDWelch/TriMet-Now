import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core/ES5/DependencyProperty";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemColumn$1 } from "igniteui-react-core/ES5/IFastItemColumn$1";
import { TrendLineType } from "igniteui-react-core/ES5/TrendLineType";
import { Brush } from "igniteui-react-core/ES5/Brush";
import { PenLineCap } from "igniteui-react-core/ES5/PenLineCap";
import { DoubleCollection } from "igniteui-react-core/ES5/DoubleCollection";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { Axis } from "./Axis";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { ScatterFrame } from "./ScatterFrame";
import { SeriesView } from "./SeriesView";
import { Point, Type } from "igniteui-react-core/ES5/type";
import { List$1 } from "igniteui-react-core/ES5/List$1";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Rect } from "igniteui-react-core/ES5/Rect";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { FastItemsSourceEventAction } from "igniteui-react-core/ES5/FastItemsSourceEventAction";
import { Clipper } from "igniteui-react-core/ES5/Clipper";
import { OwnedPoint } from "./OwnedPoint";
import { AxisRange } from "./AxisRange";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { IErrorBarCalculator } from "igniteui-react-core/ES5/IErrorBarCalculator";
import { PathGeometry } from "igniteui-react-core/ES5/PathGeometry";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core/ES5/IDictionary$2";
import { HashPool$2 } from "igniteui-react-core/ES5/HashPool$2";
import { Size } from "igniteui-react-core/ES5/Size";
import { RenderingContext } from "igniteui-react-core/ES5/RenderingContext";
/**
 * @hidden
 */
export declare abstract class ScatterBase extends MarkerSeries implements ISupportsErrorBars, ITrendLineSeries {
    static $t: Type;
    protected bf(): SeriesView;
    ht(): void;
    it(a: SeriesView): void;
    m4: ScatterBaseView;
    protected get_c4(): boolean;
    ag(): Axis[];
    fs(a: any, b: string): any;
    ch(a: List$1<SeriesPointOfInterest>, b: boolean, c: number): boolean;
    protected bd(): SeriesHitTestMode;
    lv(a: Point): Rect;
    dh(a: Point, b: boolean): boolean;
    constructor();
    m3: ScatterAxisInfoCache;
    xAxis: NumericXAxis;
    yAxis: NumericYAxis;
    nq: string;
    nc: IFastItemColumn$1<number>;
    private nb;
    nu: string;
    ne: IFastItemColumn$1<number>;
    private nd;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    or: Brush;
    static readonly oc: DependencyProperty;
    trendLineThickness: number;
    ot: PenLineCap;
    os: DoubleCollection;
    trendLinePeriod: number;
    m0: CollisionAvoidanceType;
    readonly GetErrorBarsXAxis: Axis;
    readonly GetErrorBarsYAxis: Axis;
    nk: number;
    nj: number;
    ia(): void;
    m5: ScatterErrorBarSettings;
    protected iy(a: any, b: string, c: any, d: any): void;
    ng(a: any): boolean;
    nf(a: any): boolean;
    private ob;
    private ou;
    private ov;
    private nw;
    protected nh(a: string, b: FastItemsSourceEventAction): boolean;
    protected hy(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    n4(a: ScatterFrame): void;
    n5(a: ScatterFrame, b: Clipper): void;
    an(a: Axis): AxisRange;
    fp(a: Point): any;
    e8(a: Point): number;
    c9(a: any): boolean;
    protected jr(a: Rect, b: Rect): void;
    protected js(a: Rect, b: Rect): void;
    m8: ScatterFrame;
    na: ScatterFrame;
    m7: ScatterFrame;
    nx(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    n1(a: ScatterFrame, b: ScatterBaseView): void;
    hv(a: boolean, b: SeriesView): void;
    oa(a: ScatterFrame, b: ScatterBaseView): void;
    nz(a: ScatterFrame, b: ScatterBaseView): void;
    n2(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    n0(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    ny(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: any, e: number, f: number, g: boolean): {
        p4?: number;
        p5?: number;
    };
    n3(a: ErrorBarsHelper, b: IErrorBarCalculator, c: number, d: number, e: number, f: boolean): {
        p2?: number;
        p3?: number;
        p4?: number;
    };
    n7(a: ScatterFrame, b: ScatterBaseView): void;
    private n8;
    private n9;
    dw(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    jd(a: boolean): void;
    protected jn(): void;
    m9: ScatterFrame;
    je(a: Rect, b: RenderSurface): void;
    private m6;
    jb(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    n6(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    mz(a: ScatterBaseView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    ni(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    protected h4(a: any): void;
    eh(): number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterBaseView extends MarkerSeriesView {
    static $t: Type;
    cr: MarkerManagerBase;
    protected cp: Point[];
    protected cs: ScatterBase;
    protected cx: List$1<number>;
    constructor(a: ScatterBase);
    private c7;
    private c8;
    ct: ScatterTrendLineManager;
    ap(): void;
    private c6;
    c9(a: Marker): Size;
    protected cq(): MarkerManagerBase;
    protected c4(a: IDictionary$2<any, OwnedPoint>): void;
    cw(): List$1<Marker>;
    co(): Point[];
    protected cn(): Point[];
    protected cv(): List$1<number>;
    cy(): void;
    c2(a: PathGeometry): void;
    cz(): void;
    c3(a: PathGeometry): void;
    c5(): void;
    cu: HashPool$2<any, Marker>;
    cc(a: (arg1: Marker) => void): void;
    c1(): void;
    protected a2(a: RenderingContext, b: boolean): void;
    c0(a: boolean): void;
    getDefaultTooltipTemplate(): string;
}
