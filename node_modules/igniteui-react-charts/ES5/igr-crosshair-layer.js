import * as tslib_1 from "tslib";
import { IgrSeries } from "./igr-series";
import { Visibility_$type } from "igniteui-react-core/ES5/Visibility";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { CrosshairLayer } from "./CrosshairLayer";
import { brushToString, stringToBrush, ensureBool, ensureEnum } from "igniteui-react-core/ES5/componentUtil";
/**
 * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.
*/
var IgrCrosshairLayer = /** @class */ (function (_super) {
    tslib_1.__extends(IgrCrosshairLayer, _super);
    function IgrCrosshairLayer(props) {
        return _super.call(this, props) || this;
    }
    IgrCrosshairLayer.prototype.createImplementation = function () {
        return new CrosshairLayer();
    };
    Object.defineProperty(IgrCrosshairLayer.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "horizontalLineStroke", {
        /**
         * Gets or sets the color to use for the horizontal line. Leave null for an automatic value.
        */
        get: function () {
            return brushToString(this.i.o9);
        },
        set: function (v) {
            this.i.o9 = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "verticalLineStroke", {
        /**
         * Gets or sets the color to use for vertical line. Leave null for an automatic value.
        */
        get: function () {
            return brushToString(this.i.pa);
        },
        set: function (v) {
            this.i.pa = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "targetSeries", {
        /**
         * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
        */
        get: function () {
            if (this.i.m6 == null) {
                return null;
            }
            if (!this.i.m6.externalObject) {
                var e = IgrSeries._createFromInternal(this.i.m6);
                if (e) {
                    e._implementation = this.i.m6;
                }
                this.i.m6.externalObject = e;
            }
            return this.i.m6.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.m6 = null : this.i.m6 = v.i;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "useInterpolation", {
        /**
         * Gets or sets whether to use value interpolation when drawing a line through the best value for the cursor position.
        */
        get: function () {
            return this.i.nb;
        },
        set: function (v) {
            this.i.nb = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "isAxisAnnotationEnabled", {
        /**
         * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
        */
        get: function () {
            return this.i.m9;
        },
        set: function (v) {
            this.i.m9 = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationTextColor", {
        /**
         * Gets or sets the color to use for the x axis annotation text. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.pd);
        },
        set: function (v) {
            this.i.pd = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationBackground", {
        /**
         * Gets or sets the color to use for the x axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.pb);
        },
        set: function (v) {
            this.i.pb = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationInterpolatedValuePrecision", {
        /**
         * Gets or sets the precision to use displaying values for interpolated crosshair positions.
        */
        get: function () {
            return this.i.no;
        },
        set: function (v) {
            this.i.no = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationOutline", {
        /**
         * Gets or sets the color to use for the x axis annotation outline. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.pc);
        },
        set: function (v) {
            this.i.pc = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationPaddingLeft", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.nf;
        },
        set: function (v) {
            this.i.nf = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationPaddingTop", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.nh;
        },
        set: function (v) {
            this.i.nh = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationPaddingRight", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.ng;
        },
        set: function (v) {
            this.i.ng = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationPaddingBottom", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.ne;
        },
        set: function (v) {
            this.i.ne = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationPaddingLeft", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.nk;
        },
        set: function (v) {
            this.i.nk = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationPaddingTop", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.nm;
        },
        set: function (v) {
            this.i.nm = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationPaddingRight", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.nl;
        },
        set: function (v) {
            this.i.nl = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationPaddingBottom", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.nj;
        },
        set: function (v) {
            this.i.nj = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "xAxisAnnotationStrokeThickness", {
        /**
         * Gets or sets the stroke thickness for the x axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return this.i.ni;
        },
        set: function (v) {
            this.i.ni = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationTextColor", {
        /**
         * Gets or sets the color to use for the y axis annotation text. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.pg);
        },
        set: function (v) {
            this.i.pg = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationBackground", {
        /**
         * Gets or sets the color to use for the y axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.pe);
        },
        set: function (v) {
            this.i.pe = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationInterpolatedValuePrecision", {
        /**
         * Gets or sets the precision to use displaying values for interpolated crosshair positions.
        */
        get: function () {
            return this.i.np;
        },
        set: function (v) {
            this.i.np = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationOutline", {
        /**
         * Gets or sets the color to use for the y axis annotation outline. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.pf);
        },
        set: function (v) {
            this.i.pf = stringToBrush(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "yAxisAnnotationStrokeThickness", {
        /**
         * Gets or sets the stroke thickness for the y axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return this.i.nn;
        },
        set: function (v) {
            this.i.nn = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "verticalLineVisibility", {
        /**
         * Gets or sets whether to display the vertical line.
        */
        get: function () {
            return this.i.pk;
        },
        set: function (v) {
            this.i.pk = ensureEnum(Visibility_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "horizontalLineVisibility", {
        /**
         * Gets or sets whether to display the horizontal line.
        */
        get: function () {
            return this.i.pj;
        },
        set: function (v) {
            this.i.pj = ensureEnum(Visibility_$type, v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCrosshairLayer.prototype, "skipUnknownValues", {
        /**
         * Gets or sets whether to skip unknown values when searching for series values.
        */
        get: function () {
            return this.i.na;
        },
        set: function (v) {
            this.i.na = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    IgrCrosshairLayer.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.targetSeries && this.targetSeries._styling) {
            this.targetSeries._styling(container, component, this);
        }
        this._inStyling = false;
    };
    return IgrCrosshairLayer;
}(IgrAnnotationLayer));
export { IgrCrosshairLayer };
