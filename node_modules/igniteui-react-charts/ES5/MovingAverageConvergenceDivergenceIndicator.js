/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { StrategyBasedIndicator } from "./StrategyBasedIndicator";
import { IShortPeriodLongPeriod_$type } from "./IShortPeriodLongPeriod";
import { MovingAverageConvergenceDivergenceIndicatorStrategy } from "./MovingAverageConvergenceDivergenceIndicatorStrategy";
import { typeGetValue, markType } from "igniteui-react-core/ES5/type";
import { Brush } from "igniteui-react-core/ES5/Brush";
/**
 * @hidden
 */
var MovingAverageConvergenceDivergenceIndicator = /** @class */ (function (_super) {
    tslib_1.__extends(MovingAverageConvergenceDivergenceIndicator, _super);
    function MovingAverageConvergenceDivergenceIndicator() {
        var _this = _super.call(this) || this;
        _this.trendLineBrush = ((function () {
            var $ret = new Brush();
            $ret.fill = "#565656";
            return $ret;
        })());
        _this.trendLineType = 10;
        _this.trendLinePeriod = 9;
        _this.pj = 1;
        return _this;
    }
    MovingAverageConvergenceDivergenceIndicator.prototype.get_qb = function () {
        return new MovingAverageConvergenceDivergenceIndicatorStrategy();
    };
    Object.defineProperty(MovingAverageConvergenceDivergenceIndicator.prototype, "qb", {
        get: function () {
            return this.get_qb();
        },
        enumerable: true,
        configurable: true
    });
    MovingAverageConvergenceDivergenceIndicator.prototype.get_qo = function () {
        return MovingAverageConvergenceDivergenceIndicator.$;
    };
    Object.defineProperty(MovingAverageConvergenceDivergenceIndicator.prototype, "qo", {
        get: function () {
            return this.get_qo();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MovingAverageConvergenceDivergenceIndicator.prototype, "shortPeriod", {
        get: function () {
            return typeGetValue(this.c(MovingAverageConvergenceDivergenceIndicator.qz));
        },
        set: function (a) {
            this.h(MovingAverageConvergenceDivergenceIndicator.qz, a);
        },
        enumerable: true,
        configurable: true
    });
    MovingAverageConvergenceDivergenceIndicator.prototype.qj = function () {
        return this.shortPeriod;
    };
    Object.defineProperty(MovingAverageConvergenceDivergenceIndicator.prototype, "longPeriod", {
        get: function () {
            return typeGetValue(this.c(MovingAverageConvergenceDivergenceIndicator.qy));
        },
        set: function (a) {
            this.h(MovingAverageConvergenceDivergenceIndicator.qy, a);
        },
        enumerable: true,
        configurable: true
    });
    MovingAverageConvergenceDivergenceIndicator.prototype.qg = function () {
        return this.longPeriod;
    };
    Object.defineProperty(MovingAverageConvergenceDivergenceIndicator.prototype, "signalPeriod", {
        get: function () {
            return typeGetValue(this.c(MovingAverageConvergenceDivergenceIndicator.q0));
        },
        set: function (a) {
            this.h(MovingAverageConvergenceDivergenceIndicator.q0, a);
        },
        enumerable: true,
        configurable: true
    });
    MovingAverageConvergenceDivergenceIndicator.prototype.pr = function () {
        return this.signalPeriod;
    };
    MovingAverageConvergenceDivergenceIndicator.$t = markType(MovingAverageConvergenceDivergenceIndicator, 'MovingAverageConvergenceDivergenceIndicator', StrategyBasedIndicator.$, [IShortPeriodLongPeriod_$type]);
    MovingAverageConvergenceDivergenceIndicator.qz = StrategyBasedIndicator.qv(10, MovingAverageConvergenceDivergenceIndicator.$);
    MovingAverageConvergenceDivergenceIndicator.qy = StrategyBasedIndicator.qr(30, MovingAverageConvergenceDivergenceIndicator.$);
    MovingAverageConvergenceDivergenceIndicator.q0 = StrategyBasedIndicator.qu(9, MovingAverageConvergenceDivergenceIndicator.$, "SignalPeriod");
    return MovingAverageConvergenceDivergenceIndicator;
}(StrategyBasedIndicator));
export { MovingAverageConvergenceDivergenceIndicator };
