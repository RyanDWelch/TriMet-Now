import * as tslib_1 from "tslib";
import { IgrCategoryAxisBase } from "./igr-category-axis-base";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
/**
 * Represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories.
*
* `IgrCategoryAngleAxis` represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}   >
*
*     <IgrCategoryAngleAxis name="angleAxis" label="Department" />
*     <IgrNumericRadiusAxis name="radiusAxis" />
*
* </IgrDataChart>
* ```
*/
var IgrCategoryAngleAxis = /** @class */ (function (_super) {
    tslib_1.__extends(IgrCategoryAngleAxis, _super);
    function IgrCategoryAngleAxis(props) {
        return _super.call(this, props) || this;
    }
    IgrCategoryAngleAxis.prototype.createImplementation = function () {
        return new CategoryAngleAxis();
    };
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "isAngular", {
        /**
         * Checks if the axis is of angular type
        */
        get: function () {
            return this.i.b0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "startAngleOffset", {
        /**
         * Indicates the angle in degress that the chart's 0th angle should be offset.
        *
        * ```ts
        * <IgrDataChart
        *     dataSource={this.state.dataSource}   >
        *
        *     <IgrCategoryAngleAxis name="angleAxis" startAngleOffset={30} />
        *     <IgrNumericRadiusAxis name="radiusAxis" />
        *
        * </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.lh;
        },
        set: function (v) {
            this.i.lh = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "interval", {
        /**
         * Gets or sets the frequency of displayed labels.
         * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
        *
        * ```ts
        * <IgrDataChart
        *     dataSource={this.state.dataSource}   >
        *
        *     <IgrCategoryAngleAxis name="angleAxis" Interval ={2} />
        *     <IgrNumericRadiusAxis name="radiusAxis" />
        *
        * </IgrDataChart>
        * ```
        */
        get: function () {
            return this.i.le;
        },
        set: function (v) {
            this.i.le = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "actualInterval", {
        /**
         * Gets the effective value for the current Interval.
        */
        get: function () {
            return this.i.k8;
        },
        set: function (v) {
            this.i.k8 = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "minorInterval", {
        /**
         * Gets or sets the frequency of displayed minor lines.
         * The set value is a factor that determines how the minor lines will be displayed.
        */
        get: function () {
            return this.i.lf;
        },
        set: function (v) {
            this.i.lf = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrCategoryAngleAxis.prototype, "actualMinorInterval", {
        /**
         * Gets the effective value for the current MinorInterval.
        */
        get: function () {
            return this.i.k9;
        },
        set: function (v) {
            this.i.k9 = +v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets the scaled angle in radians from the raw axis value.
    
    * @param unscaledAngle  * The raw axis value.
    */
    IgrCategoryAngleAxis.prototype.getScaledAngle = function (unscaledAngle) {
        var iv = this.i.getScaledAngle(unscaledAngle);
        return (iv);
    };
    /**
     * Gets the raw axis value from the scaled angle in radians.
    
    */
    IgrCategoryAngleAxis.prototype.getUnscaledAngle = function (scaledAngle) {
        var iv = this.i.getUnscaledAngle(scaledAngle);
        return (iv);
    };
    return IgrCategoryAngleAxis;
}(IgrCategoryAxisBase));
export { IgrCategoryAngleAxis };
