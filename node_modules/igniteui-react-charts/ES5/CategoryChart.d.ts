import { XYChart } from "./XYChart";
import { Type } from "igniteui-react-core/ES5/type";
import { CategoryChartType } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { BrushCollection } from "igniteui-react-core/ES5/BrushCollection";
import { List$1 } from "igniteui-react-core/ES5/List$1";
import { DataSeriesType } from "igniteui-react-core/ES5/DataSeriesType";
import { IDataSeriesAdapterRule } from "igniteui-react-core/ES5/IDataSeriesAdapterRule";
import { Series } from "./Series";
import { XamDataChart } from "./XamDataChart";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-react-core/ES5/DataSeries";
/**
 * @hidden
 */
export declare class CategoryChart extends XYChart {
    static $t: Type;
    protected gj(): void;
    protected gl(a: Series, b: number): void;
    protected g2(a: string, b: any, c: any): void;
    private p1;
    p3: number;
    private o5;
    o6: (time: number) => number;
    p6(): string;
    protected ge(a: XamDataChart): void;
    protected gk(a: Series, b: number): void;
    private ov;
    private oz;
    protected f3(): void;
    protected m3(a: Axis): void;
    private op;
    oq: CategoryChartType;
    private or;
    os: CategorySeriesMarkerCollisionAvoidance;
    private o9;
    pe: boolean;
    private ot;
    ou: CategoryTransitionInMode;
    private o3;
    o4: TransitionInSpeedType;
    private pi;
    ps: number;
    private pj;
    pt: number;
    private ph;
    pr: number;
    private pk;
    pu: number;
    private pl;
    px: number;
    private pb;
    pg: boolean;
    private p2;
    p4: number;
    private pn;
    pz: number;
    private pm;
    py: number;
    private po;
    p0: number;
    readonly pq: number;
    readonly pp: number;
    readonly pw: number;
    readonly pv: number;
    private ol;
    on: BrushCollection;
    private om;
    oo: BrushCollection;
    private pa;
    pf: boolean;
    private o7;
    pc: boolean;
    private o8;
    pd: boolean;
    constructor();
    protected get_b5(): List$1<DataSeriesType>;
    protected readonly b5: List$1<DataSeriesType>;
    private qu;
    private qv;
    protected hj(): void;
    private _xAxis;
    private xAxis;
    private _yAxis;
    private yAxis;
    private oy;
    private ox;
    protected u(a: DataSeries): DataSeriesType;
    protected aq(a: DataSeries, b: DataSeriesType): Series;
    protected hh(a: DataSeries): void;
    protected hk(): void;
    protected get_b4(): List$1<IDataSeriesAdapterRule>;
    protected readonly b4: List$1<IDataSeriesAdapterRule>;
    protected f1(a: Series, b: number): void;
    private qs;
    private qt;
    protected h7(): Axis;
    protected h8(): Axis;
    private o1;
    private o2;
    protected b1(a: string, b: boolean): List$1<Series>;
    protected ho(a: Series, b: Series, c: DataSeries): void;
    protected g1(a: string, b: any, c: any): void;
}
