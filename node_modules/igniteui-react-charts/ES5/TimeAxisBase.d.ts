import { CategoryAxisBase } from "./CategoryAxisBase";
import { ISortingAxis } from "./ISortingAxis";
import { IDateTimeAxis } from "./IDateTimeAxis";
import { IFastItemColumn$1 } from "igniteui-react-core/ES5/IFastItemColumn$1";
import { List$1 } from "igniteui-react-core/ES5/List$1";
import { IList$1, Type } from "igniteui-react-core/ES5/type";
import { AxisOrientation } from "./AxisOrientation";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core/ES5/Rect";
import { CategoryMode } from "./CategoryMode";
import { SortedListView$1 } from "./SortedListView$1";
import { Series } from "./Series";
import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
/**
 * @hidden
 */
export declare abstract class TimeAxisBase extends CategoryAxisBase implements ISortingAxis, IDateTimeAxis {
    static $t: Type;
    constructor();
    dv(a: number, b: ScalerParams): number;
    e3(a: any, b: string): any;
    private lc;
    private ld;
    dy(a: number, b: ScalerParams): number;
    getUnscaledValue3(a: number, b: Rect, c: Rect, d: CategoryMode): number;
    i$h(): void;
    ls(): void;
    protected lx(): void;
    dateTimeMemberPath: string;
    kw: IFastItemColumn$1<Date>;
    private kv;
    private k4;
    protected k5: List$1<number>;
    readonly i$b: List$1<number>;
    protected lt(): void;
    i$e(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected lf(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected le(a: Date): number;
    i$g(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected li(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected lh(a: Date): number;
    i$d(a: number): number;
    i$c(a: number): number;
    protected lg(a: Date, b: SortedListView$1<Date>): number;
    i$f(a: number): number;
    i$i(): void;
    k1: boolean;
    private kz;
    protected get_k0(): boolean;
    protected set_k0(a: boolean): void;
    k0: boolean;
    gv(a: string): void;
    gy(a: any): void;
    gx(a: any): void;
    cm(): boolean;
    protected k3(): boolean;
    protected k2(): boolean;
    private k7;
    actualMinimumValue: Date;
    private k6;
    e8(): any;
    actualMaximumValue: Date;
    e7(): any;
    minimumValue: Date;
    maximumValue: Date;
    private lu;
    protected gt(a: any, b: string, c: any, d: any): void;
    private lr;
    protected kx(a: string): IFastItemColumn$1<Date>;
    static ky(a: string, b: CategoryAxisBase): IFastItemColumn$1<Date>;
    as(): AxisLabelPanelBase;
    protected get_az(): AxisOrientation;
    readonly az: AxisOrientation;
    protected g6(a: boolean): void;
    protected get_b5(): boolean;
    protected startCursor(): void;
    protected resetCursor(): void;
    StartTimeCursor(): void;
    ResetTimeCursor(): void;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    jq(a: Rect, b: Rect, c: Rect): number;
    protected get_cc(): boolean;
    protected lq(a: Date, b: Date): number;
    preferredCategoryMode(a: Series): CategoryMode;
    readonly isVertical: boolean;
    j$c(a: number, b: ScalerParams): number;
    j$b(a: number, b: ScalerParams): number;
    j$d(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$e(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    readonly j$a: boolean;
    readonly i$a: boolean;
    static $$p: string[];
}
