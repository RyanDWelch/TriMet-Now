import { IgrCategoryAxisBase, IIgrCategoryAxisBaseProps } from "./igr-category-axis-base";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
/**
 * Represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories.
*
* `IgrCategoryAngleAxis` represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}   >
*
*     <IgrCategoryAngleAxis name="angleAxis" label="Department" />
*     <IgrNumericRadiusAxis name="radiusAxis" />
*
* </IgrDataChart>
* ```
*/
export declare class IgrCategoryAngleAxis extends IgrCategoryAxisBase<IIgrCategoryAngleAxisProps> {
    protected createImplementation(): CategoryAngleAxis;
    /**
                                 * @hidden
                                 */
    readonly i: CategoryAngleAxis;
    constructor(props: IIgrCategoryAngleAxisProps);
    /**
     * Checks if the axis is of angular type
    */
    readonly isAngular: boolean;
    /**
     * Indicates the angle in degress that the chart's 0th angle should be offset.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}   >
    *
    *     <IgrCategoryAngleAxis name="angleAxis" startAngleOffset={30} />
    *     <IgrNumericRadiusAxis name="radiusAxis" />
    *
    * </IgrDataChart>
    * ```
    */
    startAngleOffset: number;
    /**
     * Gets or sets the frequency of displayed labels.
     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}   >
    *
    *     <IgrCategoryAngleAxis name="angleAxis" Interval ={2} />
    *     <IgrNumericRadiusAxis name="radiusAxis" />
    *
    * </IgrDataChart>
    * ```
    */
    interval: number;
    /**
     * Gets the effective value for the current Interval.
    */
    actualInterval: number;
    /**
     * Gets or sets the frequency of displayed minor lines.
     * The set value is a factor that determines how the minor lines will be displayed.
    */
    minorInterval: number;
    /**
     * Gets the effective value for the current MinorInterval.
    */
    actualMinorInterval: number;
    /**
     * Gets the scaled angle in radians from the raw axis value.
    
    * @param unscaledAngle  * The raw axis value.
    */
    getScaledAngle(unscaledAngle: number): number;
    /**
     * Gets the raw axis value from the scaled angle in radians.
    
    */
    getUnscaledAngle(scaledAngle: number): number;
}
export interface IIgrCategoryAngleAxisProps extends IIgrCategoryAxisBaseProps {
    /**
     * Indicates the angle in degress that the chart's 0th angle should be offset.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}   >
    *
    *     <IgrCategoryAngleAxis name="angleAxis" startAngleOffset={30} />
    *     <IgrNumericRadiusAxis name="radiusAxis" />
    *
    * </IgrDataChart>
    * ```
    */
    startAngleOffset?: number | string;
    /**
     * Gets or sets the frequency of displayed labels.
     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    *
    * ```ts
    * <IgrDataChart
    *     dataSource={this.state.dataSource}   >
    *
    *     <IgrCategoryAngleAxis name="angleAxis" Interval ={2} />
    *     <IgrNumericRadiusAxis name="radiusAxis" />
    *
    * </IgrDataChart>
    * ```
    */
    interval?: number | string;
    /**
     * Gets the effective value for the current Interval.
    */
    actualInterval?: number | string;
    /**
     * Gets or sets the frequency of displayed minor lines.
     * The set value is a factor that determines how the minor lines will be displayed.
    */
    minorInterval?: number | string;
    /**
     * Gets the effective value for the current MinorInterval.
    */
    actualMinorInterval?: number | string;
}
