import * as React from 'react';
import { TimeAxisIntervalType } from "./TimeAxisIntervalType";
import { TimeAxisInterval } from "./TimeAxisInterval";
/**
 * Settings for an interval on a time axis.
 * Label intervals can be applied to a time axis, which are dynamic, according to the visible range.  During zooming, the visible range of the axis can change, and so a different interval is selected.  The interval selected will be the one with the largest range smaller than the visible range of the axis.
*
* The `IgrTimeAxisInterval` is used for settings the interval on a time axis.
*
* ```ts
*   <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*     <IgrOrdinalTimeXAxis name="xAxis" label="Date"
* 			dateTimeMemberPath="Date" />
*  </IgrDataChart>
* ```
*
* ```ts
*   <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*     <IgrTimeXAxis name="xAxis" label="Date"
* 			dateTimeMemberPath="Date" >
*
*  </IgrTimeXAxis>
*  </IgrDataChart>
* ```
*/
export declare class IgrTimeAxisInterval<P extends IIgrTimeAxisIntervalProps = IIgrTimeAxisIntervalProps> extends React.Component<P, {}> {
    protected createImplementation(): TimeAxisInterval;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: TimeAxisInterval; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgrTimeAxisInterval;
    private onImplementationCreated;
    constructor(props: P);
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: any, nextState: any): boolean;
    render(): any;
    /**
     * The visible axis range at which to apply this interval.
    *
    * Use `range` property for the visible axis range at which to apply this interval.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrOrdinalTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" >
    *
    *  </IgrTimeXAxis>
    *  </IgrDataChart>
    * ```
    */
    range: number;
    /**
     * The interval, expressed as a multiple of IntervalType.
    *
    * Use the `interval` property expressed as a multiple of IntervalType.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrOrdinalTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" >
    *
    *  </IgrTimeXAxis>
    *  </IgrDataChart>
    * ```
    */
    interval: number;
    /**
     * The unit of time for this interval.
    *
    * The `intervalType` is the unit of time for this interval.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrOrdinalTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" >
    *
    *  </IgrTimeXAxis>
    *  </IgrDataChart>
    * ```
    */
    intervalType: TimeAxisIntervalType;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected readonly hasUserValues: Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
}
export interface IIgrTimeAxisIntervalProps {
    /**
     * The visible axis range at which to apply this interval.
    *
    * Use `range` property for the visible axis range at which to apply this interval.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrOrdinalTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" >
    *
    *  </IgrTimeXAxis>
    *  </IgrDataChart>
    * ```
    */
    range?: number | string;
    /**
     * The interval, expressed as a multiple of IntervalType.
    *
    * Use the `interval` property expressed as a multiple of IntervalType.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrOrdinalTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" >
    *
    *  </IgrTimeXAxis>
    *  </IgrDataChart>
    * ```
    */
    interval?: number | string;
    /**
     * The unit of time for this interval.
    *
    * The `intervalType` is the unit of time for this interval.
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrOrdinalTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" />
    *  </IgrDataChart>
    * ```
    *
    * ```ts
    *   <IgrDataChart
    *     dataSource={this.state.dataSource}
    *     width="700px"
    *     height="500px">
    *     <IgrTimeXAxis name="xAxis" label="Date"
    * 			dateTimeMemberPath="Date" >
    *
    *  </IgrTimeXAxis>
    *  </IgrDataChart>
    * ```
    */
    intervalType?: TimeAxisIntervalType | string;
}
