import * as tslib_1 from "tslib";
import { IgrStraightNumericAxisBase } from "./igr-straight-numeric-axis-base";
import { NumericYAxis } from "./NumericYAxis";
/**
 * Represents a IgxDataChartComponent numeric Y axis.
*
* The `IgrNumericYAxis` treats the data as continuously varying numerical data items. Labels on this axis are placed along the Y-axis. Location of labels varies according to the value in a data column that is mapped using the `YMemberPath` property for Scatter Series or `ValueMemberPath` property for Category Series.
*
* ```ts
* <IgrDataChart >
*
*     <IgrCategoryXAxis name="xAxisYears"
*     interval={12} labelLocation="OutsideBottom"
*     label="Year"  overlap={1} gap={0.4}  />
*
*     <IgrNumericYAxis  name="yAxisLeft"
*     title="Expanse | Revenue"
*     minimumValue={-900} labelLocation="OutsideLeft"
*     maximumValue={900}
*     interval={300} />
*
*
*     <IgrLineSeries name="series1"
*     valueMemberPath="Revenue"
*     xAxisName="xAxisMonths"
*     yAxisName="yAxisLeft"
* 	consolidatedItemHitTestBehavior="Basic"  />
* 	 </IgrDataChart>
* ```
*/
var IgrNumericYAxis = /** @class */ (function (_super) {
    tslib_1.__extends(IgrNumericYAxis, _super);
    function IgrNumericYAxis(props) {
        return _super.call(this, props) || this;
    }
    IgrNumericYAxis.prototype.createImplementation = function () {
        return new NumericYAxis();
    };
    Object.defineProperty(IgrNumericYAxis.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgrNumericYAxis.prototype, "isVertical", {
        /**
         * Gets if the current axis is of vertical axis
        */
        get: function () {
            return this.i.ce;
        },
        enumerable: true,
        configurable: true
    });
    IgrNumericYAxis.prototype.scrollRangeIntoView = function (minimum, maximum) {
        this.i.lu(minimum, maximum);
    };
    return IgrNumericYAxis;
}(IgrStraightNumericAxisBase));
export { IgrNumericYAxis };
