import * as tslib_1 from "tslib";
import { AssigningCategoryStyleEventArgsBase } from "./igr-assigning-category-style-event-args-base";
import { AssigningCategoryStyleEventArgs as AssigningCategoryStyleEventArgs_internal } from "./AssigningCategoryStyleEventArgs";
/**
 * Represents event arguments class for the AssigningCategoryStyleEvent
*
* The `AssigningCategoryStyle` event fired to allow you to override the style of items in a category or financial series
*
* ```ts
* <IgrDataChart
*     dataSource={this.state.dataSource}
*     width="700px"
*     height="500px">
*
*     <IgrCategoryXAxis name="xAxis" label="Year" />
*     <IgrNumericYAxis  name="yAxis" />
*
*     <IgrRangeColumnSeries
*         name="series1"
*         xAxisName="xAxis"
*         yAxisName="yAxis"
*         highMemberPath="High"
*         lowMemberPath="Low" />
*  </IgrDataChart>
* ```
*
* ```ts
* series.assigningCategoryStyle= this.chart_AssigningCategoryStyle;
* chart_AssigningCategoryStyle(sender :any,args: AssigningCategoryStyleEventArgs )
*   {
*
*
*   }
* ```
*/
var AssigningCategoryStyleEventArgs = /** @class */ (function (_super) {
    tslib_1.__extends(AssigningCategoryStyleEventArgs, _super);
    function AssigningCategoryStyleEventArgs() {
        return _super.call(this) || this;
    }
    AssigningCategoryStyleEventArgs.prototype.createImplementation = function () {
        return new AssigningCategoryStyleEventArgs_internal();
    };
    Object.defineProperty(AssigningCategoryStyleEventArgs.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssigningCategoryStyleEventArgs.prototype, "strokeThickness", {
        /**
         * Gets or sets stroke thickness to use for the current item.
        */
        get: function () {
            return this.i.r;
        },
        set: function (v) {
            this.i.r = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssigningCategoryStyleEventArgs.prototype, "radiusX", {
        /**
         * Gets or sets corner radius X to use for the current item, if applicable.
        *
        * Use the `radiusX` property to round the corners of the column.
        */
        get: function () {
            return this.i.p;
        },
        set: function (v) {
            this.i.p = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AssigningCategoryStyleEventArgs.prototype, "radiusY", {
        /**
         * Gets or sets corner radius Y to use for the current item, if applicable.
        *
        * Use the `radiusY` property for the y-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.q;
        },
        set: function (v) {
            this.i.q = +v;
        },
        enumerable: true,
        configurable: true
    });
    return AssigningCategoryStyleEventArgs;
}(AssigningCategoryStyleEventArgsBase));
export { AssigningCategoryStyleEventArgs };
